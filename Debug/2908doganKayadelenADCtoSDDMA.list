
2908doganKayadelenADCtoSDDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004148  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080043b0  080043b0  000143b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080043b4  080043b4  000143b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080043b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  7 .bss          0000f170  20000008  20000008  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  2000f178  2000f178  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b8a3  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000037bc  00000000  00000000  0003b8db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a153  00000000  00000000  0003f097  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ab0  00000000  00000000  000491f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f78  00000000  00000000  00049ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006b8f  00000000  00000000  0004ac18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003c82  00000000  00000000  000517a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00055429  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001ea0  00000000  00000000  000554a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042b8 	.word	0x080042b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	080042b8 	.word	0x080042b8

080001c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 fafa 	bl	80007d0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 fab4 	bl	8000750 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000004 	.word	0x20000004

080001f0 <HAL_Init>:
{
 80001f0:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <HAL_Init+0x30>)
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001fa:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000202:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800020a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020c:	2003      	movs	r0, #3
 800020e:	f000 fa8d 	bl	800072c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000212:	2000      	movs	r0, #0
 8000214:	f7ff ffd8 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000218:	f003 feb7 	bl	8003f8a <HAL_MspInit>
}
 800021c:	2000      	movs	r0, #0
 800021e:	bd08      	pop	{r3, pc}
 8000220:	40023c00 	.word	0x40023c00

08000224 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <HAL_IncTick+0xc>)
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	6013      	str	r3, [r2, #0]
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000058 	.word	0x20000058

08000234 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <HAL_GetTick+0x8>)
 8000236:	6818      	ldr	r0, [r3, #0]
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000058 	.word	0x20000058

08000240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000242:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000244:	f7ff fff6 	bl	8000234 <HAL_GetTick>
  uint32_t wait = Delay;
 8000248:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800024a:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800024c:	4605      	mov	r5, r0
  {
     wait++;
 800024e:	bf18      	it	ne
 8000250:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000252:	f7ff ffef 	bl	8000234 <HAL_GetTick>
 8000256:	1b40      	subs	r0, r0, r5
 8000258:	42a0      	cmp	r0, r4
 800025a:	d3fa      	bcc.n	8000252 <HAL_Delay+0x12>
  {
  }
}
 800025c:	b003      	add	sp, #12
 800025e:	bd30      	pop	{r4, r5, pc}

08000260 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000260:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000262:	4604      	mov	r4, r0
 8000264:	2800      	cmp	r0, #0
 8000266:	f000 809f 	beq.w	80003a8 <HAL_ADC_Init+0x148>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800026a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800026c:	b923      	cbnz	r3, 8000278 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800026e:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000270:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000274:	f003 feba 	bl	8003fec <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000278:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800027a:	06db      	lsls	r3, r3, #27
 800027c:	f100 8092 	bmi.w	80003a4 <HAL_ADC_Init+0x144>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000280:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000282:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000286:	f023 0302 	bic.w	r3, r3, #2
 800028a:	f043 0302 	orr.w	r3, r3, #2
 800028e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000290:	4b46      	ldr	r3, [pc, #280]	; (80003ac <HAL_ADC_Init+0x14c>)
 8000292:	685a      	ldr	r2, [r3, #4]
 8000294:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000298:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800029a:	685a      	ldr	r2, [r3, #4]
 800029c:	6861      	ldr	r1, [r4, #4]
 800029e:	430a      	orrs	r2, r1
 80002a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80002a2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80002a4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80002a6:	685a      	ldr	r2, [r3, #4]
 80002a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80002ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80002b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80002b6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80002b8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80002ba:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80002be:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80002c0:	685a      	ldr	r2, [r3, #4]
 80002c2:	430a      	orrs	r2, r1
 80002c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80002c6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80002c8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80002ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80002ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80002d0:	689a      	ldr	r2, [r3, #8]
 80002d2:	430a      	orrs	r2, r1
 80002d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80002d6:	4936      	ldr	r1, [pc, #216]	; (80003b0 <HAL_ADC_Init+0x150>)
 80002d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002da:	428a      	cmp	r2, r1
 80002dc:	d056      	beq.n	800038c <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80002de:	6899      	ldr	r1, [r3, #8]
 80002e0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80002e4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80002e6:	6899      	ldr	r1, [r3, #8]
 80002e8:	430a      	orrs	r2, r1
 80002ea:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80002ec:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80002ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80002f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80002f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80002f6:	689a      	ldr	r2, [r3, #8]
 80002f8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80002fa:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80002fc:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80002fe:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000300:	f022 0202 	bic.w	r2, r2, #2
 8000304:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000306:	689a      	ldr	r2, [r3, #8]
 8000308:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800030c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800030e:	6a22      	ldr	r2, [r4, #32]
 8000310:	2a00      	cmp	r2, #0
 8000312:	d043      	beq.n	800039c <HAL_ADC_Init+0x13c>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000314:	685a      	ldr	r2, [r3, #4]
 8000316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800031a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800031c:	685a      	ldr	r2, [r3, #4]
 800031e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000322:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000324:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000328:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800032c:	fab2 f182 	clz	r1, r2
 8000330:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000332:	6858      	ldr	r0, [r3, #4]
 8000334:	3a01      	subs	r2, #1
 8000336:	408a      	lsls	r2, r1
 8000338:	4302      	orrs	r2, r0
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800033a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800033c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800033e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000340:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000344:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000348:	3901      	subs	r1, #1
 800034a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800034e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000350:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000352:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000354:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000358:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800035a:	689a      	ldr	r2, [r3, #8]
 800035c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000360:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000362:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000364:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800036a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800036c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800036e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000370:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000374:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000376:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000378:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800037a:	f023 0303 	bic.w	r3, r3, #3
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000384:	2300      	movs	r3, #0
 8000386:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800038a:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800038c:	689a      	ldr	r2, [r3, #8]
 800038e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000392:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000394:	689a      	ldr	r2, [r3, #8]
 8000396:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800039a:	e7ae      	b.n	80002fa <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800039c:	685a      	ldr	r2, [r3, #4]
 800039e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80003a2:	e7ca      	b.n	800033a <HAL_ADC_Init+0xda>
    tmp_hal_status = HAL_ERROR;
 80003a4:	2001      	movs	r0, #1
 80003a6:	e7ed      	b.n	8000384 <HAL_ADC_Init+0x124>
    return HAL_ERROR;
 80003a8:	2001      	movs	r0, #1
}
 80003aa:	bd10      	pop	{r4, pc}
 80003ac:	40012300 	.word	0x40012300
 80003b0:	0f000001 	.word	0x0f000001

080003b4 <HAL_ADC_Start_IT>:
{
 80003b4:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80003b6:	2300      	movs	r3, #0
 80003b8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80003ba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d054      	beq.n	800046c <HAL_ADC_Start_IT+0xb8>
 80003c2:	2301      	movs	r3, #1
 80003c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80003c8:	6803      	ldr	r3, [r0, #0]
 80003ca:	689a      	ldr	r2, [r3, #8]
 80003cc:	07d1      	lsls	r1, r2, #31
 80003ce:	d505      	bpl.n	80003dc <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80003d0:	689a      	ldr	r2, [r3, #8]
 80003d2:	07d2      	lsls	r2, r2, #31
 80003d4:	d414      	bmi.n	8000400 <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 80003d6:	2000      	movs	r0, #0
}
 80003d8:	b002      	add	sp, #8
 80003da:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80003dc:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003de:	4924      	ldr	r1, [pc, #144]	; (8000470 <HAL_ADC_Start_IT+0xbc>)
    __HAL_ADC_ENABLE(hadc);
 80003e0:	f042 0201 	orr.w	r2, r2, #1
 80003e4:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003e6:	4a23      	ldr	r2, [pc, #140]	; (8000474 <HAL_ADC_Start_IT+0xc0>)
 80003e8:	6812      	ldr	r2, [r2, #0]
 80003ea:	fbb2 f2f1 	udiv	r2, r2, r1
 80003ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 80003f2:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 80003f4:	9a01      	ldr	r2, [sp, #4]
 80003f6:	2a00      	cmp	r2, #0
 80003f8:	d0ea      	beq.n	80003d0 <HAL_ADC_Start_IT+0x1c>
      counter--;
 80003fa:	9a01      	ldr	r2, [sp, #4]
 80003fc:	3a01      	subs	r2, #1
 80003fe:	e7f8      	b.n	80003f2 <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000400:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000402:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000406:	f022 0201 	bic.w	r2, r2, #1
 800040a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800040e:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000410:	685a      	ldr	r2, [r3, #4]
 8000412:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000414:	bf41      	itttt	mi
 8000416:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000418:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800041c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000420:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000422:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000428:	bf1c      	itt	ne
 800042a:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 800042c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000430:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000432:	2200      	movs	r2, #0
 8000434:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000438:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800043c:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800043e:	685a      	ldr	r2, [r3, #4]
 8000440:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000444:	f042 0220 	orr.w	r2, r2, #32
 8000448:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800044a:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <HAL_ADC_Start_IT+0xc4>)
 800044c:	6852      	ldr	r2, [r2, #4]
 800044e:	06d2      	lsls	r2, r2, #27
 8000450:	d108      	bne.n	8000464 <HAL_ADC_Start_IT+0xb0>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000452:	6898      	ldr	r0, [r3, #8]
 8000454:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000458:	d1bd      	bne.n	80003d6 <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800045a:	689a      	ldr	r2, [r3, #8]
 800045c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	e7b9      	b.n	80003d8 <HAL_ADC_Start_IT+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000464:	4a05      	ldr	r2, [pc, #20]	; (800047c <HAL_ADC_Start_IT+0xc8>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d1b5      	bne.n	80003d6 <HAL_ADC_Start_IT+0x22>
 800046a:	e7f2      	b.n	8000452 <HAL_ADC_Start_IT+0x9e>
  __HAL_LOCK(hadc);
 800046c:	2002      	movs	r0, #2
 800046e:	e7b3      	b.n	80003d8 <HAL_ADC_Start_IT+0x24>
 8000470:	000f4240 	.word	0x000f4240
 8000474:	20000004 	.word	0x20000004
 8000478:	40012300 	.word	0x40012300
 800047c:	40012000 	.word	0x40012000

08000480 <HAL_ADC_Stop_IT>:
  __HAL_LOCK(hadc);
 8000480:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000484:	2b01      	cmp	r3, #1
 8000486:	d01d      	beq.n	80004c4 <HAL_ADC_Stop_IT+0x44>
 8000488:	2301      	movs	r3, #1
 800048a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800048e:	6803      	ldr	r3, [r0, #0]
 8000490:	689a      	ldr	r2, [r3, #8]
 8000492:	f022 0201 	bic.w	r2, r2, #1
 8000496:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000498:	689a      	ldr	r2, [r3, #8]
 800049a:	07d2      	lsls	r2, r2, #31
 800049c:	d40d      	bmi.n	80004ba <HAL_ADC_Stop_IT+0x3a>
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800049e:	685a      	ldr	r2, [r3, #4]
 80004a0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80004a4:	f022 0220 	bic.w	r2, r2, #32
 80004a8:	605a      	str	r2, [r3, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80004aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80004ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80004b0:	f023 0301 	bic.w	r3, r3, #1
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80004ba:	2300      	movs	r3, #0
 80004bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80004c0:	4618      	mov	r0, r3
 80004c2:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80004c4:	2002      	movs	r0, #2
}
 80004c6:	4770      	bx	lr

080004c8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80004c8:	6803      	ldr	r3, [r0, #0]
 80004ca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80004cc:	4770      	bx	lr

080004ce <HAL_ADC_LevelOutOfWindowCallback>:
 80004ce:	4770      	bx	lr

080004d0 <HAL_ADC_ErrorCallback>:
{
 80004d0:	4770      	bx	lr

080004d2 <HAL_ADC_IRQHandler>:
{
 80004d2:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80004d4:	6803      	ldr	r3, [r0, #0]
 80004d6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80004d8:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80004da:	078d      	lsls	r5, r1, #30
{
 80004dc:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 80004de:	d52b      	bpl.n	8000538 <HAL_ADC_IRQHandler+0x66>
 80004e0:	0690      	lsls	r0, r2, #26
 80004e2:	d529      	bpl.n	8000538 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80004e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80004e6:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80004e8:	bf5e      	ittt	pl
 80004ea:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80004ec:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80004f0:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80004f2:	689a      	ldr	r2, [r3, #8]
 80004f4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80004f8:	d117      	bne.n	800052a <HAL_ADC_IRQHandler+0x58>
 80004fa:	69a2      	ldr	r2, [r4, #24]
 80004fc:	b9aa      	cbnz	r2, 800052a <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80004fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000500:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000504:	d002      	beq.n	800050c <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000506:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000508:	0552      	lsls	r2, r2, #21
 800050a:	d40e      	bmi.n	800052a <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800050c:	685a      	ldr	r2, [r3, #4]
 800050e:	f022 0220 	bic.w	r2, r2, #32
 8000512:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000514:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000516:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800051a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800051c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800051e:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000520:	bf5e      	ittt	pl
 8000522:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8000524:	f043 0301 	orrpl.w	r3, r3, #1
 8000528:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800052a:	4620      	mov	r0, r4
 800052c:	f003 fb82 	bl	8003c34 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000530:	6823      	ldr	r3, [r4, #0]
 8000532:	f06f 0212 	mvn.w	r2, #18
 8000536:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000538:	6823      	ldr	r3, [r4, #0]
 800053a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800053c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800053e:	074d      	lsls	r5, r1, #29
 8000540:	d532      	bpl.n	80005a8 <HAL_ADC_IRQHandler+0xd6>
 8000542:	0610      	lsls	r0, r2, #24
 8000544:	d530      	bpl.n	80005a8 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000546:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000548:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800054a:	bf5e      	ittt	pl
 800054c:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800054e:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000552:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000554:	689a      	ldr	r2, [r3, #8]
 8000556:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800055a:	d11e      	bne.n	800059a <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800055c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800055e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000562:	d002      	beq.n	800056a <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000564:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000566:	0552      	lsls	r2, r2, #21
 8000568:	d417      	bmi.n	800059a <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800056a:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800056c:	0555      	lsls	r5, r2, #21
 800056e:	d414      	bmi.n	800059a <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000570:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000572:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000576:	d110      	bne.n	800059a <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000578:	69a2      	ldr	r2, [r4, #24]
 800057a:	b972      	cbnz	r2, 800059a <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800057c:	685a      	ldr	r2, [r3, #4]
 800057e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000582:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000584:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800058a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800058c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800058e:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000590:	bf5e      	ittt	pl
 8000592:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8000594:	f043 0301 	orrpl.w	r3, r3, #1
 8000598:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800059a:	4620      	mov	r0, r4
 800059c:	f000 f8c4 	bl	8000728 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80005a0:	6823      	ldr	r3, [r4, #0]
 80005a2:	f06f 020c 	mvn.w	r2, #12
 80005a6:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80005a8:	6823      	ldr	r3, [r4, #0]
 80005aa:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80005ac:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80005ae:	07c9      	lsls	r1, r1, #31
 80005b0:	d50f      	bpl.n	80005d2 <HAL_ADC_IRQHandler+0x100>
 80005b2:	0655      	lsls	r5, r2, #25
 80005b4:	d50d      	bpl.n	80005d2 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	07d8      	lsls	r0, r3, #31
 80005ba:	d50a      	bpl.n	80005d2 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80005bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c2:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80005c4:	4620      	mov	r0, r4
 80005c6:	f7ff ff82 	bl	80004ce <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80005ca:	6823      	ldr	r3, [r4, #0]
 80005cc:	f06f 0201 	mvn.w	r2, #1
 80005d0:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80005d2:	6823      	ldr	r3, [r4, #0]
 80005d4:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80005d6:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80005d8:	0689      	lsls	r1, r1, #26
 80005da:	d50d      	bpl.n	80005f8 <HAL_ADC_IRQHandler+0x126>
 80005dc:	0152      	lsls	r2, r2, #5
 80005de:	d50b      	bpl.n	80005f8 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80005e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80005e2:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80005e6:	f042 0202 	orr.w	r2, r2, #2
 80005ea:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 80005ec:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80005ee:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 80005f0:	f7ff ff6e 	bl	80004d0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80005f4:	6823      	ldr	r3, [r4, #0]
 80005f6:	601d      	str	r5, [r3, #0]
 80005f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080005fc <HAL_ADC_ConfigChannel>:
{
 80005fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80005fe:	2300      	movs	r3, #0
 8000600:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000602:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000606:	2b01      	cmp	r3, #1
 8000608:	f000 8083 	beq.w	8000712 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800060c:	680d      	ldr	r5, [r1, #0]
 800060e:	6804      	ldr	r4, [r0, #0]
 8000610:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000612:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000614:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000616:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800061a:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 800061c:	d92a      	bls.n	8000674 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800061e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000622:	68e7      	ldr	r7, [r4, #12]
 8000624:	3b1e      	subs	r3, #30
 8000626:	f04f 0e07 	mov.w	lr, #7
 800062a:	fa0e fe03 	lsl.w	lr, lr, r3
 800062e:	ea27 070e 	bic.w	r7, r7, lr
 8000632:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000634:	68e7      	ldr	r7, [r4, #12]
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	433b      	orrs	r3, r7
 800063c:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800063e:	684a      	ldr	r2, [r1, #4]
 8000640:	2a06      	cmp	r2, #6
 8000642:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000646:	d825      	bhi.n	8000694 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000648:	4413      	add	r3, r2
 800064a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800064c:	1f59      	subs	r1, r3, #5
 800064e:	231f      	movs	r3, #31
 8000650:	408b      	lsls	r3, r1
 8000652:	ea27 0303 	bic.w	r3, r7, r3
 8000656:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000658:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800065a:	fa06 f101 	lsl.w	r1, r6, r1
 800065e:	4311      	orrs	r1, r2
 8000660:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000662:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <HAL_ADC_ConfigChannel+0x11c>)
 8000664:	429c      	cmp	r4, r3
 8000666:	d034      	beq.n	80006d2 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8000668:	2300      	movs	r3, #0
 800066a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800066e:	4618      	mov	r0, r3
}
 8000670:	b003      	add	sp, #12
 8000672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000674:	6927      	ldr	r7, [r4, #16]
 8000676:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800067a:	f04f 0e07 	mov.w	lr, #7
 800067e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000682:	ea27 070e 	bic.w	r7, r7, lr
 8000686:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000688:	6927      	ldr	r7, [r4, #16]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	433b      	orrs	r3, r7
 8000690:	6123      	str	r3, [r4, #16]
 8000692:	e7d4      	b.n	800063e <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8000694:	2a0c      	cmp	r2, #12
 8000696:	d80e      	bhi.n	80006b6 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000698:	4413      	add	r3, r2
 800069a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800069c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80006a0:	231f      	movs	r3, #31
 80006a2:	4093      	lsls	r3, r2
 80006a4:	ea21 0303 	bic.w	r3, r1, r3
 80006a8:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80006aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80006ac:	fa06 f202 	lsl.w	r2, r6, r2
 80006b0:	431a      	orrs	r2, r3
 80006b2:	6322      	str	r2, [r4, #48]	; 0x30
 80006b4:	e7d5      	b.n	8000662 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80006b6:	4413      	add	r3, r2
 80006b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80006ba:	3b41      	subs	r3, #65	; 0x41
 80006bc:	221f      	movs	r2, #31
 80006be:	409a      	lsls	r2, r3
 80006c0:	ea21 0202 	bic.w	r2, r1, r2
 80006c4:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80006c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80006c8:	fa06 f103 	lsl.w	r1, r6, r3
 80006cc:	4311      	orrs	r1, r2
 80006ce:	62e1      	str	r1, [r4, #44]	; 0x2c
 80006d0:	e7c7      	b.n	8000662 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80006d2:	2d12      	cmp	r5, #18
 80006d4:	d104      	bne.n	80006e0 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80006d6:	4a11      	ldr	r2, [pc, #68]	; (800071c <HAL_ADC_ConfigChannel+0x120>)
 80006d8:	6853      	ldr	r3, [r2, #4]
 80006da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006de:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80006e0:	f1a5 0310 	sub.w	r3, r5, #16
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d8bf      	bhi.n	8000668 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80006e8:	4a0c      	ldr	r2, [pc, #48]	; (800071c <HAL_ADC_ConfigChannel+0x120>)
 80006ea:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80006ec:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80006ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006f2:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80006f4:	d1b8      	bne.n	8000668 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_ADC_ConfigChannel+0x124>)
 80006f8:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <HAL_ADC_ConfigChannel+0x128>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8000700:	230a      	movs	r3, #10
 8000702:	4353      	muls	r3, r2
        counter--;
 8000704:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000706:	9b01      	ldr	r3, [sp, #4]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d0ad      	beq.n	8000668 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 800070c:	9b01      	ldr	r3, [sp, #4]
 800070e:	3b01      	subs	r3, #1
 8000710:	e7f8      	b.n	8000704 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8000712:	2002      	movs	r0, #2
 8000714:	e7ac      	b.n	8000670 <HAL_ADC_ConfigChannel+0x74>
 8000716:	bf00      	nop
 8000718:	40012000 	.word	0x40012000
 800071c:	40012300 	.word	0x40012300
 8000720:	20000004 	.word	0x20000004
 8000724:	000f4240 	.word	0x000f4240

08000728 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000728:	4770      	bx	lr
	...

0800072c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800072e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000730:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000734:	041b      	lsls	r3, r3, #16
 8000736:	0c1b      	lsrs	r3, r3, #16
 8000738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800073c:	0200      	lsls	r0, r0, #8
 800073e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000742:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000746:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000748:	60d3      	str	r3, [r2, #12]
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	68dc      	ldr	r4, [r3, #12]
 8000756:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800075a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	2b04      	cmp	r3, #4
 8000762:	bf28      	it	cs
 8000764:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000766:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	f04f 0501 	mov.w	r5, #1
 800076c:	fa05 f303 	lsl.w	r3, r5, r3
 8000770:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000774:	bf8c      	ite	hi
 8000776:	3c03      	subhi	r4, #3
 8000778:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077a:	4019      	ands	r1, r3
 800077c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077e:	fa05 f404 	lsl.w	r4, r5, r4
 8000782:	3c01      	subs	r4, #1
 8000784:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000786:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	ea42 0201 	orr.w	r2, r2, r1
 800078c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	bfaf      	iteee	ge
 8000792:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000796:	f000 000f 	andlt.w	r0, r0, #15
 800079a:	4b06      	ldrlt	r3, [pc, #24]	; (80007b4 <HAL_NVIC_SetPriority+0x64>)
 800079c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	bfa5      	ittet	ge
 80007a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80007a4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80007ac:	bd30      	pop	{r4, r5, pc}
 80007ae:	bf00      	nop
 80007b0:	e000ed00 	.word	0xe000ed00
 80007b4:	e000ed14 	.word	0xe000ed14

080007b8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007b8:	0942      	lsrs	r2, r0, #5
 80007ba:	2301      	movs	r3, #1
 80007bc:	f000 001f 	and.w	r0, r0, #31
 80007c0:	fa03 f000 	lsl.w	r0, r3, r0
 80007c4:	4b01      	ldr	r3, [pc, #4]	; (80007cc <HAL_NVIC_EnableIRQ+0x14>)
 80007c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100

080007d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d0:	3801      	subs	r0, #1
 80007d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007d6:	d20a      	bcs.n	80007ee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007da:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007dc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007de:	21f0      	movs	r1, #240	; 0xf0
 80007e0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000e010 	.word	0xe000e010
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007fe:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000800:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000802:	bf0c      	ite	eq
 8000804:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000808:	f022 0204 	bicne.w	r2, r2, #4
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	4770      	bx	lr
 8000810:	e000e010 	.word	0xe000e010

08000814 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000814:	4770      	bx	lr

08000816 <HAL_SYSTICK_IRQHandler>:
{
 8000816:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000818:	f7ff fffc 	bl	8000814 <HAL_SYSTICK_Callback>
 800081c:	bd08      	pop	{r3, pc}
	...

08000820 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000820:	6803      	ldr	r3, [r0, #0]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000828:	f023 0303 	bic.w	r3, r3, #3
 800082c:	2118      	movs	r1, #24
 800082e:	3a10      	subs	r2, #16
 8000830:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000834:	4904      	ldr	r1, [pc, #16]	; (8000848 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000836:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000838:	bf88      	it	hi
 800083a:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800083c:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800083e:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000840:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000842:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	080042d0 	.word	0x080042d0

0800084c <HAL_DMA_Init>:
{
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000850:	f7ff fcf0 	bl	8000234 <HAL_GetTick>
 8000854:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000856:	2c00      	cmp	r4, #0
 8000858:	d071      	beq.n	800093e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 800085a:	2300      	movs	r3, #0
 800085c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000860:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000862:	2302      	movs	r3, #2
 8000864:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000868:	6813      	ldr	r3, [r2, #0]
 800086a:	f023 0301 	bic.w	r3, r3, #1
 800086e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000870:	6821      	ldr	r1, [r4, #0]
 8000872:	680b      	ldr	r3, [r1, #0]
 8000874:	07d8      	lsls	r0, r3, #31
 8000876:	d43c      	bmi.n	80008f2 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000878:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800087a:	4d32      	ldr	r5, [pc, #200]	; (8000944 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800087c:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800087e:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000880:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000882:	68a3      	ldr	r3, [r4, #8]
 8000884:	4313      	orrs	r3, r2
 8000886:	68e2      	ldr	r2, [r4, #12]
 8000888:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800088a:	6922      	ldr	r2, [r4, #16]
 800088c:	4313      	orrs	r3, r2
 800088e:	6962      	ldr	r2, [r4, #20]
 8000890:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000892:	69e2      	ldr	r2, [r4, #28]
 8000894:	4303      	orrs	r3, r0
 8000896:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000898:	6a22      	ldr	r2, [r4, #32]
 800089a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800089c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800089e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008a0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008a4:	bf01      	itttt	eq
 80008a6:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80008a8:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80008aa:	4335      	orreq	r5, r6
 80008ac:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80008ae:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80008b0:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008b2:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008b4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80008b8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008bc:	d10b      	bne.n	80008d6 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80008be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008c0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80008c2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008c4:	b13d      	cbz	r5, 80008d6 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80008c6:	b9f8      	cbnz	r0, 8000908 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80008c8:	2a01      	cmp	r2, #1
 80008ca:	d02d      	beq.n	8000928 <HAL_DMA_Init+0xdc>
 80008cc:	d301      	bcc.n	80008d2 <HAL_DMA_Init+0x86>
 80008ce:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80008d0:	d101      	bne.n	80008d6 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80008d2:	01ea      	lsls	r2, r5, #7
 80008d4:	d42b      	bmi.n	800092e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80008d6:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80008d8:	4620      	mov	r0, r4
 80008da:	f7ff ffa1 	bl	8000820 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80008e0:	233f      	movs	r3, #63	; 0x3f
 80008e2:	4093      	lsls	r3, r2
 80008e4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008e6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80008e8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008ea:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80008ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008f2:	f7ff fc9f 	bl	8000234 <HAL_GetTick>
 80008f6:	1b40      	subs	r0, r0, r5
 80008f8:	2805      	cmp	r0, #5
 80008fa:	d9b9      	bls.n	8000870 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008fc:	2320      	movs	r3, #32
 80008fe:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000900:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000902:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000906:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000908:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800090c:	d113      	bne.n	8000936 <HAL_DMA_Init+0xea>
    switch (tmp)
 800090e:	2a03      	cmp	r2, #3
 8000910:	d8e1      	bhi.n	80008d6 <HAL_DMA_Init+0x8a>
 8000912:	a001      	add	r0, pc, #4	; (adr r0, 8000918 <HAL_DMA_Init+0xcc>)
 8000914:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000918:	0800092f 	.word	0x0800092f
 800091c:	080008d3 	.word	0x080008d3
 8000920:	0800092f 	.word	0x0800092f
 8000924:	08000929 	.word	0x08000929
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000928:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800092c:	d1d3      	bne.n	80008d6 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800092e:	2340      	movs	r3, #64	; 0x40
 8000930:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000932:	2001      	movs	r0, #1
 8000934:	e7e5      	b.n	8000902 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000936:	2a02      	cmp	r2, #2
 8000938:	d9f9      	bls.n	800092e <HAL_DMA_Init+0xe2>
 800093a:	2a03      	cmp	r2, #3
 800093c:	e7c8      	b.n	80008d0 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800093e:	2001      	movs	r0, #1
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	bf00      	nop
 8000944:	f010803f 	.word	0xf010803f

08000948 <HAL_DMA_Start_IT>:
{
 8000948:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800094a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800094e:	2c01      	cmp	r4, #1
 8000950:	d036      	beq.n	80009c0 <HAL_DMA_Start_IT+0x78>
 8000952:	2401      	movs	r4, #1
 8000954:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000958:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800095c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800095e:	2c01      	cmp	r4, #1
 8000960:	f04f 0500 	mov.w	r5, #0
 8000964:	f04f 0402 	mov.w	r4, #2
 8000968:	d128      	bne.n	80009bc <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 800096a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800096e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000970:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000972:	6825      	ldr	r5, [r4, #0]
 8000974:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000978:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800097a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800097c:	6883      	ldr	r3, [r0, #8]
 800097e:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000980:	bf0e      	itee	eq
 8000982:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000984:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000986:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000988:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800098a:	bf08      	it	eq
 800098c:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800098e:	233f      	movs	r3, #63	; 0x3f
 8000990:	4093      	lsls	r3, r2
 8000992:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000994:	6823      	ldr	r3, [r4, #0]
 8000996:	f043 0316 	orr.w	r3, r3, #22
 800099a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800099c:	6963      	ldr	r3, [r4, #20]
 800099e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a2:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80009a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80009a6:	b11b      	cbz	r3, 80009b0 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 80009a8:	6823      	ldr	r3, [r4, #0]
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80009b0:	6823      	ldr	r3, [r4, #0]
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009b8:	2000      	movs	r0, #0
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80009bc:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80009c0:	2002      	movs	r0, #2
}
 80009c2:	bd70      	pop	{r4, r5, r6, pc}

080009c4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009c4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d003      	beq.n	80009d4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80009d0:	2001      	movs	r0, #1
 80009d2:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80009d4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80009d6:	2305      	movs	r3, #5
 80009d8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80009dc:	6813      	ldr	r3, [r2, #0]
 80009de:	f023 0301 	bic.w	r3, r3, #1
 80009e2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80009e4:	2000      	movs	r0, #0
}
 80009e6:	4770      	bx	lr

080009e8 <HAL_DMA_IRQHandler>:
{
 80009e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80009ea:	2300      	movs	r3, #0
 80009ec:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009ee:	4b5a      	ldr	r3, [pc, #360]	; (8000b58 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009f0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80009f2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80009f4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80009f6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80009f8:	2208      	movs	r2, #8
 80009fa:	409a      	lsls	r2, r3
 80009fc:	4216      	tst	r6, r2
{
 80009fe:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a00:	d00c      	beq.n	8000a1c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a02:	6801      	ldr	r1, [r0, #0]
 8000a04:	6808      	ldr	r0, [r1, #0]
 8000a06:	0740      	lsls	r0, r0, #29
 8000a08:	d508      	bpl.n	8000a1c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a0a:	6808      	ldr	r0, [r1, #0]
 8000a0c:	f020 0004 	bic.w	r0, r0, #4
 8000a10:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a12:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a14:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a16:	f042 0201 	orr.w	r2, r2, #1
 8000a1a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a1c:	4a4f      	ldr	r2, [pc, #316]	; (8000b5c <HAL_DMA_IRQHandler+0x174>)
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	4216      	tst	r6, r2
 8000a22:	d008      	beq.n	8000a36 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a24:	6821      	ldr	r1, [r4, #0]
 8000a26:	6949      	ldr	r1, [r1, #20]
 8000a28:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a2a:	bf41      	itttt	mi
 8000a2c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a2e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000a30:	f042 0202 	orrmi.w	r2, r2, #2
 8000a34:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a36:	4a4a      	ldr	r2, [pc, #296]	; (8000b60 <HAL_DMA_IRQHandler+0x178>)
 8000a38:	409a      	lsls	r2, r3
 8000a3a:	4216      	tst	r6, r2
 8000a3c:	d008      	beq.n	8000a50 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a3e:	6821      	ldr	r1, [r4, #0]
 8000a40:	6809      	ldr	r1, [r1, #0]
 8000a42:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000a44:	bf41      	itttt	mi
 8000a46:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000a48:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000a4a:	f042 0204 	orrmi.w	r2, r2, #4
 8000a4e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000a50:	2210      	movs	r2, #16
 8000a52:	409a      	lsls	r2, r3
 8000a54:	4216      	tst	r6, r2
 8000a56:	d010      	beq.n	8000a7a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	0709      	lsls	r1, r1, #28
 8000a5e:	d50c      	bpl.n	8000a7a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000a60:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	0350      	lsls	r0, r2, #13
 8000a66:	d535      	bpl.n	8000ad4 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	0319      	lsls	r1, r3, #12
 8000a6c:	d401      	bmi.n	8000a72 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000a6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a70:	e000      	b.n	8000a74 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000a72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000a74:	b10b      	cbz	r3, 8000a7a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000a76:	4620      	mov	r0, r4
 8000a78:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000a7a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000a7c:	2220      	movs	r2, #32
 8000a7e:	408a      	lsls	r2, r1
 8000a80:	4216      	tst	r6, r2
 8000a82:	d038      	beq.n	8000af6 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000a84:	6823      	ldr	r3, [r4, #0]
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	06c6      	lsls	r6, r0, #27
 8000a8a:	d534      	bpl.n	8000af6 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000a8c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000a8e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000a92:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000a94:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000a96:	d125      	bne.n	8000ae4 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000a98:	f022 0216 	bic.w	r2, r2, #22
 8000a9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000a9e:	695a      	ldr	r2, [r3, #20]
 8000aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000aa4:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000aa6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000aa8:	b90a      	cbnz	r2, 8000aae <HAL_DMA_IRQHandler+0xc6>
 8000aaa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000aac:	b11a      	cbz	r2, 8000ab6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	f022 0208 	bic.w	r2, r2, #8
 8000ab4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ab6:	233f      	movs	r3, #63	; 0x3f
 8000ab8:	408b      	lsls	r3, r1
 8000aba:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000abc:	2300      	movs	r3, #0
 8000abe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000ac8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000aca:	b10b      	cbz	r3, 8000ad0 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000acc:	4620      	mov	r0, r4
 8000ace:	4798      	blx	r3
}
 8000ad0:	b003      	add	sp, #12
 8000ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ad8:	bf5e      	ittt	pl
 8000ada:	681a      	ldrpl	r2, [r3, #0]
 8000adc:	f022 0208 	bicpl.w	r2, r2, #8
 8000ae0:	601a      	strpl	r2, [r3, #0]
 8000ae2:	e7c4      	b.n	8000a6e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ae4:	0350      	lsls	r0, r2, #13
 8000ae6:	d528      	bpl.n	8000b3a <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	0319      	lsls	r1, r3, #12
 8000aec:	d432      	bmi.n	8000b54 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000aee:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000af0:	b10b      	cbz	r3, 8000af6 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000af2:	4620      	mov	r0, r4
 8000af4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000af6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0e9      	beq.n	8000ad0 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000afc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000afe:	07da      	lsls	r2, r3, #31
 8000b00:	d519      	bpl.n	8000b36 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b02:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000b04:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b06:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000b0a:	6813      	ldr	r3, [r2, #0]
 8000b0c:	f023 0301 	bic.w	r3, r3, #1
 8000b10:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b12:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000b16:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000b1a:	9b01      	ldr	r3, [sp, #4]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	429f      	cmp	r7, r3
 8000b20:	9301      	str	r3, [sp, #4]
 8000b22:	d302      	bcc.n	8000b2a <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000b24:	6813      	ldr	r3, [r2, #0]
 8000b26:	07db      	lsls	r3, r3, #31
 8000b28:	d4f7      	bmi.n	8000b1a <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000b30:	2301      	movs	r3, #1
 8000b32:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000b36:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000b38:	e7c7      	b.n	8000aca <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000b40:	d108      	bne.n	8000b54 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000b42:	6819      	ldr	r1, [r3, #0]
 8000b44:	f021 0110 	bic.w	r1, r1, #16
 8000b48:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000b4a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000b4c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000b50:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000b54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b56:	e7cb      	b.n	8000af0 <HAL_DMA_IRQHandler+0x108>
 8000b58:	20000004 	.word	0x20000004
 8000b5c:	00800001 	.word	0x00800001
 8000b60:	00800004 	.word	0x00800004

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b68:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000d1c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b70:	4a68      	ldr	r2, [pc, #416]	; (8000d14 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b72:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000d20 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b76:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b78:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000b7a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b7e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000b80:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b84:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000b88:	45b6      	cmp	lr, r6
 8000b8a:	f040 80ae 	bne.w	8000cea <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b8e:	684c      	ldr	r4, [r1, #4]
 8000b90:	f024 0710 	bic.w	r7, r4, #16
 8000b94:	2f02      	cmp	r7, #2
 8000b96:	d116      	bne.n	8000bc6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000b98:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000b9c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ba0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ba4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ba8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000bac:	f04f 0c0f 	mov.w	ip, #15
 8000bb0:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000bb4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bb8:	690d      	ldr	r5, [r1, #16]
 8000bba:	fa05 f50b 	lsl.w	r5, r5, fp
 8000bbe:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000bc2:	f8ca 5020 	str.w	r5, [sl, #32]
 8000bc6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bca:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000bcc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bd0:	fa05 f50a 	lsl.w	r5, r5, sl
 8000bd4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bd6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bda:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bde:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000be4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000bea:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bee:	d811      	bhi.n	8000c14 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000bf0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bf2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf6:	68cf      	ldr	r7, [r1, #12]
 8000bf8:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000bfc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000c00:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c02:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c04:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c08:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000c12:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c14:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c16:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c18:	688f      	ldr	r7, [r1, #8]
 8000c1a:	fa07 f70a 	lsl.w	r7, r7, sl
 8000c1e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000c20:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c22:	00e5      	lsls	r5, r4, #3
 8000c24:	d561      	bpl.n	8000cea <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	f04f 0b00 	mov.w	fp, #0
 8000c2a:	f8cd b00c 	str.w	fp, [sp, #12]
 8000c2e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c32:	4d39      	ldr	r5, [pc, #228]	; (8000d18 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c34:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000c38:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000c3c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000c40:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000c44:	9703      	str	r7, [sp, #12]
 8000c46:	9f03      	ldr	r7, [sp, #12]
 8000c48:	f023 0703 	bic.w	r7, r3, #3
 8000c4c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000c50:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c54:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c58:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c5c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000c60:	f04f 0e0f 	mov.w	lr, #15
 8000c64:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c68:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c6a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c6e:	d043      	beq.n	8000cf8 <HAL_GPIO_Init+0x194>
 8000c70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c74:	42a8      	cmp	r0, r5
 8000c76:	d041      	beq.n	8000cfc <HAL_GPIO_Init+0x198>
 8000c78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c7c:	42a8      	cmp	r0, r5
 8000c7e:	d03f      	beq.n	8000d00 <HAL_GPIO_Init+0x19c>
 8000c80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c84:	42a8      	cmp	r0, r5
 8000c86:	d03d      	beq.n	8000d04 <HAL_GPIO_Init+0x1a0>
 8000c88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c8c:	42a8      	cmp	r0, r5
 8000c8e:	d03b      	beq.n	8000d08 <HAL_GPIO_Init+0x1a4>
 8000c90:	4548      	cmp	r0, r9
 8000c92:	d03b      	beq.n	8000d0c <HAL_GPIO_Init+0x1a8>
 8000c94:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000c98:	42a8      	cmp	r0, r5
 8000c9a:	d039      	beq.n	8000d10 <HAL_GPIO_Init+0x1ac>
 8000c9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ca0:	42a8      	cmp	r0, r5
 8000ca2:	bf14      	ite	ne
 8000ca4:	2508      	movne	r5, #8
 8000ca6:	2507      	moveq	r5, #7
 8000ca8:	fa05 f50c 	lsl.w	r5, r5, ip
 8000cac:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cb0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000cb2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000cb4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cb6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000cba:	bf0c      	ite	eq
 8000cbc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cbe:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000cc0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000cc2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cc4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000cc8:	bf0c      	ite	eq
 8000cca:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ccc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000cce:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000cd6:	bf0c      	ite	eq
 8000cd8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cda:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000cdc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000cde:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000ce2:	bf54      	ite	pl
 8000ce4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000ce6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000ce8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cea:	3301      	adds	r3, #1
 8000cec:	2b10      	cmp	r3, #16
 8000cee:	f47f af44 	bne.w	8000b7a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000cf2:	b005      	add	sp, #20
 8000cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cf8:	465d      	mov	r5, fp
 8000cfa:	e7d5      	b.n	8000ca8 <HAL_GPIO_Init+0x144>
 8000cfc:	2501      	movs	r5, #1
 8000cfe:	e7d3      	b.n	8000ca8 <HAL_GPIO_Init+0x144>
 8000d00:	2502      	movs	r5, #2
 8000d02:	e7d1      	b.n	8000ca8 <HAL_GPIO_Init+0x144>
 8000d04:	2503      	movs	r5, #3
 8000d06:	e7cf      	b.n	8000ca8 <HAL_GPIO_Init+0x144>
 8000d08:	2504      	movs	r5, #4
 8000d0a:	e7cd      	b.n	8000ca8 <HAL_GPIO_Init+0x144>
 8000d0c:	2505      	movs	r5, #5
 8000d0e:	e7cb      	b.n	8000ca8 <HAL_GPIO_Init+0x144>
 8000d10:	2506      	movs	r5, #6
 8000d12:	e7c9      	b.n	8000ca8 <HAL_GPIO_Init+0x144>
 8000d14:	40013c00 	.word	0x40013c00
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40021400 	.word	0x40021400

08000d24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d24:	b10a      	cbz	r2, 8000d2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d26:	6181      	str	r1, [r0, #24]
 8000d28:	4770      	bx	lr
 8000d2a:	0409      	lsls	r1, r1, #16
 8000d2c:	e7fb      	b.n	8000d26 <HAL_GPIO_WritePin+0x2>
	...

08000d30 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d30:	6803      	ldr	r3, [r0, #0]
{
 8000d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d34:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d36:	07d8      	lsls	r0, r3, #31
 8000d38:	d43b      	bmi.n	8000db2 <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	0799      	lsls	r1, r3, #30
 8000d3e:	f100 8086 	bmi.w	8000e4e <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	071e      	lsls	r6, r3, #28
 8000d46:	f100 80d1 	bmi.w	8000eec <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	075d      	lsls	r5, r3, #29
 8000d4e:	d52a      	bpl.n	8000da6 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	4b8e      	ldr	r3, [pc, #568]	; (8000f90 <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000d56:	4d8f      	ldr	r5, [pc, #572]	; (8000f94 <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d5e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000d6a:	682b      	ldr	r3, [r5, #0]
 8000d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d70:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000d72:	f7ff fa5f 	bl	8000234 <HAL_GetTick>
 8000d76:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000d78:	682b      	ldr	r3, [r5, #0]
 8000d7a:	05da      	lsls	r2, r3, #23
 8000d7c:	f140 80d8 	bpl.w	8000f30 <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d80:	68a3      	ldr	r3, [r4, #8]
 8000d82:	4d83      	ldr	r5, [pc, #524]	; (8000f90 <HAL_RCC_OscConfig+0x260>)
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	f040 80da 	bne.w	8000f3e <HAL_RCC_OscConfig+0x20e>
 8000d8a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d92:	f7ff fa4f 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d96:	4d7e      	ldr	r5, [pc, #504]	; (8000f90 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8000d98:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d9a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d9e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000da0:	079b      	lsls	r3, r3, #30
 8000da2:	f140 80ed 	bpl.w	8000f80 <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000da6:	69a2      	ldr	r2, [r4, #24]
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 80f9 	bne.w	8000fa0 <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000dae:	2000      	movs	r0, #0
 8000db0:	e015      	b.n	8000dde <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000db2:	4b77      	ldr	r3, [pc, #476]	; (8000f90 <HAL_RCC_OscConfig+0x260>)
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	f002 020c 	and.w	r2, r2, #12
 8000dba:	2a04      	cmp	r2, #4
 8000dbc:	d007      	beq.n	8000dce <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dc4:	2a08      	cmp	r2, #8
 8000dc6:	d10c      	bne.n	8000de2 <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	025a      	lsls	r2, r3, #9
 8000dcc:	d509      	bpl.n	8000de2 <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dce:	4b70      	ldr	r3, [pc, #448]	; (8000f90 <HAL_RCC_OscConfig+0x260>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	039b      	lsls	r3, r3, #14
 8000dd4:	d5b1      	bpl.n	8000d3a <HAL_RCC_OscConfig+0xa>
 8000dd6:	6863      	ldr	r3, [r4, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1ae      	bne.n	8000d3a <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8000ddc:	2001      	movs	r0, #1
}
 8000dde:	b003      	add	sp, #12
 8000de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de2:	6863      	ldr	r3, [r4, #4]
 8000de4:	4d6a      	ldr	r5, [pc, #424]	; (8000f90 <HAL_RCC_OscConfig+0x260>)
 8000de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dea:	d111      	bne.n	8000e10 <HAL_RCC_OscConfig+0xe0>
 8000dec:	682b      	ldr	r3, [r5, #0]
 8000dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000df4:	f7ff fa1e 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df8:	4d65      	ldr	r5, [pc, #404]	; (8000f90 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8000dfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfc:	682b      	ldr	r3, [r5, #0]
 8000dfe:	039f      	lsls	r7, r3, #14
 8000e00:	d49b      	bmi.n	8000d3a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e02:	f7ff fa17 	bl	8000234 <HAL_GetTick>
 8000e06:	1b80      	subs	r0, r0, r6
 8000e08:	2864      	cmp	r0, #100	; 0x64
 8000e0a:	d9f7      	bls.n	8000dfc <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	e7e6      	b.n	8000dde <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e14:	d104      	bne.n	8000e20 <HAL_RCC_OscConfig+0xf0>
 8000e16:	682b      	ldr	r3, [r5, #0]
 8000e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e1c:	602b      	str	r3, [r5, #0]
 8000e1e:	e7e5      	b.n	8000dec <HAL_RCC_OscConfig+0xbc>
 8000e20:	682a      	ldr	r2, [r5, #0]
 8000e22:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e26:	602a      	str	r2, [r5, #0]
 8000e28:	682a      	ldr	r2, [r5, #0]
 8000e2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e2e:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1df      	bne.n	8000df4 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8000e34:	f7ff f9fe 	bl	8000234 <HAL_GetTick>
 8000e38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3a:	682b      	ldr	r3, [r5, #0]
 8000e3c:	0398      	lsls	r0, r3, #14
 8000e3e:	f57f af7c 	bpl.w	8000d3a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e42:	f7ff f9f7 	bl	8000234 <HAL_GetTick>
 8000e46:	1b80      	subs	r0, r0, r6
 8000e48:	2864      	cmp	r0, #100	; 0x64
 8000e4a:	d9f6      	bls.n	8000e3a <HAL_RCC_OscConfig+0x10a>
 8000e4c:	e7de      	b.n	8000e0c <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e4e:	4b50      	ldr	r3, [pc, #320]	; (8000f90 <HAL_RCC_OscConfig+0x260>)
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	f012 0f0c 	tst.w	r2, #12
 8000e56:	d007      	beq.n	8000e68 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e5e:	2a08      	cmp	r2, #8
 8000e60:	d116      	bne.n	8000e90 <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	0259      	lsls	r1, r3, #9
 8000e66:	d413      	bmi.n	8000e90 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e68:	4b49      	ldr	r3, [pc, #292]	; (8000f90 <HAL_RCC_OscConfig+0x260>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	0792      	lsls	r2, r2, #30
 8000e6e:	d502      	bpl.n	8000e76 <HAL_RCC_OscConfig+0x146>
 8000e70:	68e2      	ldr	r2, [r4, #12]
 8000e72:	2a01      	cmp	r2, #1
 8000e74:	d1b2      	bne.n	8000ddc <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e76:	6818      	ldr	r0, [r3, #0]
 8000e78:	22f8      	movs	r2, #248	; 0xf8
 8000e7a:	fa92 f2a2 	rbit	r2, r2
 8000e7e:	fab2 f182 	clz	r1, r2
 8000e82:	6922      	ldr	r2, [r4, #16]
 8000e84:	408a      	lsls	r2, r1
 8000e86:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8e:	e758      	b.n	8000d42 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e90:	68e2      	ldr	r2, [r4, #12]
 8000e92:	4b41      	ldr	r3, [pc, #260]	; (8000f98 <HAL_RCC_OscConfig+0x268>)
 8000e94:	b1da      	cbz	r2, 8000ece <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e9a:	f7ff f9cb 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9e:	4d3c      	ldr	r5, [pc, #240]	; (8000f90 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8000ea0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea2:	682b      	ldr	r3, [r5, #0]
 8000ea4:	079b      	lsls	r3, r3, #30
 8000ea6:	d50c      	bpl.n	8000ec2 <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea8:	6829      	ldr	r1, [r5, #0]
 8000eaa:	23f8      	movs	r3, #248	; 0xf8
 8000eac:	fa93 f3a3 	rbit	r3, r3
 8000eb0:	fab3 f283 	clz	r2, r3
 8000eb4:	6923      	ldr	r3, [r4, #16]
 8000eb6:	4093      	lsls	r3, r2
 8000eb8:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	602b      	str	r3, [r5, #0]
 8000ec0:	e73f      	b.n	8000d42 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ec2:	f7ff f9b7 	bl	8000234 <HAL_GetTick>
 8000ec6:	1b80      	subs	r0, r0, r6
 8000ec8:	2802      	cmp	r0, #2
 8000eca:	d9ea      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x172>
 8000ecc:	e79e      	b.n	8000e0c <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8000ece:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ed0:	f7ff f9b0 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed4:	4d2e      	ldr	r5, [pc, #184]	; (8000f90 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8000ed6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed8:	682b      	ldr	r3, [r5, #0]
 8000eda:	079f      	lsls	r7, r3, #30
 8000edc:	f57f af31 	bpl.w	8000d42 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ee0:	f7ff f9a8 	bl	8000234 <HAL_GetTick>
 8000ee4:	1b80      	subs	r0, r0, r6
 8000ee6:	2802      	cmp	r0, #2
 8000ee8:	d9f6      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x1a8>
 8000eea:	e78f      	b.n	8000e0c <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000eec:	6962      	ldr	r2, [r4, #20]
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	b17a      	cbz	r2, 8000f12 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ef6:	f7ff f99d 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efa:	4d25      	ldr	r5, [pc, #148]	; (8000f90 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8000efc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f00:	0798      	lsls	r0, r3, #30
 8000f02:	f53f af22 	bmi.w	8000d4a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f06:	f7ff f995 	bl	8000234 <HAL_GetTick>
 8000f0a:	1b80      	subs	r0, r0, r6
 8000f0c:	2802      	cmp	r0, #2
 8000f0e:	d9f6      	bls.n	8000efe <HAL_RCC_OscConfig+0x1ce>
 8000f10:	e77c      	b.n	8000e0c <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 8000f12:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f14:	f7ff f98e 	bl	8000234 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f18:	4d1d      	ldr	r5, [pc, #116]	; (8000f90 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8000f1a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f1c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f1e:	0799      	lsls	r1, r3, #30
 8000f20:	f57f af13 	bpl.w	8000d4a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f24:	f7ff f986 	bl	8000234 <HAL_GetTick>
 8000f28:	1b80      	subs	r0, r0, r6
 8000f2a:	2802      	cmp	r0, #2
 8000f2c:	d9f6      	bls.n	8000f1c <HAL_RCC_OscConfig+0x1ec>
 8000f2e:	e76d      	b.n	8000e0c <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000f30:	f7ff f980 	bl	8000234 <HAL_GetTick>
 8000f34:	1b80      	subs	r0, r0, r6
 8000f36:	2802      	cmp	r0, #2
 8000f38:	f67f af1e 	bls.w	8000d78 <HAL_RCC_OscConfig+0x48>
 8000f3c:	e766      	b.n	8000e0c <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f3e:	2b05      	cmp	r3, #5
 8000f40:	d104      	bne.n	8000f4c <HAL_RCC_OscConfig+0x21c>
 8000f42:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f44:	f043 0304 	orr.w	r3, r3, #4
 8000f48:	672b      	str	r3, [r5, #112]	; 0x70
 8000f4a:	e71e      	b.n	8000d8a <HAL_RCC_OscConfig+0x5a>
 8000f4c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f4e:	f022 0201 	bic.w	r2, r2, #1
 8000f52:	672a      	str	r2, [r5, #112]	; 0x70
 8000f54:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f56:	f022 0204 	bic.w	r2, r2, #4
 8000f5a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f47f af18 	bne.w	8000d92 <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8000f62:	f7ff f967 	bl	8000234 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f66:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f6a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f6e:	0798      	lsls	r0, r3, #30
 8000f70:	f57f af19 	bpl.w	8000da6 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f74:	f7ff f95e 	bl	8000234 <HAL_GetTick>
 8000f78:	1b80      	subs	r0, r0, r6
 8000f7a:	42b8      	cmp	r0, r7
 8000f7c:	d9f6      	bls.n	8000f6c <HAL_RCC_OscConfig+0x23c>
 8000f7e:	e745      	b.n	8000e0c <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f80:	f7ff f958 	bl	8000234 <HAL_GetTick>
 8000f84:	1b80      	subs	r0, r0, r6
 8000f86:	42b8      	cmp	r0, r7
 8000f88:	f67f af09 	bls.w	8000d9e <HAL_RCC_OscConfig+0x6e>
 8000f8c:	e73e      	b.n	8000e0c <HAL_RCC_OscConfig+0xdc>
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000
 8000f98:	42470000 	.word	0x42470000
 8000f9c:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fa0:	4d2b      	ldr	r5, [pc, #172]	; (8001050 <HAL_RCC_OscConfig+0x320>)
 8000fa2:	68ab      	ldr	r3, [r5, #8]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	f43f af17 	beq.w	8000ddc <HAL_RCC_OscConfig+0xac>
 8000fae:	4e29      	ldr	r6, [pc, #164]	; (8001054 <HAL_RCC_OscConfig+0x324>)
 8000fb0:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000fb4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb6:	d13e      	bne.n	8001036 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8000fb8:	f7ff f93c 	bl	8000234 <HAL_GetTick>
 8000fbc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fbe:	682b      	ldr	r3, [r5, #0]
 8000fc0:	0199      	lsls	r1, r3, #6
 8000fc2:	d432      	bmi.n	800102a <HAL_RCC_OscConfig+0x2fa>
 8000fc4:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8000fc8:	fa97 f7a7 	rbit	r7, r7
 8000fcc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fd0:	fab7 f787 	clz	r7, r7
 8000fd4:	fa92 f2a2 	rbit	r2, r2
 8000fd8:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000fdc:	fab2 f082 	clz	r0, r2
 8000fe0:	fa91 f1a1 	rbit	r1, r1
 8000fe4:	6a22      	ldr	r2, [r4, #32]
 8000fe6:	69e3      	ldr	r3, [r4, #28]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fec:	fa02 f707 	lsl.w	r7, r2, r7
 8000ff0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ff2:	0852      	lsrs	r2, r2, #1
 8000ff4:	3a01      	subs	r2, #1
 8000ff6:	4082      	lsls	r2, r0
 8000ff8:	433b      	orrs	r3, r7
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ffe:	4c14      	ldr	r4, [pc, #80]	; (8001050 <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001000:	fab1 f181 	clz	r1, r1
 8001004:	fa02 f101 	lsl.w	r1, r2, r1
 8001008:	430b      	orrs	r3, r1
 800100a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800100c:	2301      	movs	r3, #1
 800100e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001010:	f7ff f910 	bl	8000234 <HAL_GetTick>
 8001014:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	019a      	lsls	r2, r3, #6
 800101a:	f53f aec8 	bmi.w	8000dae <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800101e:	f7ff f909 	bl	8000234 <HAL_GetTick>
 8001022:	1b40      	subs	r0, r0, r5
 8001024:	2802      	cmp	r0, #2
 8001026:	d9f6      	bls.n	8001016 <HAL_RCC_OscConfig+0x2e6>
 8001028:	e6f0      	b.n	8000e0c <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800102a:	f7ff f903 	bl	8000234 <HAL_GetTick>
 800102e:	1bc0      	subs	r0, r0, r7
 8001030:	2802      	cmp	r0, #2
 8001032:	d9c4      	bls.n	8000fbe <HAL_RCC_OscConfig+0x28e>
 8001034:	e6ea      	b.n	8000e0c <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8001036:	f7ff f8fd 	bl	8000234 <HAL_GetTick>
 800103a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800103c:	682b      	ldr	r3, [r5, #0]
 800103e:	019b      	lsls	r3, r3, #6
 8001040:	f57f aeb5 	bpl.w	8000dae <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001044:	f7ff f8f6 	bl	8000234 <HAL_GetTick>
 8001048:	1b00      	subs	r0, r0, r4
 800104a:	2802      	cmp	r0, #2
 800104c:	d9f6      	bls.n	800103c <HAL_RCC_OscConfig+0x30c>
 800104e:	e6dd      	b.n	8000e0c <HAL_RCC_OscConfig+0xdc>
 8001050:	40023800 	.word	0x40023800
 8001054:	42470060 	.word	0x42470060

08001058 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001058:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x68>)
 800105a:	6893      	ldr	r3, [r2, #8]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b04      	cmp	r3, #4
{
 8001062:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001064:	d003      	beq.n	800106e <HAL_RCC_GetSysClockFreq+0x16>
 8001066:	2b08      	cmp	r3, #8
 8001068:	d003      	beq.n	8001072 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800106a:	4816      	ldr	r0, [pc, #88]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800106c:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 800106e:	4816      	ldr	r0, [pc, #88]	; (80010c8 <HAL_RCC_GetSysClockFreq+0x70>)
 8001070:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001072:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001074:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001076:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800107a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800107e:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001082:	6853      	ldr	r3, [r2, #4]
 8001084:	fa94 f0a4 	rbit	r0, r4
 8001088:	fab0 f080 	clz	r0, r0
 800108c:	ea03 0304 	and.w	r3, r3, r4
 8001090:	fa23 f300 	lsr.w	r3, r3, r0
 8001094:	bf14      	ite	ne
 8001096:	480c      	ldrne	r0, [pc, #48]	; (80010c8 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001098:	480a      	ldreq	r0, [pc, #40]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x6c>)
 800109a:	fbb0 f0f1 	udiv	r0, r0, r1
 800109e:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x68>)
 80010a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	fa92 f2a2 	rbit	r2, r2
 80010ac:	fab2 f282 	clz	r2, r2
 80010b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b4:	40d3      	lsrs	r3, r2
 80010b6:	3301      	adds	r3, #1
 80010b8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80010ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80010be:	bd10      	pop	{r4, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	00f42400 	.word	0x00f42400
 80010c8:	007a1200 	.word	0x007a1200

080010cc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010cc:	4b56      	ldr	r3, [pc, #344]	; (8001228 <HAL_RCC_ClockConfig+0x15c>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	f002 020f 	and.w	r2, r2, #15
 80010d4:	428a      	cmp	r2, r1
{
 80010d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010da:	4605      	mov	r5, r0
 80010dc:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010de:	d330      	bcc.n	8001142 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e0:	682a      	ldr	r2, [r5, #0]
 80010e2:	0794      	lsls	r4, r2, #30
 80010e4:	d437      	bmi.n	8001156 <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010e6:	07d0      	lsls	r0, r2, #31
 80010e8:	d43d      	bmi.n	8001166 <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80010ea:	4b4f      	ldr	r3, [pc, #316]	; (8001228 <HAL_RCC_ClockConfig+0x15c>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	f002 020f 	and.w	r2, r2, #15
 80010f2:	4296      	cmp	r6, r2
 80010f4:	f0c0 8088 	bcc.w	8001208 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f8:	682a      	ldr	r2, [r5, #0]
 80010fa:	0751      	lsls	r1, r2, #29
 80010fc:	f100 808c 	bmi.w	8001218 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001100:	0713      	lsls	r3, r2, #28
 8001102:	d507      	bpl.n	8001114 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001104:	4a49      	ldr	r2, [pc, #292]	; (800122c <HAL_RCC_ClockConfig+0x160>)
 8001106:	6929      	ldr	r1, [r5, #16]
 8001108:	6893      	ldr	r3, [r2, #8]
 800110a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800110e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001112:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001114:	f7ff ffa0 	bl	8001058 <HAL_RCC_GetSysClockFreq>
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <HAL_RCC_ClockConfig+0x160>)
 800111a:	22f0      	movs	r2, #240	; 0xf0
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	fa92 f2a2 	rbit	r2, r2
 8001122:	fab2 f282 	clz	r2, r2
 8001126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800112a:	40d3      	lsrs	r3, r2
 800112c:	4a40      	ldr	r2, [pc, #256]	; (8001230 <HAL_RCC_ClockConfig+0x164>)
 800112e:	5cd3      	ldrb	r3, [r2, r3]
 8001130:	40d8      	lsrs	r0, r3
 8001132:	4b40      	ldr	r3, [pc, #256]	; (8001234 <HAL_RCC_ClockConfig+0x168>)
 8001134:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff f846 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 800113c:	2000      	movs	r0, #0
}
 800113e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001142:	b2ca      	uxtb	r2, r1
 8001144:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	4299      	cmp	r1, r3
 800114e:	d0c7      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001150:	2001      	movs	r0, #1
 8001152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001156:	4935      	ldr	r1, [pc, #212]	; (800122c <HAL_RCC_ClockConfig+0x160>)
 8001158:	68a8      	ldr	r0, [r5, #8]
 800115a:	688b      	ldr	r3, [r1, #8]
 800115c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001160:	4303      	orrs	r3, r0
 8001162:	608b      	str	r3, [r1, #8]
 8001164:	e7bf      	b.n	80010e6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001166:	686a      	ldr	r2, [r5, #4]
 8001168:	4b30      	ldr	r3, [pc, #192]	; (800122c <HAL_RCC_ClockConfig+0x160>)
 800116a:	2a01      	cmp	r2, #1
 800116c:	d11e      	bne.n	80011ac <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	d0ec      	beq.n	8001150 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001176:	4c2d      	ldr	r4, [pc, #180]	; (800122c <HAL_RCC_ClockConfig+0x160>)
 8001178:	68a3      	ldr	r3, [r4, #8]
 800117a:	f023 0303 	bic.w	r3, r3, #3
 800117e:	4313      	orrs	r3, r2
 8001180:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001182:	f7ff f857 	bl	8000234 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001186:	686b      	ldr	r3, [r5, #4]
 8001188:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 800118a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800118c:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001190:	d116      	bne.n	80011c0 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001192:	68a3      	ldr	r3, [r4, #8]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	2b04      	cmp	r3, #4
 800119a:	d0a6      	beq.n	80010ea <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800119c:	f7ff f84a 	bl	8000234 <HAL_GetTick>
 80011a0:	1bc0      	subs	r0, r0, r7
 80011a2:	4540      	cmp	r0, r8
 80011a4:	d9f5      	bls.n	8001192 <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 80011a6:	2003      	movs	r0, #3
 80011a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80011ac:	1e91      	subs	r1, r2, #2
 80011ae:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80011b2:	d802      	bhi.n	80011ba <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011b8:	e7dc      	b.n	8001174 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ba:	f013 0f02 	tst.w	r3, #2
 80011be:	e7d9      	b.n	8001174 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d10a      	bne.n	80011da <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011c4:	68a3      	ldr	r3, [r4, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d08d      	beq.n	80010ea <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ce:	f7ff f831 	bl	8000234 <HAL_GetTick>
 80011d2:	1bc0      	subs	r0, r0, r7
 80011d4:	4540      	cmp	r0, r8
 80011d6:	d9f5      	bls.n	80011c4 <HAL_RCC_ClockConfig+0xf8>
 80011d8:	e7e5      	b.n	80011a6 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d10f      	bne.n	80011fe <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80011de:	68a3      	ldr	r3, [r4, #8]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b0c      	cmp	r3, #12
 80011e6:	d080      	beq.n	80010ea <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e8:	f7ff f824 	bl	8000234 <HAL_GetTick>
 80011ec:	1bc0      	subs	r0, r0, r7
 80011ee:	4540      	cmp	r0, r8
 80011f0:	d9f5      	bls.n	80011de <HAL_RCC_ClockConfig+0x112>
 80011f2:	e7d8      	b.n	80011a6 <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f4:	f7ff f81e 	bl	8000234 <HAL_GetTick>
 80011f8:	1bc0      	subs	r0, r0, r7
 80011fa:	4540      	cmp	r0, r8
 80011fc:	d8d3      	bhi.n	80011a6 <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011fe:	68a3      	ldr	r3, [r4, #8]
 8001200:	f013 0f0c 	tst.w	r3, #12
 8001204:	d1f6      	bne.n	80011f4 <HAL_RCC_ClockConfig+0x128>
 8001206:	e770      	b.n	80010ea <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001208:	b2f2      	uxtb	r2, r6
 800120a:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	429e      	cmp	r6, r3
 8001214:	d19c      	bne.n	8001150 <HAL_RCC_ClockConfig+0x84>
 8001216:	e76f      	b.n	80010f8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001218:	4904      	ldr	r1, [pc, #16]	; (800122c <HAL_RCC_ClockConfig+0x160>)
 800121a:	68e8      	ldr	r0, [r5, #12]
 800121c:	688b      	ldr	r3, [r1, #8]
 800121e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001222:	4303      	orrs	r3, r0
 8001224:	608b      	str	r3, [r1, #8]
 8001226:	e76b      	b.n	8001100 <HAL_RCC_ClockConfig+0x34>
 8001228:	40023c00 	.word	0x40023c00
 800122c:	40023800 	.word	0x40023800
 8001230:	0800439f 	.word	0x0800439f
 8001234:	20000004 	.word	0x20000004

08001238 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001238:	4b01      	ldr	r3, [pc, #4]	; (8001240 <HAL_RCC_GetHCLKFreq+0x8>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000004 	.word	0x20000004

08001244 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8001244:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001250:	4770      	bx	lr
	...

08001254 <HAL_SD_ReadBlocks_DMA>:
{
 8001254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001258:	4616      	mov	r6, r2
 800125a:	b087      	sub	sp, #28
 800125c:	4605      	mov	r5, r0
 800125e:	4698      	mov	r8, r3
  if(NULL == pData)
 8001260:	460a      	mov	r2, r1
 8001262:	b939      	cbnz	r1, 8001274 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001264:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001266:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800126a:	63ab      	str	r3, [r5, #56]	; 0x38
    return HAL_ERROR;
 800126c:	2001      	movs	r0, #1
}
 800126e:	b007      	add	sp, #28
 8001270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8001274:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001278:	b2c4      	uxtb	r4, r0
 800127a:	2c01      	cmp	r4, #1
 800127c:	d168      	bne.n	8001350 <HAL_SD_ReadBlocks_DMA+0xfc>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800127e:	6def      	ldr	r7, [r5, #92]	; 0x5c
 8001280:	eb06 0008 	add.w	r0, r6, r8
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001284:	2300      	movs	r3, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001286:	42b8      	cmp	r0, r7
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001288:	63ab      	str	r3, [r5, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800128a:	d903      	bls.n	8001294 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800128c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800128e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001292:	e7ea      	b.n	800126a <HAL_SD_ReadBlocks_DMA+0x16>
    hsd->Instance->DCTRL = 0U;
 8001294:	682f      	ldr	r7, [r5, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8001296:	2103      	movs	r1, #3
 8001298:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800129e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80012a0:	492c      	ldr	r1, [pc, #176]	; (8001354 <HAL_SD_ReadBlocks_DMA+0x100>)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80012a2:	f440 7095 	orr.w	r0, r0, #298	; 0x12a
 80012a6:	63f8      	str	r0, [r7, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80012a8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80012aa:	ea4f 2948 	mov.w	r9, r8, lsl #9
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80012ae:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80012b0:	4929      	ldr	r1, [pc, #164]	; (8001358 <HAL_SD_ReadBlocks_DMA+0x104>)
 80012b2:	64c1      	str	r1, [r0, #76]	; 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 80012b4:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80012b6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80012ba:	ea4f 0399 	mov.w	r3, r9, lsr #2
 80012be:	f7ff fb43 	bl	8000948 <HAL_DMA_Start_IT>
    __HAL_SD_DMA_ENABLE(hsd);
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <HAL_SD_ReadBlocks_DMA+0x108>)
    SDIO_ConfigData(hsd->Instance, &config);
 80012c4:	6828      	ldr	r0, [r5, #0]
    __HAL_SD_DMA_ENABLE(hsd);
 80012c6:	601c      	str	r4, [r3, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80012c8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80012ca:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80012d0:	e88d 0208 	stmia.w	sp, {r3, r9}
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80012d4:	f04f 0390 	mov.w	r3, #144	; 0x90
 80012d8:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80012da:	f04f 0302 	mov.w	r3, #2
 80012de:	9303      	str	r3, [sp, #12]
    SDIO_ConfigData(hsd->Instance, &config);
 80012e0:	4669      	mov	r1, sp
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80012e2:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDIO_DPSM_ENABLE;
 80012e6:	f04f 0401 	mov.w	r4, #1
      BlockAdd *= 512U;
 80012ea:	bf18      	it	ne
 80012ec:	0276      	lslne	r6, r6, #9
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80012ee:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80012f0:	9405      	str	r4, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 80012f2:	f000 fd55 	bl	8001da0 <SDIO_ConfigData>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80012f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012fa:	6828      	ldr	r0, [r5, #0]
 80012fc:	f000 fd63 	bl	8001dc6 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001300:	b148      	cbz	r0, 8001316 <HAL_SD_ReadBlocks_DMA+0xc2>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8001302:	682b      	ldr	r3, [r5, #0]
 8001304:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001308:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800130a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800130c:	4318      	orrs	r0, r3
 800130e:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001310:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 8001314:	e7aa      	b.n	800126c <HAL_SD_ReadBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 8001316:	f1b8 0f01 	cmp.w	r8, #1
 800131a:	d912      	bls.n	8001342 <HAL_SD_ReadBlocks_DMA+0xee>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800131c:	2382      	movs	r3, #130	; 0x82
 800131e:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8001320:	4631      	mov	r1, r6
 8001322:	6828      	ldr	r0, [r5, #0]
 8001324:	f000 fd7f 	bl	8001e26 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001328:	2800      	cmp	r0, #0
 800132a:	d0a0      	beq.n	800126e <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800132c:	682b      	ldr	r3, [r5, #0]
 800132e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001334:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001336:	4318      	orrs	r0, r3
 8001338:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800133a:	2001      	movs	r0, #1
 800133c:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
      return HAL_ERROR;
 8001340:	e795      	b.n	800126e <HAL_SD_ReadBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001342:	2381      	movs	r3, #129	; 0x81
 8001344:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8001346:	4631      	mov	r1, r6
 8001348:	6828      	ldr	r0, [r5, #0]
 800134a:	f000 fd54 	bl	8001df6 <SDMMC_CmdReadSingleBlock>
 800134e:	e7eb      	b.n	8001328 <HAL_SD_ReadBlocks_DMA+0xd4>
    return HAL_BUSY;
 8001350:	2002      	movs	r0, #2
 8001352:	e78c      	b.n	800126e <HAL_SD_ReadBlocks_DMA+0x1a>
 8001354:	0800146d 	.word	0x0800146d
 8001358:	080018c5 	.word	0x080018c5
 800135c:	4225858c 	.word	0x4225858c

08001360 <HAL_SD_WriteBlocks_DMA>:
{
 8001360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001364:	4604      	mov	r4, r0
 8001366:	b086      	sub	sp, #24
 8001368:	4615      	mov	r5, r2
 800136a:	461e      	mov	r6, r3
  if(NULL == pData)
 800136c:	460f      	mov	r7, r1
 800136e:	b939      	cbnz	r1, 8001380 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001370:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001372:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001376:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8001378:	2001      	movs	r0, #1
}
 800137a:	b006      	add	sp, #24
 800137c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8001380:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001384:	b2c0      	uxtb	r0, r0
 8001386:	2801      	cmp	r0, #1
 8001388:	d162      	bne.n	8001450 <HAL_SD_WriteBlocks_DMA+0xf0>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800138a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800138c:	18eb      	adds	r3, r5, r3
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800138e:	2200      	movs	r2, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001390:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001392:	63a2      	str	r2, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001394:	d904      	bls.n	80013a0 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001396:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001398:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800139c:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800139e:	e7ec      	b.n	800137a <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->Instance->DCTRL = 0U;
 80013a0:	6820      	ldr	r0, [r4, #0]
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80013a2:	492c      	ldr	r1, [pc, #176]	; (8001454 <HAL_SD_WriteBlocks_DMA+0xf4>)
    hsd->State = HAL_SD_STATE_BUSY;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80013aa:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
 80013ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80013ae:	f043 031a 	orr.w	r3, r3, #26
 80013b2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80013b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013b6:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80013b8:	4927      	ldr	r1, [pc, #156]	; (8001458 <HAL_SD_WriteBlocks_DMA+0xf8>)
 80013ba:	64d9      	str	r1, [r3, #76]	; 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 80013bc:	651a      	str	r2, [r3, #80]	; 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80013be:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80013c0:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80013c4:	2b01      	cmp	r3, #1
      BlockAdd *= 512U;
 80013c6:	bf18      	it	ne
 80013c8:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80013ca:	f000 fcfc 	bl	8001dc6 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80013ce:	b150      	cbz	r0, 80013e6 <HAL_SD_WriteBlocks_DMA+0x86>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80013d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80013d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013da:	4318      	orrs	r0, r3
 80013dc:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80013de:	2001      	movs	r0, #1
 80013e0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80013e4:	e7c9      	b.n	800137a <HAL_SD_WriteBlocks_DMA+0x1a>
    if(NumberOfBlocks > 1U)
 80013e6:	2e01      	cmp	r6, #1
 80013e8:	d90f      	bls.n	800140a <HAL_SD_WriteBlocks_DMA+0xaa>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80013ea:	23a0      	movs	r3, #160	; 0xa0
 80013ec:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80013ee:	4629      	mov	r1, r5
 80013f0:	6820      	ldr	r0, [r4, #0]
 80013f2:	f000 fd48 	bl	8001e86 <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80013f6:	4605      	mov	r5, r0
 80013f8:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 80013fa:	b168      	cbz	r0, 8001418 <HAL_SD_WriteBlocks_DMA+0xb8>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80013fc:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8001400:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001402:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001404:	4305      	orrs	r5, r0
 8001406:	63a5      	str	r5, [r4, #56]	; 0x38
 8001408:	e7e9      	b.n	80013de <HAL_SD_WriteBlocks_DMA+0x7e>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800140a:	2390      	movs	r3, #144	; 0x90
 800140c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800140e:	4629      	mov	r1, r5
 8001410:	6820      	ldr	r0, [r4, #0]
 8001412:	f000 fd20 	bl	8001e56 <SDMMC_CmdWriteSingleBlock>
 8001416:	e7ee      	b.n	80013f6 <HAL_SD_WriteBlocks_DMA+0x96>
    __HAL_SD_DMA_ENABLE(hsd);
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_SD_WriteBlocks_DMA+0xfc>)
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800141a:	6c20      	ldr	r0, [r4, #64]	; 0x40
    __HAL_SD_DMA_ENABLE(hsd);
 800141c:	f04f 0801 	mov.w	r8, #1
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8001420:	0276      	lsls	r6, r6, #9
    __HAL_SD_DMA_ENABLE(hsd);
 8001422:	f8c3 8000 	str.w	r8, [r3]
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8001426:	3280      	adds	r2, #128	; 0x80
 8001428:	08b3      	lsrs	r3, r6, #2
 800142a:	4639      	mov	r1, r7
 800142c:	f7ff fa8c 	bl	8000948 <HAL_DMA_Start_IT>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001434:	e88d 0048 	stmia.w	sp, {r3, r6}
    SDIO_ConfigData(hsd->Instance, &config);
 8001438:	4669      	mov	r1, sp
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800143a:	2390      	movs	r3, #144	; 0x90
    SDIO_ConfigData(hsd->Instance, &config);
 800143c:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800143e:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001440:	9503      	str	r5, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001442:	9504      	str	r5, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001444:	f8cd 8014 	str.w	r8, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8001448:	f000 fcaa 	bl	8001da0 <SDIO_ConfigData>
    return HAL_OK;
 800144c:	4628      	mov	r0, r5
 800144e:	e794      	b.n	800137a <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 8001450:	2002      	movs	r0, #2
 8001452:	e792      	b.n	800137a <HAL_SD_WriteBlocks_DMA+0x1a>
 8001454:	08001245 	.word	0x08001245
 8001458:	080018c5 	.word	0x080018c5
 800145c:	4225858c 	.word	0x4225858c

08001460 <HAL_SD_GetState>:
  return hsd->State;
 8001460:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
 8001464:	4770      	bx	lr

08001466 <HAL_SD_TxCpltCallback>:
 8001466:	4770      	bx	lr

08001468 <HAL_SD_RxCpltCallback>:
 8001468:	4770      	bx	lr

0800146a <HAL_SD_ErrorCallback>:
 800146a:	4770      	bx	lr

0800146c <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800146c:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800146e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8001470:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001472:	2b82      	cmp	r3, #130	; 0x82
 8001474:	d109      	bne.n	800148a <SD_DMAReceiveCplt+0x1e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001476:	6820      	ldr	r0, [r4, #0]
 8001478:	f000 fd1e 	bl	8001eb8 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 800147c:	b128      	cbz	r0, 800148a <SD_DMAReceiveCplt+0x1e>
    {
      hsd->ErrorCode |= errorstate;
 800147e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001480:	4318      	orrs	r0, r3
 8001482:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8001484:	4620      	mov	r0, r4
 8001486:	f7ff fff0 	bl	800146a <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800148a:	6823      	ldr	r3, [r4, #0]
 800148c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148e:	f022 0208 	bic.w	r2, r2, #8
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001494:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001498:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800149a:	2301      	movs	r3, #1
 800149c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  HAL_SD_RxCpltCallback(hsd);
 80014a0:	4620      	mov	r0, r4
 80014a2:	f7ff ffe1 	bl	8001468 <HAL_SD_RxCpltCallback>
 80014a6:	bd10      	pop	{r4, pc}

080014a8 <HAL_SD_AbortCallback>:
{
 80014a8:	4770      	bx	lr

080014aa <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 80014aa:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 80014ac:	0f9a      	lsrs	r2, r3, #30
 80014ae:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 80014b0:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80014b4:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 80014b6:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80014ba:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 80014bc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80014c0:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 80014c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80014c6:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 80014c8:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80014ca:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 80014cc:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80014ce:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80014d4:	88ca      	ldrh	r2, [r1, #6]
{
 80014d6:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80014d8:	b292      	uxth	r2, r2
 80014da:	f3c3 5403 	ubfx	r4, r3, #20, #4
 80014de:	4322      	orrs	r2, r4
 80014e0:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80014e2:	f3c3 4203 	ubfx	r2, r3, #16, #4
 80014e6:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80014e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80014ec:	09d4      	lsrs	r4, r2, #7
 80014ee:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80014f0:	f3c2 1480 	ubfx	r4, r2, #6, #1
 80014f4:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80014f6:	f3c2 1440 	ubfx	r4, r2, #5, #1
 80014fa:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 80014fc:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8001500:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8001502:	2400      	movs	r4, #0
 8001504:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8001506:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001508:	2c00      	cmp	r4, #0
 800150a:	f040 8083 	bne.w	8001614 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 800150e:	0292      	lsls	r2, r2, #10
 8001510:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8001514:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2U;
 8001516:	690a      	ldr	r2, [r1, #16]
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800151e:	4313      	orrs	r3, r2
 8001520:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8001522:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8001524:	690b      	ldr	r3, [r1, #16]
 8001526:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800152a:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800152c:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8001530:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8001532:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8001536:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8001538:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800153c:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800153e:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8001542:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8001544:	0bd3      	lsrs	r3, r2, #15
 8001546:	f003 0306 	and.w	r3, r3, #6
 800154a:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 800154c:	7e0c      	ldrb	r4, [r1, #24]
 800154e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001552:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8001556:	4322      	orrs	r2, r4
 8001558:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800155a:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800155c:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800155e:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8001560:	3402      	adds	r4, #2
 8001562:	40a2      	lsls	r2, r4
 8001564:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8001566:	7a0d      	ldrb	r5, [r1, #8]
 8001568:	2401      	movs	r4, #1
 800156a:	40ac      	lsls	r4, r5
 800156c:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800156e:	0a64      	lsrs	r4, r4, #9
 8001570:	4362      	muls	r2, r4
 8001572:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8001574:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8001578:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800157a:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8001584:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8001586:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8001588:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800158a:	7e8a      	ldrb	r2, [r1, #26]
 800158c:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8001590:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8001592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8001596:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8001598:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800159a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800159c:	0fda      	lsrs	r2, r3, #31
 800159e:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 80015a0:	f3c3 7241 	ubfx	r2, r3, #29, #2
 80015a4:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 80015a6:	f3c3 6282 	ubfx	r2, r3, #26, #3
 80015aa:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80015ac:	0d9a      	lsrs	r2, r3, #22
 80015ae:	f002 020c 	and.w	r2, r2, #12
 80015b2:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 80015b4:	7fca      	ldrb	r2, [r1, #31]
 80015b6:	f3c3 5081 	ubfx	r0, r3, #22, #2
 80015ba:	4302      	orrs	r2, r0
 80015bc:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 80015be:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80015c2:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0U;
 80015c6:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80015c8:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0U;
 80015cc:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80015d0:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80015d4:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80015d8:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80015dc:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80015e0:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80015e4:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80015e8:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80015ec:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80015f0:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 80015f4:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80015f8:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 80015fc:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8001600:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03U);
 8001604:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8001608:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800160c:	2301      	movs	r3, #1
 800160e:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8001612:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001614:	2c01      	cmp	r4, #1
 8001616:	d11a      	bne.n	800164e <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8001618:	041b      	lsls	r3, r3, #16
 800161a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800161e:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8001620:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8U);
 8001622:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8001624:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8U);
 8001626:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800162a:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 800162c:	690c      	ldr	r4, [r1, #16]
 800162e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001632:	4322      	orrs	r2, r4
 8001634:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8001636:	690a      	ldr	r2, [r1, #16]
 8001638:	0292      	lsls	r2, r2, #10
 800163a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800163e:	6542      	str	r2, [r0, #84]	; 0x54
 8001640:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8001642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001646:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800164a:	6582      	str	r2, [r0, #88]	; 0x58
 800164c:	e794      	b.n	8001578 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 800164e:	6803      	ldr	r3, [r0, #0]
 8001650:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001654:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001656:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800165e:	2301      	movs	r3, #1
 8001660:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8001664:	4618      	mov	r0, r3
 8001666:	bd30      	pop	{r4, r5, pc}

08001668 <HAL_SD_InitCard>:
{
 8001668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166a:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800166c:	2500      	movs	r5, #0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800166e:	2376      	movs	r3, #118	; 0x76
 8001670:	930c      	str	r3, [sp, #48]	; 0x30
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001672:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001674:	950b      	str	r5, [sp, #44]	; 0x2c
  SDIO_Init(hsd->Instance, Init);
 8001676:	ab0a      	add	r3, sp, #40	; 0x28
{
 8001678:	4604      	mov	r4, r0
  SDIO_Init(hsd->Instance, Init);
 800167a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800167e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  __HAL_SD_DISABLE(hsd); 
 8001682:	4e6f      	ldr	r6, [pc, #444]	; (8001840 <HAL_SD_InitCard+0x1d8>)
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001684:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001686:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001688:	9509      	str	r5, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 800168a:	ab07      	add	r3, sp, #28
 800168c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800168e:	6820      	ldr	r0, [r4, #0]
 8001690:	f000 faac 	bl	8001bec <SDIO_Init>
  __HAL_SD_ENABLE(hsd);
 8001694:	2701      	movs	r7, #1
  __HAL_SD_DISABLE(hsd); 
 8001696:	6035      	str	r5, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 8001698:	6820      	ldr	r0, [r4, #0]
 800169a:	f000 facb 	bl	8001c34 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800169e:	6037      	str	r7, [r6, #0]
  HAL_Delay(2U);
 80016a0:	2002      	movs	r0, #2
 80016a2:	f7fe fdcd 	bl	8000240 <HAL_Delay>
  __IO uint32_t count = 0U;
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80016a6:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80016a8:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80016aa:	f000 fc37 	bl	8001f1c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80016ae:	4606      	mov	r6, r0
 80016b0:	b968      	cbnz	r0, 80016ce <HAL_SD_InitCard+0x66>
  {
    return errorstate;
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80016b2:	6820      	ldr	r0, [r4, #0]
 80016b4:	f000 fc5a 	bl	8001f6c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80016b8:	b380      	cbz	r0, 800171c <HAL_SD_InitCard+0xb4>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80016ba:	64a6      	str	r6, [r4, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80016bc:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80016c0:	9b06      	ldr	r3, [sp, #24]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	42ab      	cmp	r3, r5
 80016c6:	9206      	str	r2, [sp, #24]
 80016c8:	d108      	bne.n	80016dc <HAL_SD_InitCard+0x74>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80016ca:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 80016ce:	2001      	movs	r0, #1
 80016d0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80016d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80016d6:	430e      	orrs	r6, r1
 80016d8:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 80016da:	e081      	b.n	80017e0 <HAL_SD_InitCard+0x178>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80016dc:	2100      	movs	r1, #0
 80016de:	6820      	ldr	r0, [r4, #0]
 80016e0:	f000 fc7c 	bl	8001fdc <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80016e4:	4601      	mov	r1, r0
 80016e6:	b110      	cbz	r0, 80016ee <HAL_SD_InitCard+0x86>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80016e8:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80016ec:	e7ef      	b.n	80016ce <HAL_SD_InitCard+0x66>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80016ee:	6820      	ldr	r0, [r4, #0]
 80016f0:	f000 fc8c 	bl	800200c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80016f4:	4601      	mov	r1, r0
 80016f6:	2800      	cmp	r0, #0
 80016f8:	d1f6      	bne.n	80016e8 <HAL_SD_InitCard+0x80>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80016fa:	6820      	ldr	r0, [r4, #0]
 80016fc:	f000 fab5 	bl	8001c6a <SDIO_GetResponse>
    while(validvoltage == 0U)
 8001700:	2800      	cmp	r0, #0
 8001702:	dadd      	bge.n	80016c0 <HAL_SD_InitCard+0x58>
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8001704:	2300      	movs	r3, #0
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8001706:	6463      	str	r3, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8001708:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 800170a:	2301      	movs	r3, #1
 800170c:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8001710:	f000 fa94 	bl	8001c3c <SDIO_GetPowerState>
 8001714:	bb10      	cbnz	r0, 800175c <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8001716:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800171a:	e06b      	b.n	80017f4 <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800171c:	64a7      	str	r7, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800171e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001722:	9b06      	ldr	r3, [sp, #24]
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	42ab      	cmp	r3, r5
 8001728:	9206      	str	r2, [sp, #24]
 800172a:	d0ce      	beq.n	80016ca <HAL_SD_InitCard+0x62>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800172c:	2100      	movs	r1, #0
 800172e:	6820      	ldr	r0, [r4, #0]
 8001730:	f000 fc54 	bl	8001fdc <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001734:	4606      	mov	r6, r0
 8001736:	2800      	cmp	r0, #0
 8001738:	d1c9      	bne.n	80016ce <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800173a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800173e:	6820      	ldr	r0, [r4, #0]
 8001740:	f000 fc64 	bl	800200c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001744:	4606      	mov	r6, r0
 8001746:	2800      	cmp	r0, #0
 8001748:	d1c1      	bne.n	80016ce <HAL_SD_InitCard+0x66>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800174a:	4601      	mov	r1, r0
 800174c:	6820      	ldr	r0, [r4, #0]
 800174e:	f000 fa8c 	bl	8001c6a <SDIO_GetResponse>
    while(validvoltage == 0U)
 8001752:	0fc3      	lsrs	r3, r0, #31
 8001754:	d0e5      	beq.n	8001722 <HAL_SD_InitCard+0xba>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8001756:	0042      	lsls	r2, r0, #1
 8001758:	d5d4      	bpl.n	8001704 <HAL_SD_InitCard+0x9c>
 800175a:	e7d4      	b.n	8001706 <HAL_SD_InitCard+0x9e>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800175c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800175e:	2b03      	cmp	r3, #3
 8001760:	d01a      	beq.n	8001798 <HAL_SD_InitCard+0x130>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8001762:	6820      	ldr	r0, [r4, #0]
 8001764:	f000 fc6b 	bl	800203e <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001768:	4605      	mov	r5, r0
 800176a:	2800      	cmp	r0, #0
 800176c:	d142      	bne.n	80017f4 <HAL_SD_InitCard+0x18c>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800176e:	4601      	mov	r1, r0
 8001770:	6820      	ldr	r0, [r4, #0]
 8001772:	f000 fa7a 	bl	8001c6a <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001776:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001778:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800177a:	6820      	ldr	r0, [r4, #0]
 800177c:	f000 fa75 	bl	8001c6a <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001780:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001782:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001784:	6820      	ldr	r0, [r4, #0]
 8001786:	f000 fa70 	bl	8001c6a <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800178a:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800178c:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800178e:	6820      	ldr	r0, [r4, #0]
 8001790:	f000 fa6b 	bl	8001c6a <SDIO_GetResponse>
 8001794:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8001798:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800179a:	2b03      	cmp	r3, #3
 800179c:	d122      	bne.n	80017e4 <HAL_SD_InitCard+0x17c>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800179e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d12e      	bne.n	8001802 <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80017a4:	2104      	movs	r1, #4
 80017a6:	6820      	ldr	r0, [r4, #0]
 80017a8:	f000 fa5f 	bl	8001c6a <SDIO_GetResponse>
 80017ac:	0d00      	lsrs	r0, r0, #20
 80017ae:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 80017b0:	a90d      	add	r1, sp, #52	; 0x34
 80017b2:	4620      	mov	r0, r4
 80017b4:	f7ff fe79 	bl	80014aa <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80017b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80017ba:	6820      	ldr	r0, [r4, #0]
 80017bc:	0412      	lsls	r2, r2, #16
 80017be:	2300      	movs	r3, #0
 80017c0:	f000 fb94 	bl	8001eec <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80017c4:	4605      	mov	r5, r0
 80017c6:	b9a8      	cbnz	r0, 80017f4 <HAL_SD_InitCard+0x18c>
  SDIO_Init(hsd->Instance, hsd->Init);
 80017c8:	f104 0310 	add.w	r3, r4, #16
 80017cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80017d4:	1d23      	adds	r3, r4, #4
 80017d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017d8:	6820      	ldr	r0, [r4, #0]
 80017da:	f000 fa07 	bl	8001bec <SDIO_Init>
  return HAL_OK;
 80017de:	4628      	mov	r0, r5
}
 80017e0:	b019      	add	sp, #100	; 0x64
 80017e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80017e4:	f10d 0116 	add.w	r1, sp, #22
 80017e8:	6820      	ldr	r0, [r4, #0]
 80017ea:	f000 fc53 	bl	8002094 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80017ee:	4605      	mov	r5, r0
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d0d4      	beq.n	800179e <HAL_SD_InitCard+0x136>
    hsd->State = HAL_SD_STATE_READY;
 80017f4:	2001      	movs	r0, #1
 80017f6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80017fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017fc:	431d      	orrs	r5, r3
 80017fe:	63a5      	str	r5, [r4, #56]	; 0x38
 8001800:	e7ee      	b.n	80017e0 <HAL_SD_InitCard+0x178>
    hsd->SdCard.RelCardAdd = sd_rca;
 8001802:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8001806:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001808:	6820      	ldr	r0, [r4, #0]
 800180a:	0409      	lsls	r1, r1, #16
 800180c:	f000 fc2c 	bl	8002068 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001810:	4605      	mov	r5, r0
 8001812:	2800      	cmp	r0, #0
 8001814:	d1ee      	bne.n	80017f4 <HAL_SD_InitCard+0x18c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001816:	4601      	mov	r1, r0
 8001818:	6820      	ldr	r0, [r4, #0]
 800181a:	f000 fa26 	bl	8001c6a <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800181e:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001820:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001822:	6820      	ldr	r0, [r4, #0]
 8001824:	f000 fa21 	bl	8001c6a <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001828:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800182a:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800182c:	6820      	ldr	r0, [r4, #0]
 800182e:	f000 fa1c 	bl	8001c6a <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8001832:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001834:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	f000 fa17 	bl	8001c6a <SDIO_GetResponse>
 800183c:	6720      	str	r0, [r4, #112]	; 0x70
 800183e:	e7b1      	b.n	80017a4 <HAL_SD_InitCard+0x13c>
 8001840:	422580a0 	.word	0x422580a0

08001844 <HAL_SD_Init>:
{
 8001844:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8001846:	4604      	mov	r4, r0
 8001848:	b1a0      	cbz	r0, 8001874 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 800184a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800184e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001852:	b913      	cbnz	r3, 800185a <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 8001854:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8001856:	f002 fbf3 	bl	8004040 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800185a:	2303      	movs	r3, #3
 800185c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8001860:	4620      	mov	r0, r4
 8001862:	f7ff ff01 	bl	8001668 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001866:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 8001868:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800186a:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800186c:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800186e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8001872:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001874:	2001      	movs	r0, #1
}
 8001876:	bd10      	pop	{r4, pc}

08001878 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8001878:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800187a:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800187c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800187e:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8001880:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001882:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8001884:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001886:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8001888:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800188a:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800188c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800188e:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8001890:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001892:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8001894:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001896:	61cb      	str	r3, [r1, #28]
}
 8001898:	2000      	movs	r0, #0
 800189a:	4770      	bx	lr

0800189c <HAL_SD_GetCardState>:
  {
    return HAL_SD_ERROR_PARAM;
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800189c:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 800189e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80018a0:	0409      	lsls	r1, r1, #16
{
 80018a2:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80018a4:	6800      	ldr	r0, [r0, #0]
 80018a6:	f000 fc49 	bl	800213c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 80018aa:	4601      	mov	r1, r0
 80018ac:	b928      	cbnz	r0, 80018ba <HAL_SD_GetCardState+0x1e>
  {
    return errorstate;
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80018ae:	6820      	ldr	r0, [r4, #0]
 80018b0:	f000 f9db 	bl	8001c6a <SDIO_GetResponse>
  return cardstate;
 80018b4:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80018b8:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80018ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018bc:	4319      	orrs	r1, r3
 80018be:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80018c0:	2000      	movs	r0, #0
 80018c2:	e7f7      	b.n	80018b4 <HAL_SD_GetCardState+0x18>

080018c4 <SD_DMAError>:
{
 80018c4:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80018c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 80018c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d003      	beq.n	80018d8 <SD_DMAError+0x14>
 80018d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d11b      	bne.n	8001910 <SD_DMAError+0x4c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80018de:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80018e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018e2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80018e6:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80018e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018ee:	63a3      	str	r3, [r4, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff ffd3 	bl	800189c <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80018f6:	3805      	subs	r0, #5
 80018f8:	b2c0      	uxtb	r0, r0
 80018fa:	2801      	cmp	r0, #1
 80018fc:	d805      	bhi.n	800190a <SD_DMAError+0x46>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80018fe:	6820      	ldr	r0, [r4, #0]
 8001900:	f000 fada 	bl	8001eb8 <SDMMC_CmdStopTransfer>
 8001904:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001906:	4318      	orrs	r0, r3
 8001908:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State= HAL_SD_STATE_READY;
 800190a:	2301      	movs	r3, #1
 800190c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_ErrorCallback(hsd);
 8001910:	4620      	mov	r0, r4
 8001912:	f7ff fdaa 	bl	800146a <HAL_SD_ErrorCallback>
 8001916:	bd10      	pop	{r4, pc}

08001918 <SD_DMATxAbort>:
{
 8001918:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800191a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->hdmatx != NULL)
 800191c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800191e:	b10b      	cbz	r3, 8001924 <SD_DMATxAbort+0xc>
    hsd->hdmatx = NULL;
 8001920:	2300      	movs	r3, #0
 8001922:	6423      	str	r3, [r4, #64]	; 0x40
  if(hsd->hdmarx == NULL)
 8001924:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001926:	b9c5      	cbnz	r5, 800195a <SD_DMATxAbort+0x42>
    CardState = HAL_SD_GetCardState(hsd);
 8001928:	4620      	mov	r0, r4
 800192a:	f7ff ffb7 	bl	800189c <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800192e:	3805      	subs	r0, #5
    hsd->State = HAL_SD_STATE_READY;
 8001930:	2301      	movs	r3, #1
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8001932:	b2c0      	uxtb	r0, r0
 8001934:	4298      	cmp	r0, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001936:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001938:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800193c:	d80d      	bhi.n	800195a <SD_DMATxAbort+0x42>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800193e:	6820      	ldr	r0, [r4, #0]
 8001940:	f000 faba 	bl	8001eb8 <SDMMC_CmdStopTransfer>
 8001944:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001946:	4318      	orrs	r0, r3
 8001948:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800194a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 800194c:	4620      	mov	r0, r4
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800194e:	b113      	cbz	r3, 8001956 <SD_DMATxAbort+0x3e>
        HAL_SD_AbortCallback(hsd);
 8001950:	f7ff fdaa 	bl	80014a8 <HAL_SD_AbortCallback>
 8001954:	bd38      	pop	{r3, r4, r5, pc}
        HAL_SD_ErrorCallback(hsd);
 8001956:	f7ff fd88 	bl	800146a <HAL_SD_ErrorCallback>
 800195a:	bd38      	pop	{r3, r4, r5, pc}

0800195c <SD_DMARxAbort>:
{
 800195c:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800195e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->hdmarx != NULL)
 8001960:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001962:	b10b      	cbz	r3, 8001968 <SD_DMARxAbort+0xc>
    hsd->hdmarx = NULL;
 8001964:	2300      	movs	r3, #0
 8001966:	63e3      	str	r3, [r4, #60]	; 0x3c
  if(hsd->hdmatx == NULL)
 8001968:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800196a:	b9c5      	cbnz	r5, 800199e <SD_DMARxAbort+0x42>
    CardState = HAL_SD_GetCardState(hsd);
 800196c:	4620      	mov	r0, r4
 800196e:	f7ff ff95 	bl	800189c <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8001972:	3805      	subs	r0, #5
    hsd->State = HAL_SD_STATE_READY;
 8001974:	2301      	movs	r3, #1
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8001976:	b2c0      	uxtb	r0, r0
 8001978:	4298      	cmp	r0, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800197a:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800197c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8001980:	d80d      	bhi.n	800199e <SD_DMARxAbort+0x42>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8001982:	6820      	ldr	r0, [r4, #0]
 8001984:	f000 fa98 	bl	8001eb8 <SDMMC_CmdStopTransfer>
 8001988:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800198a:	4318      	orrs	r0, r3
 800198c:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800198e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8001990:	4620      	mov	r0, r4
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8001992:	b113      	cbz	r3, 800199a <SD_DMARxAbort+0x3e>
        HAL_SD_AbortCallback(hsd);
 8001994:	f7ff fd88 	bl	80014a8 <HAL_SD_AbortCallback>
 8001998:	bd38      	pop	{r3, r4, r5, pc}
        HAL_SD_ErrorCallback(hsd);
 800199a:	f7ff fd66 	bl	800146a <HAL_SD_ErrorCallback>
 800199e:	bd38      	pop	{r3, r4, r5, pc}

080019a0 <HAL_SD_IRQHandler>:
{
 80019a0:	b570      	push	{r4, r5, r6, lr}
 80019a2:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 80019a4:	6800      	ldr	r0, [r0, #0]
 80019a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80019a8:	05da      	lsls	r2, r3, #23
 80019aa:	d54f      	bpl.n	8001a4c <HAL_SD_IRQHandler+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 80019ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b0:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80019b2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80019b4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80019b8:	f023 0302 	bic.w	r3, r3, #2
 80019bc:	63c3      	str	r3, [r0, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80019be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019c0:	f013 0f08 	tst.w	r3, #8
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 80019c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80019c6:	d01e      	beq.n	8001a06 <HAL_SD_IRQHandler+0x66>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 80019c8:	079b      	lsls	r3, r3, #30
 80019ca:	d402      	bmi.n	80019d2 <HAL_SD_IRQHandler+0x32>
 80019cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019ce:	069e      	lsls	r6, r3, #26
 80019d0:	d508      	bpl.n	80019e4 <HAL_SD_IRQHandler+0x44>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80019d2:	f000 fa71 	bl	8001eb8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80019d6:	b128      	cbz	r0, 80019e4 <HAL_SD_IRQHandler+0x44>
          hsd->ErrorCode |= errorstate;
 80019d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80019da:	4318      	orrs	r0, r3
 80019dc:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80019de:	4620      	mov	r0, r4
 80019e0:	f7ff fd43 	bl	800146a <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80019e4:	6823      	ldr	r3, [r4, #0]
 80019e6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80019ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80019f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019f4:	07dd      	lsls	r5, r3, #31
        HAL_SD_RxCpltCallback(hsd);
 80019f6:	4620      	mov	r0, r4
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80019f8:	d402      	bmi.n	8001a00 <HAL_SD_IRQHandler+0x60>
 80019fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019fc:	079c      	lsls	r4, r3, #30
 80019fe:	d522      	bpl.n	8001a46 <HAL_SD_IRQHandler+0xa6>
        HAL_SD_RxCpltCallback(hsd);
 8001a00:	f7ff fd32 	bl	8001468 <HAL_SD_RxCpltCallback>
 8001a04:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8001a06:	0619      	lsls	r1, r3, #24
 8001a08:	f140 80a5 	bpl.w	8001b56 <HAL_SD_IRQHandler+0x1b6>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8001a0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a0e:	069a      	lsls	r2, r3, #26
 8001a10:	d508      	bpl.n	8001a24 <HAL_SD_IRQHandler+0x84>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001a12:	f000 fa51 	bl	8001eb8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001a16:	b128      	cbz	r0, 8001a24 <HAL_SD_IRQHandler+0x84>
          hsd->ErrorCode |= errorstate;
 8001a18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a1a:	4318      	orrs	r0, r3
 8001a1c:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7ff fd23 	bl	800146a <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8001a24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a26:	07db      	lsls	r3, r3, #31
 8001a28:	f100 8095 	bmi.w	8001b56 <HAL_SD_IRQHandler+0x1b6>
 8001a2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a2e:	079e      	lsls	r6, r3, #30
 8001a30:	f100 8091 	bmi.w	8001b56 <HAL_SD_IRQHandler+0x1b6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8001a34:	6822      	ldr	r2, [r4, #0]
 8001a36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001a38:	f023 0308 	bic.w	r3, r3, #8
 8001a3c:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8001a44:	4620      	mov	r0, r4
 8001a46:	f7ff fd0e 	bl	8001466 <HAL_SD_TxCpltCallback>
 8001a4a:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8001a4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001a4e:	045d      	lsls	r5, r3, #17
 8001a50:	d510      	bpl.n	8001a74 <HAL_SD_IRQHandler+0xd4>
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0U;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8001a52:	6a25      	ldr	r5, [r4, #32]
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8001a54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a58:	6383      	str	r3, [r0, #56]	; 0x38
 8001a5a:	f105 0620 	add.w	r6, r5, #32
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8001a5e:	4629      	mov	r1, r5
 8001a60:	6820      	ldr	r0, [r4, #0]
 8001a62:	3504      	adds	r5, #4
 8001a64:	f000 f8e1 	bl	8001c2a <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8001a68:	42ae      	cmp	r6, r5
 8001a6a:	d1f8      	bne.n	8001a5e <HAL_SD_IRQHandler+0xbe>
  }
  
  hsd->pTxBuffPtr += 8U;
 8001a6c:	6a23      	ldr	r3, [r4, #32]
 8001a6e:	3320      	adds	r3, #32
 8001a70:	6223      	str	r3, [r4, #32]
 8001a72:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8001a74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001a76:	0419      	lsls	r1, r3, #16
 8001a78:	d510      	bpl.n	8001a9c <HAL_SD_IRQHandler+0xfc>
  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8001a7a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8001a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a80:	1f2e      	subs	r6, r5, #4
 8001a82:	6383      	str	r3, [r0, #56]	; 0x38
 8001a84:	351c      	adds	r5, #28
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8001a86:	6820      	ldr	r0, [r4, #0]
 8001a88:	f000 f8cc 	bl	8001c24 <SDIO_ReadFIFO>
 8001a8c:	f846 0f04 	str.w	r0, [r6, #4]!
  for(count = 0U; count < 8U; count++)
 8001a90:	42b5      	cmp	r5, r6
 8001a92:	d1f8      	bne.n	8001a86 <HAL_SD_IRQHandler+0xe6>
  hsd->pRxBuffPtr += 8U;
 8001a94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a96:	3320      	adds	r3, #32
 8001a98:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a9a:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8001a9c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001a9e:	f240 233a 	movw	r3, #570	; 0x23a
 8001aa2:	421a      	tst	r2, r3
 8001aa4:	d057      	beq.n	8001b56 <HAL_SD_IRQHandler+0x1b6>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8001aa6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001aa8:	079a      	lsls	r2, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8001aaa:	bf42      	ittt	mi
 8001aac:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8001aae:	f043 0302 	orrmi.w	r3, r3, #2
 8001ab2:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8001ab4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ab6:	071b      	lsls	r3, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8001ab8:	bf42      	ittt	mi
 8001aba:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8001abc:	f043 0308 	orrmi.w	r3, r3, #8
 8001ac0:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8001ac2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ac4:	069e      	lsls	r6, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8001ac6:	bf42      	ittt	mi
 8001ac8:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8001aca:	f043 0320 	orrmi.w	r3, r3, #32
 8001ace:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8001ad0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ad2:	06dd      	lsls	r5, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8001ad4:	bf42      	ittt	mi
 8001ad6:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8001ad8:	f043 0310 	orrmi.w	r3, r3, #16
 8001adc:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8001ade:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ae0:	0599      	lsls	r1, r3, #22
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001ae2:	bf42      	ittt	mi
 8001ae4:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8001ae6:	f043 0308 	orrmi.w	r3, r3, #8
 8001aea:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8001aec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001af0:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001af2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001af4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8001af8:	f023 0302 	bic.w	r3, r3, #2
 8001afc:	63c3      	str	r3, [r0, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8001afe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b00:	061a      	lsls	r2, r3, #24
 8001b02:	d51f      	bpl.n	8001b44 <HAL_SD_IRQHandler+0x1a4>
      if(hsd->hdmatx != NULL)
 8001b04:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001b06:	b148      	cbz	r0, 8001b1c <HAL_SD_IRQHandler+0x17c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_SD_IRQHandler+0x1b8>)
 8001b0a:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8001b0c:	f7fe ff5a 	bl	80009c4 <HAL_DMA_Abort_IT>
 8001b10:	b308      	cbz	r0, 8001b56 <HAL_SD_IRQHandler+0x1b6>
          SD_DMATxAbort(hsd->hdmatx);
 8001b12:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 8001b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          SD_DMATxAbort(hsd->hdmatx);
 8001b18:	f7ff befe 	b.w	8001918 <SD_DMATxAbort>
      else if(hsd->hdmarx != NULL)
 8001b1c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001b1e:	b148      	cbz	r0, 8001b34 <HAL_SD_IRQHandler+0x194>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_SD_IRQHandler+0x1bc>)
 8001b22:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8001b24:	f7fe ff4e 	bl	80009c4 <HAL_DMA_Abort_IT>
 8001b28:	b1a8      	cbz	r0, 8001b56 <HAL_SD_IRQHandler+0x1b6>
          SD_DMARxAbort(hsd->hdmarx);
 8001b2a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8001b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          SD_DMARxAbort(hsd->hdmarx);
 8001b30:	f7ff bf14 	b.w	800195c <SD_DMARxAbort>
        hsd->State = HAL_SD_STATE_READY;
 8001b34:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001b36:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001b38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7ff fcb3 	bl	80014a8 <HAL_SD_AbortCallback>
 8001b42:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8001b44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b46:	071b      	lsls	r3, r3, #28
 8001b48:	d505      	bpl.n	8001b56 <HAL_SD_IRQHandler+0x1b6>
      hsd->State = HAL_SD_STATE_READY;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8001b50:	4620      	mov	r0, r4
 8001b52:	f7ff fc8a 	bl	800146a <HAL_SD_ErrorCallback>
 8001b56:	bd70      	pop	{r4, r5, r6, pc}
 8001b58:	08001919 	.word	0x08001919
 8001b5c:	0800195d 	.word	0x0800195d

08001b60 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <SDMMC_GetCmdResp2+0x48>)
 8001b62:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fbb3 f2f2 	udiv	r2, r3, r2
 8001b6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b70:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8001b72:	f113 33ff 	adds.w	r3, r3, #4294967295
 8001b76:	d314      	bcc.n	8001ba2 <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8001b78:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001b7a:	f012 0f45 	tst.w	r2, #69	; 0x45
 8001b7e:	d0f8      	beq.n	8001b72 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8001b80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b82:	075b      	lsls	r3, r3, #29
 8001b84:	d503      	bpl.n	8001b8e <SDMMC_GetCmdResp2+0x2e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8001b86:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8001b88:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8001b8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b90:	f013 0301 	ands.w	r3, r3, #1
 8001b94:	d001      	beq.n	8001b9a <SDMMC_GetCmdResp2+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8001b96:	2301      	movs	r3, #1
 8001b98:	e7f6      	b.n	8001b88 <SDMMC_GetCmdResp2+0x28>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8001b9a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001b9e:	6382      	str	r2, [r0, #56]	; 0x38
 8001ba0:	e7f3      	b.n	8001b8a <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8001ba2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ba6:	e7f0      	b.n	8001b8a <SDMMC_GetCmdResp2+0x2a>
 8001ba8:	20000004 	.word	0x20000004

08001bac <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <SDMMC_GetCmdResp3+0x3c>)
 8001bae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8001bb8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bbc:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8001bbe:	f113 33ff 	adds.w	r3, r3, #4294967295
 8001bc2:	d30e      	bcc.n	8001be2 <SDMMC_GetCmdResp3+0x36>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8001bc4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001bc6:	f012 0f45 	tst.w	r2, #69	; 0x45
 8001bca:	d0f8      	beq.n	8001bbe <SDMMC_GetCmdResp3+0x12>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8001bcc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001bce:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8001bd2:	bf15      	itete	ne
 8001bd4:	2304      	movne	r3, #4
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8001bd6:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8001bda:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8001bdc:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8001bde:	4618      	mov	r0, r3
 8001be0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8001be2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8001be6:	4770      	bx	lr
 8001be8:	20000004 	.word	0x20000004

08001bec <SDIO_Init>:
{
 8001bec:	b084      	sub	sp, #16
 8001bee:	b510      	push	{r4, lr}
 8001bf0:	ac03      	add	r4, sp, #12
 8001bf2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8001bf6:	9904      	ldr	r1, [sp, #16]
 8001bf8:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8001bfa:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8001bfc:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8001bfe:	9905      	ldr	r1, [sp, #20]
 8001c00:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8001c02:	9906      	ldr	r1, [sp, #24]
 8001c04:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8001c06:	9907      	ldr	r1, [sp, #28]
 8001c08:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8001c0a:	9908      	ldr	r1, [sp, #32]
}
 8001c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8001c10:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8001c14:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8001c16:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	6043      	str	r3, [r0, #4]
}
 8001c1e:	b004      	add	sp, #16
 8001c20:	2000      	movs	r0, #0
 8001c22:	4770      	bx	lr

08001c24 <SDIO_ReadFIFO>:
 8001c24:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8001c28:	4770      	bx	lr

08001c2a <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8001c2a:	680b      	ldr	r3, [r1, #0]
 8001c2c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8001c30:	2000      	movs	r0, #0
 8001c32:	4770      	bx	lr

08001c34 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8001c34:	2303      	movs	r3, #3
 8001c36:	6003      	str	r3, [r0, #0]
}
 8001c38:	2000      	movs	r0, #0
 8001c3a:	4770      	bx	lr

08001c3c <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8001c3c:	6800      	ldr	r0, [r0, #0]
}
 8001c3e:	f000 0003 	and.w	r0, r0, #3
 8001c42:	4770      	bx	lr

08001c44 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8001c44:	680b      	ldr	r3, [r1, #0]
{
 8001c46:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8001c48:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8001c4a:	688c      	ldr	r4, [r1, #8]
 8001c4c:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8001c4e:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8001c50:	4323      	orrs	r3, r4
                       Command->Response         |\
 8001c52:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8001c54:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8001c56:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8001c58:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8001c5c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8001c5e:	f022 020f 	bic.w	r2, r2, #15
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60c3      	str	r3, [r0, #12]
}
 8001c66:	2000      	movs	r0, #0
 8001c68:	bd10      	pop	{r4, pc}

08001c6a <SDIO_GetResponse>:
{
 8001c6a:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8001c6c:	3014      	adds	r0, #20
 8001c6e:	4401      	add	r1, r0
  __IO uint32_t tmp = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8001c74:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8001c76:	9b01      	ldr	r3, [sp, #4]
 8001c78:	6818      	ldr	r0, [r3, #0]
}  
 8001c7a:	b002      	add	sp, #8
 8001c7c:	4770      	bx	lr
	...

08001c80 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8001c80:	4b45      	ldr	r3, [pc, #276]	; (8001d98 <SDMMC_GetCmdResp1+0x118>)
{
 8001c82:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8001c8a:	fbb3 f3f4 	udiv	r3, r3, r4
 8001c8e:	435a      	muls	r2, r3
    if (count-- == 0U)
 8001c90:	2a00      	cmp	r2, #0
 8001c92:	d04a      	beq.n	8001d2a <SDMMC_GetCmdResp1+0xaa>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8001c94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c96:	f013 0f45 	tst.w	r3, #69	; 0x45
 8001c9a:	f102 32ff 	add.w	r2, r2, #4294967295
 8001c9e:	d0f7      	beq.n	8001c90 <SDMMC_GetCmdResp1+0x10>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8001ca0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ca2:	075c      	lsls	r4, r3, #29
 8001ca4:	d503      	bpl.n	8001cae <SDMMC_GetCmdResp1+0x2e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8001ca6:	2304      	movs	r3, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8001ca8:	6383      	str	r3, [r0, #56]	; 0x38
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8001cae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001cb0:	f013 0301 	ands.w	r3, r3, #1
 8001cb4:	d001      	beq.n	8001cba <SDMMC_GetCmdResp1+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e7f6      	b.n	8001ca8 <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDIOx->RESPCMD);
 8001cba:	6902      	ldr	r2, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	4291      	cmp	r1, r2
 8001cc0:	d136      	bne.n	8001d30 <SDMMC_GetCmdResp1+0xb0>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8001cc2:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8001cc6:	4619      	mov	r1, r3
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8001cc8:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8001cca:	f7ff ffce 	bl	8001c6a <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <SDMMC_GetCmdResp1+0x11c>)
 8001cd0:	4003      	ands	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0e9      	beq.n	8001caa <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	db2c      	blt.n	8001d34 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8001cda:	0042      	lsls	r2, r0, #1
 8001cdc:	d42d      	bmi.n	8001d3a <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8001cde:	0084      	lsls	r4, r0, #2
 8001ce0:	d42d      	bmi.n	8001d3e <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8001ce2:	00c1      	lsls	r1, r0, #3
 8001ce4:	d42d      	bmi.n	8001d42 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8001ce6:	0102      	lsls	r2, r0, #4
 8001ce8:	d42e      	bmi.n	8001d48 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8001cea:	0144      	lsls	r4, r0, #5
 8001cec:	d42f      	bmi.n	8001d4e <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8001cee:	01c1      	lsls	r1, r0, #7
 8001cf0:	d430      	bmi.n	8001d54 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8001cf2:	0202      	lsls	r2, r0, #8
 8001cf4:	d431      	bmi.n	8001d5a <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8001cf6:	0244      	lsls	r4, r0, #9
 8001cf8:	d432      	bmi.n	8001d60 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8001cfa:	0281      	lsls	r1, r0, #10
 8001cfc:	d433      	bmi.n	8001d66 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8001cfe:	02c2      	lsls	r2, r0, #11
 8001d00:	d434      	bmi.n	8001d6c <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8001d02:	0344      	lsls	r4, r0, #13
 8001d04:	d435      	bmi.n	8001d72 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8001d06:	0381      	lsls	r1, r0, #14
 8001d08:	d436      	bmi.n	8001d78 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8001d0a:	03c2      	lsls	r2, r0, #15
 8001d0c:	d437      	bmi.n	8001d7e <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8001d0e:	0404      	lsls	r4, r0, #16
 8001d10:	d438      	bmi.n	8001d84 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8001d12:	0441      	lsls	r1, r0, #17
 8001d14:	d439      	bmi.n	8001d8a <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8001d16:	0482      	lsls	r2, r0, #18
 8001d18:	d43a      	bmi.n	8001d90 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8001d1a:	f010 0f08 	tst.w	r0, #8
 8001d1e:	bf14      	ite	ne
 8001d20:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8001d24:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8001d28:	e7bf      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8001d2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001d2e:	e7bc      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e7ba      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8001d34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d38:	e7b7      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8001d3a:	2340      	movs	r3, #64	; 0x40
 8001d3c:	e7b5      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	e7b3      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8001d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d46:	e7b0      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8001d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d4c:	e7ad      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8001d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d52:	e7aa      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8001d54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d58:	e7a7      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8001d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5e:	e7a4      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8001d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d64:	e7a1      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8001d66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d6a:	e79e      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 8001d6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d70:	e79b      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8001d72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d76:	e798      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8001d78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d7c:	e795      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8001d7e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d82:	e792      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8001d84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d88:	e78f      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8001d8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d8e:	e78c      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 8001d90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d94:	e789      	b.n	8001caa <SDMMC_GetCmdResp1+0x2a>
 8001d96:	bf00      	nop
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	fdffe008 	.word	0xfdffe008

08001da0 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8001da0:	680b      	ldr	r3, [r1, #0]
{
 8001da2:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8001da4:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8001da6:	684b      	ldr	r3, [r1, #4]
 8001da8:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8001daa:	68cc      	ldr	r4, [r1, #12]
 8001dac:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8001dae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8001db0:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8001db2:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8001db4:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8001db6:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8001db8:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8001dba:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	bd10      	pop	{r4, pc}

08001dc6 <SDMMC_CmdBlockLength>:
{
 8001dc6:	b530      	push	{r4, r5, lr}
 8001dc8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001dca:	2340      	movs	r3, #64	; 0x40
 8001dcc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001dce:	2300      	movs	r3, #0
{
 8001dd0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8001dd2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8001dd4:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001dd6:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001dd8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dde:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8001de0:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001de2:	f7ff ff2f 	bl	8001c44 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8001de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dea:	4621      	mov	r1, r4
 8001dec:	4628      	mov	r0, r5
 8001dee:	f7ff ff47 	bl	8001c80 <SDMMC_GetCmdResp1>
}
 8001df2:	b007      	add	sp, #28
 8001df4:	bd30      	pop	{r4, r5, pc}

08001df6 <SDMMC_CmdReadSingleBlock>:
{
 8001df6:	b530      	push	{r4, r5, lr}
 8001df8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001dfa:	2340      	movs	r3, #64	; 0x40
 8001dfc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001dfe:	2300      	movs	r3, #0
{
 8001e00:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8001e02:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8001e04:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001e06:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001e08:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e0e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8001e10:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001e12:	f7ff ff17 	bl	8001c44 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	4628      	mov	r0, r5
 8001e1e:	f7ff ff2f 	bl	8001c80 <SDMMC_GetCmdResp1>
}
 8001e22:	b007      	add	sp, #28
 8001e24:	bd30      	pop	{r4, r5, pc}

08001e26 <SDMMC_CmdReadMultiBlock>:
{
 8001e26:	b530      	push	{r4, r5, lr}
 8001e28:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001e2a:	2340      	movs	r3, #64	; 0x40
 8001e2c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001e2e:	2300      	movs	r3, #0
{
 8001e30:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8001e32:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8001e34:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001e36:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001e38:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8001e40:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001e42:	f7ff feff 	bl	8001c44 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8001e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	4628      	mov	r0, r5
 8001e4e:	f7ff ff17 	bl	8001c80 <SDMMC_GetCmdResp1>
}
 8001e52:	b007      	add	sp, #28
 8001e54:	bd30      	pop	{r4, r5, pc}

08001e56 <SDMMC_CmdWriteSingleBlock>:
{
 8001e56:	b530      	push	{r4, r5, lr}
 8001e58:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001e5a:	2340      	movs	r3, #64	; 0x40
 8001e5c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001e5e:	2300      	movs	r3, #0
{
 8001e60:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8001e62:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8001e64:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001e66:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001e68:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e6e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8001e70:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001e72:	f7ff fee7 	bl	8001c44 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	f7ff feff 	bl	8001c80 <SDMMC_GetCmdResp1>
}
 8001e82:	b007      	add	sp, #28
 8001e84:	bd30      	pop	{r4, r5, pc}

08001e86 <SDMMC_CmdWriteMultiBlock>:
{
 8001e86:	b530      	push	{r4, r5, lr}
 8001e88:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001e8a:	2340      	movs	r3, #64	; 0x40
 8001e8c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001e8e:	2300      	movs	r3, #0
{
 8001e90:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8001e92:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8001e94:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001e96:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001e98:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e9e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8001ea0:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001ea2:	f7ff fecf 	bl	8001c44 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8001ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eaa:	4621      	mov	r1, r4
 8001eac:	4628      	mov	r0, r5
 8001eae:	f7ff fee7 	bl	8001c80 <SDMMC_GetCmdResp1>
}
 8001eb2:	b007      	add	sp, #28
 8001eb4:	bd30      	pop	{r4, r5, pc}
	...

08001eb8 <SDMMC_CmdStopTransfer>:
{
 8001eb8:	b530      	push	{r4, r5, lr}
 8001eba:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8001ebc:	2300      	movs	r3, #0
{
 8001ebe:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8001ec0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8001ec2:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001ec4:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001ec6:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001ec8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001ece:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001ed0:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8001ed2:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001ed4:	f7ff feb6 	bl	8001c44 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8001ed8:	4a03      	ldr	r2, [pc, #12]	; (8001ee8 <SDMMC_CmdStopTransfer+0x30>)
 8001eda:	4621      	mov	r1, r4
 8001edc:	4628      	mov	r0, r5
 8001ede:	f7ff fecf 	bl	8001c80 <SDMMC_GetCmdResp1>
}
 8001ee2:	b007      	add	sp, #28
 8001ee4:	bd30      	pop	{r4, r5, pc}
 8001ee6:	bf00      	nop
 8001ee8:	05f5e100 	.word	0x05f5e100

08001eec <SDMMC_CmdSelDesel>:
{
 8001eec:	b530      	push	{r4, r5, lr}
 8001eee:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001ef4:	2300      	movs	r3, #0
{
 8001ef6:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8001ef8:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001efa:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001efc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8001f02:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001f04:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8001f06:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001f08:	f7ff fe9c 	bl	8001c44 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4621      	mov	r1, r4
 8001f12:	4628      	mov	r0, r5
 8001f14:	f7ff feb4 	bl	8001c80 <SDMMC_GetCmdResp1>
}
 8001f18:	b007      	add	sp, #28
 8001f1a:	bd30      	pop	{r4, r5, pc}

08001f1c <SDMMC_CmdGoIdleState>:
{
 8001f1c:	b510      	push	{r4, lr}
 8001f1e:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8001f24:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8001f26:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001f28:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001f2a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f30:	9305      	str	r3, [sp, #20]
{
 8001f32:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001f34:	f7ff fe86 	bl	8001c44 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <SDMMC_CmdGoIdleState+0x4c>)
 8001f3a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fbb3 f2f2 	udiv	r2, r3, r2
 8001f44:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f48:	4353      	muls	r3, r2
    if (count-- == 0U)
 8001f4a:	f113 33ff 	adds.w	r3, r3, #4294967295
 8001f4e:	d308      	bcc.n	8001f62 <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8001f50:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001f52:	0612      	lsls	r2, r2, #24
 8001f54:	d5f9      	bpl.n	8001f4a <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8001f56:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8001f5a:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8001f5c:	2000      	movs	r0, #0
}
 8001f5e:	b006      	add	sp, #24
 8001f60:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8001f62:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8001f66:	e7fa      	b.n	8001f5e <SDMMC_CmdGoIdleState+0x42>
 8001f68:	20000004 	.word	0x20000004

08001f6c <SDMMC_CmdOperCond>:
{
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8001f70:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8001f74:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8001f76:	2308      	movs	r3, #8
 8001f78:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001f7a:	2340      	movs	r3, #64	; 0x40
 8001f7c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001f82:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f88:	9305      	str	r3, [sp, #20]
{
 8001f8a:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001f8c:	f7ff fe5a 	bl	8001c44 <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <SDMMC_CmdOperCond+0x6c>)
 8001f92:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fbb3 f2f2 	udiv	r2, r3, r2
 8001f9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fa0:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8001fa2:	f113 33ff 	adds.w	r3, r3, #4294967295
 8001fa6:	d314      	bcc.n	8001fd2 <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8001fa8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001faa:	f012 0f45 	tst.w	r2, #69	; 0x45
 8001fae:	d0f8      	beq.n	8001fa2 <SDMMC_CmdOperCond+0x36>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8001fb0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001fb2:	f012 0204 	ands.w	r2, r2, #4
 8001fb6:	d004      	beq.n	8001fc2 <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8001fb8:	2340      	movs	r3, #64	; 0x40
 8001fba:	63a3      	str	r3, [r4, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8001fbc:	2004      	movs	r0, #4
}
 8001fbe:	b006      	add	sp, #24
 8001fc0:	bd10      	pop	{r4, pc}
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8001fc2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001fc4:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8001fc8:	d0f9      	beq.n	8001fbe <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8001fca:	2340      	movs	r3, #64	; 0x40
 8001fcc:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8001fce:	4610      	mov	r0, r2
 8001fd0:	e7f5      	b.n	8001fbe <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8001fd2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001fd6:	e7f2      	b.n	8001fbe <SDMMC_CmdOperCond+0x52>
 8001fd8:	20000004 	.word	0x20000004

08001fdc <SDMMC_CmdAppCommand>:
{
 8001fdc:	b530      	push	{r4, r5, lr}
 8001fde:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001fe0:	2340      	movs	r3, #64	; 0x40
 8001fe2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001fe4:	2300      	movs	r3, #0
{
 8001fe6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8001fe8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8001fea:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001fec:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001fee:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff4:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8001ff6:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001ff8:	f7ff fe24 	bl	8001c44 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4621      	mov	r1, r4
 8002002:	4628      	mov	r0, r5
 8002004:	f7ff fe3c 	bl	8001c80 <SDMMC_GetCmdResp1>
}
 8002008:	b007      	add	sp, #28
 800200a:	bd30      	pop	{r4, r5, pc}

0800200c <SDMMC_CmdAppOperCommand>:
{
 800200c:	b510      	push	{r4, lr}
 800200e:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002010:	2329      	movs	r3, #41	; 0x29
 8002012:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8002014:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002018:	2340      	movs	r3, #64	; 0x40
 800201a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800201c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002020:	2300      	movs	r3, #0
{
 8002022:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8002024:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002026:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002028:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800202a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800202e:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002030:	f7ff fe08 	bl	8001c44 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002034:	4620      	mov	r0, r4
 8002036:	f7ff fdb9 	bl	8001bac <SDMMC_GetCmdResp3>
}
 800203a:	b006      	add	sp, #24
 800203c:	bd10      	pop	{r4, pc}

0800203e <SDMMC_CmdSendCID>:
{
 800203e:	b510      	push	{r4, lr}
 8002040:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8002042:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002044:	2202      	movs	r2, #2
{
 8002046:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8002048:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800204a:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800204c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800204e:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002050:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002054:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002056:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002058:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800205a:	f7ff fdf3 	bl	8001c44 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800205e:	4620      	mov	r0, r4
 8002060:	f7ff fd7e 	bl	8001b60 <SDMMC_GetCmdResp2>
}
 8002064:	b006      	add	sp, #24
 8002066:	bd10      	pop	{r4, pc}

08002068 <SDMMC_CmdSendCSD>:
{
 8002068:	b510      	push	{r4, lr}
 800206a:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800206c:	2309      	movs	r3, #9
 800206e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002070:	23c0      	movs	r3, #192	; 0xc0
 8002072:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002074:	2300      	movs	r3, #0
{
 8002076:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002078:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800207a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800207c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800207e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002082:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002084:	f7ff fdde 	bl	8001c44 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002088:	4620      	mov	r0, r4
 800208a:	f7ff fd69 	bl	8001b60 <SDMMC_GetCmdResp2>
}
 800208e:	b006      	add	sp, #24
 8002090:	bd10      	pop	{r4, pc}
	...

08002094 <SDMMC_CmdSetRelAdd>:
{
 8002094:	b530      	push	{r4, r5, lr}
 8002096:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8002098:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800209a:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0U;
 800209c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800209e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80020a0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80020a2:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80020a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 80020a8:	460d      	mov	r5, r1
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80020aa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80020ac:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80020ae:	9305      	str	r3, [sp, #20]
{
 80020b0:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80020b2:	f7ff fdc7 	bl	8001c44 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <SDMMC_CmdSetRelAdd+0xa4>)
 80020b8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	fbb3 f2f2 	udiv	r2, r3, r2
 80020c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80020c6:	4353      	muls	r3, r2
    if (count-- == 0U)
 80020c8:	f113 33ff 	adds.w	r3, r3, #4294967295
 80020cc:	d32b      	bcc.n	8002126 <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80020ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80020d0:	f012 0f45 	tst.w	r2, #69	; 0x45
 80020d4:	d0f8      	beq.n	80020c8 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80020d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020d8:	075a      	lsls	r2, r3, #29
 80020da:	d503      	bpl.n	80020e4 <SDMMC_CmdSetRelAdd+0x50>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80020dc:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80020de:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80020e0:	b007      	add	sp, #28
 80020e2:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80020e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020e6:	f011 0101 	ands.w	r1, r1, #1
 80020ea:	d001      	beq.n	80020f0 <SDMMC_CmdSetRelAdd+0x5c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80020ec:	2001      	movs	r0, #1
 80020ee:	e7f6      	b.n	80020de <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDIOx->RESPCMD);
 80020f0:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d119      	bne.n	800212c <SDMMC_CmdSetRelAdd+0x98>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80020f8:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80020fc:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80020fe:	4620      	mov	r0, r4
 8002100:	f7ff fdb3 	bl	8001c6a <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8002104:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8002108:	d103      	bne.n	8002112 <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800210a:	0c00      	lsrs	r0, r0, #16
 800210c:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 800210e:	4618      	mov	r0, r3
 8002110:	e7e6      	b.n	80020e0 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8002112:	0443      	lsls	r3, r0, #17
 8002114:	d40c      	bmi.n	8002130 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002116:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800211a:	bf14      	ite	ne
 800211c:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8002120:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8002124:	e7dc      	b.n	80020e0 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 8002126:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800212a:	e7d9      	b.n	80020e0 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800212c:	2001      	movs	r0, #1
 800212e:	e7d7      	b.n	80020e0 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002130:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002134:	e7d4      	b.n	80020e0 <SDMMC_CmdSetRelAdd+0x4c>
 8002136:	bf00      	nop
 8002138:	20000004 	.word	0x20000004

0800213c <SDMMC_CmdSendStatus>:
{
 800213c:	b530      	push	{r4, r5, lr}
 800213e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002140:	2340      	movs	r3, #64	; 0x40
 8002142:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002144:	2300      	movs	r3, #0
{
 8002146:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002148:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800214a:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800214c:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800214e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002154:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002156:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002158:	f7ff fd74 	bl	8001c44 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800215c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002160:	4621      	mov	r1, r4
 8002162:	4628      	mov	r0, r5
 8002164:	f7ff fd8c 	bl	8001c80 <SDMMC_GetCmdResp1>
}
 8002168:	b007      	add	sp, #28
 800216a:	bd30      	pop	{r4, r5, pc}

0800216c <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <disk_status+0x10>)
 800216e:	181a      	adds	r2, r3, r0
 8002170:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002174:	7a10      	ldrb	r0, [r2, #8]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4718      	bx	r3
 800217c:	20000044 	.word	0x20000044

08002180 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <disk_initialize+0x1c>)
 8002182:	5c1a      	ldrb	r2, [r3, r0]
 8002184:	b942      	cbnz	r2, 8002198 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8002186:	2201      	movs	r2, #1
 8002188:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800218a:	181a      	adds	r2, r3, r0
 800218c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002190:	7a10      	ldrb	r0, [r2, #8]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4718      	bx	r3
  }
  return stat;
}
 8002198:	2000      	movs	r0, #0
 800219a:	4770      	bx	lr
 800219c:	20000044 	.word	0x20000044

080021a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80021a0:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80021a2:	4c05      	ldr	r4, [pc, #20]	; (80021b8 <disk_read+0x18>)
 80021a4:	1825      	adds	r5, r4, r0
 80021a6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80021aa:	6860      	ldr	r0, [r4, #4]
 80021ac:	6884      	ldr	r4, [r0, #8]
 80021ae:	7a28      	ldrb	r0, [r5, #8]
 80021b0:	46a4      	mov	ip, r4
  return res;
}
 80021b2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80021b4:	4760      	bx	ip
 80021b6:	bf00      	nop
 80021b8:	20000044 	.word	0x20000044

080021bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80021bc:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80021be:	4c05      	ldr	r4, [pc, #20]	; (80021d4 <disk_write+0x18>)
 80021c0:	1825      	adds	r5, r4, r0
 80021c2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80021c6:	6860      	ldr	r0, [r4, #4]
 80021c8:	68c4      	ldr	r4, [r0, #12]
 80021ca:	7a28      	ldrb	r0, [r5, #8]
 80021cc:	46a4      	mov	ip, r4
  return res;
}
 80021ce:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80021d0:	4760      	bx	ip
 80021d2:	bf00      	nop
 80021d4:	20000044 	.word	0x20000044

080021d8 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <disk_ioctl+0x18>)
{
 80021da:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80021dc:	181c      	adds	r4, r3, r0
 80021de:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80021e2:	7a20      	ldrb	r0, [r4, #8]
 80021e4:	685b      	ldr	r3, [r3, #4]
  return res;
}
 80021e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	4718      	bx	r3
 80021ee:	bf00      	nop
 80021f0:	20000044 	.word	0x20000044

080021f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80021f4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80021f6:	4c06      	ldr	r4, [pc, #24]	; (8002210 <SD_initialize+0x1c>)
 80021f8:	2301      	movs	r3, #1
 80021fa:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 80021fc:	f001 fc8e 	bl	8003b1c <BSP_SD_Init>
 8002200:	4623      	mov	r3, r4
 8002202:	b918      	cbnz	r0, 800220c <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 8002204:	7822      	ldrb	r2, [r4, #0]
 8002206:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800220a:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 800220c:	7818      	ldrb	r0, [r3, #0]
}
 800220e:	bd10      	pop	{r4, pc}
 8002210:	20000000 	.word	0x20000000

08002214 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8002214:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8002216:	4c06      	ldr	r4, [pc, #24]	; (8002230 <SD_status+0x1c>)
 8002218:	2301      	movs	r3, #1
 800221a:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800221c:	f001 fcea 	bl	8003bf4 <BSP_SD_GetCardState>
 8002220:	4623      	mov	r3, r4
 8002222:	b918      	cbnz	r0, 800222c <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 8002224:	7822      	ldrb	r2, [r4, #0]
 8002226:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800222a:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 800222c:	7818      	ldrb	r0, [r3, #0]
}
 800222e:	bd10      	pop	{r4, pc}
 8002230:	20000000 	.word	0x20000000

08002234 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8002234:	b508      	push	{r3, lr}
 8002236:	4608      	mov	r0, r1
 8002238:	4611      	mov	r1, r2
	if (BSP_SD_ReadBlocks_DMA((uint32_t*) buff, (uint32_t) (sector),
 800223a:	461a      	mov	r2, r3
 800223c:	f001 fc7e 	bl	8003b3c <BSP_SD_ReadBlocks_DMA>
	count) != MSD_OK)
	{
	return RES_ERROR;
	}
	return RES_OK;
}
 8002240:	3000      	adds	r0, #0
 8002242:	bf18      	it	ne
 8002244:	2001      	movne	r0, #1
 8002246:	bd08      	pop	{r3, pc}

08002248 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8002248:	b508      	push	{r3, lr}
 800224a:	4608      	mov	r0, r1
 800224c:	4611      	mov	r1, r2
	if (BSP_SD_WriteBlocks_DMA((uint32_t*) buff, (uint32_t) (sector),
 800224e:	461a      	mov	r2, r3
 8002250:	f001 fca2 	bl	8003b98 <BSP_SD_WriteBlocks_DMA>
	count) != MSD_OK)
	{
	return RES_ERROR;
	}
	return RES_OK;
}
 8002254:	3000      	adds	r0, #0
 8002256:	bf18      	it	ne
 8002258:	2001      	movne	r0, #1
 800225a:	bd08      	pop	{r3, pc}

0800225c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800225c:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <SD_ioctl+0x48>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	07db      	lsls	r3, r3, #31
{
 8002264:	b088      	sub	sp, #32
 8002266:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002268:	d41a      	bmi.n	80022a0 <SD_ioctl+0x44>
  
  switch (cmd)
 800226a:	2903      	cmp	r1, #3
 800226c:	d803      	bhi.n	8002276 <SD_ioctl+0x1a>
 800226e:	e8df f001 	tbb	[pc, r1]
 8002272:	0510      	.short	0x0510
 8002274:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize;
    res = RES_OK;
    break;
  
  default:
    res = RES_PARERR;
 8002276:	2004      	movs	r0, #4
  }
  
  return res;
}
 8002278:	b008      	add	sp, #32
 800227a:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800227c:	4668      	mov	r0, sp
 800227e:	f001 fcc3 	bl	8003c08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8002282:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8002284:	6023      	str	r3, [r4, #0]
 8002286:	e004      	b.n	8002292 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8002288:	4668      	mov	r0, sp
 800228a:	f001 fcbd 	bl	8003c08 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800228e:	9b07      	ldr	r3, [sp, #28]
 8002290:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8002292:	2000      	movs	r0, #0
 8002294:	e7f0      	b.n	8002278 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8002296:	4668      	mov	r0, sp
 8002298:	f001 fcb6 	bl	8003c08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800229c:	9b07      	ldr	r3, [sp, #28]
 800229e:	e7f1      	b.n	8002284 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80022a0:	2003      	movs	r0, #3
 80022a2:	e7e9      	b.n	8002278 <SD_ioctl+0x1c>
 80022a4:	20000000 	.word	0x20000000

080022a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80022a8:	3801      	subs	r0, #1
 80022aa:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80022ac:	4291      	cmp	r1, r2
 80022ae:	d100      	bne.n	80022b2 <mem_cpy+0xa>
		*d++ = *s++;
}
 80022b0:	4770      	bx	lr
		*d++ = *s++;
 80022b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022b6:	f800 3f01 	strb.w	r3, [r0, #1]!
 80022ba:	e7f7      	b.n	80022ac <mem_cpy+0x4>

080022bc <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80022bc:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 80022be:	4290      	cmp	r0, r2
 80022c0:	d100      	bne.n	80022c4 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 80022c2:	4770      	bx	lr
		*d++ = (BYTE)val;
 80022c4:	f800 1b01 	strb.w	r1, [r0], #1
 80022c8:	e7f9      	b.n	80022be <mem_set+0x2>
	...

080022cc <chk_lock>:
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80022cc:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
 80022d0:	4b18      	ldr	r3, [pc, #96]	; (8002334 <chk_lock+0x68>)
{
 80022d2:	b5f0      	push	{r4, r5, r6, r7, lr}
				Files[i].clu == dp->sclust &&
				Files[i].idx == dp->index) break;
 80022d4:	4660      	mov	r0, ip
	for (i = be = 0; i < _FS_LOCK; i++) {
 80022d6:	2400      	movs	r4, #0
				Files[i].clu == dp->sclust &&
 80022d8:	4665      	mov	r5, ip
	for (i = be = 0; i < _FS_LOCK; i++) {
 80022da:	4622      	mov	r2, r4
 80022dc:	469e      	mov	lr, r3
				Files[i].clu == dp->sclust &&
 80022de:	3508      	adds	r5, #8
				Files[i].idx == dp->index) break;
 80022e0:	3006      	adds	r0, #6
		if (Files[i].fs) {	/* Existing entry */
 80022e2:	681e      	ldr	r6, [r3, #0]
 80022e4:	b1b6      	cbz	r6, 8002314 <chk_lock+0x48>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80022e6:	f8dc 7000 	ldr.w	r7, [ip]
 80022ea:	42be      	cmp	r6, r7
 80022ec:	d113      	bne.n	8002316 <chk_lock+0x4a>
 80022ee:	685f      	ldr	r7, [r3, #4]
 80022f0:	682e      	ldr	r6, [r5, #0]
 80022f2:	42b7      	cmp	r7, r6
 80022f4:	d10f      	bne.n	8002316 <chk_lock+0x4a>
				Files[i].clu == dp->sclust &&
 80022f6:	891f      	ldrh	r7, [r3, #8]
 80022f8:	8806      	ldrh	r6, [r0, #0]
 80022fa:	42b7      	cmp	r7, r6
 80022fc:	d10b      	bne.n	8002316 <chk_lock+0x4a>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80022fe:	b9b9      	cbnz	r1, 8002330 <chk_lock+0x64>
 8002300:	230c      	movs	r3, #12
 8002302:	fb03 e202 	mla	r2, r3, r2, lr
 8002306:	8953      	ldrh	r3, [r2, #10]
 8002308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800230c:	bf14      	ite	ne
 800230e:	2000      	movne	r0, #0
 8002310:	2010      	moveq	r0, #16
 8002312:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8002314:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002316:	3201      	adds	r2, #1
 8002318:	2a02      	cmp	r2, #2
 800231a:	f103 030c 	add.w	r3, r3, #12
 800231e:	d1e0      	bne.n	80022e2 <chk_lock+0x16>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002320:	b10c      	cbz	r4, 8002326 <chk_lock+0x5a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002322:	2000      	movs	r0, #0
 8002324:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002326:	2902      	cmp	r1, #2
 8002328:	bf0c      	ite	eq
 800232a:	2000      	moveq	r0, #0
 800232c:	2012      	movne	r0, #18
 800232e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002330:	2010      	movs	r0, #16
 8002332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002334:	20000028 	.word	0x20000028

08002338 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 800233c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8002340:	4c27      	ldr	r4, [pc, #156]	; (80023e0 <inc_lock+0xa8>)
 8002342:	f8d3 e000 	ldr.w	lr, [r3]
			Files[i].clu == dp->sclust &&
 8002346:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
			Files[i].idx == dp->index) break;
 800234a:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
{
 800234e:	4688      	mov	r8, r1
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002350:	2300      	movs	r3, #0
 8002352:	4622      	mov	r2, r4
			Files[i].clu == dp->sclust &&
 8002354:	3508      	adds	r5, #8
			Files[i].idx == dp->index) break;
 8002356:	3606      	adds	r6, #6
		if (Files[i].fs == dp->fs &&
 8002358:	6827      	ldr	r7, [r4, #0]
 800235a:	4577      	cmp	r7, lr
 800235c:	d108      	bne.n	8002370 <inc_lock+0x38>
 800235e:	6829      	ldr	r1, [r5, #0]
 8002360:	6867      	ldr	r7, [r4, #4]
 8002362:	428f      	cmp	r7, r1
 8002364:	d104      	bne.n	8002370 <inc_lock+0x38>
			Files[i].clu == dp->sclust &&
 8002366:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800236a:	8837      	ldrh	r7, [r6, #0]
 800236c:	45bc      	cmp	ip, r7
 800236e:	d028      	beq.n	80023c2 <inc_lock+0x8a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002370:	3301      	adds	r3, #1
 8002372:	2b02      	cmp	r3, #2
 8002374:	f104 040c 	add.w	r4, r4, #12
 8002378:	d1ee      	bne.n	8002358 <inc_lock+0x20>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800237a:	6813      	ldr	r3, [r2, #0]
 800237c:	b113      	cbz	r3, 8002384 <inc_lock+0x4c>
 800237e:	68d3      	ldr	r3, [r2, #12]
 8002380:	bb53      	cbnz	r3, 80023d8 <inc_lock+0xa0>
 8002382:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8002384:	240c      	movs	r4, #12
 8002386:	435c      	muls	r4, r3
 8002388:	1915      	adds	r5, r2, r4
 800238a:	f842 e004 	str.w	lr, [r2, r4]
		Files[i].clu = dp->sclust;
 800238e:	f241 0408 	movw	r4, #4104	; 0x1008
 8002392:	5904      	ldr	r4, [r0, r4]
 8002394:	606c      	str	r4, [r5, #4]
		Files[i].idx = dp->index;
 8002396:	f241 0406 	movw	r4, #4102	; 0x1006
 800239a:	5b00      	ldrh	r0, [r0, r4]
 800239c:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 800239e:	2000      	movs	r0, #0
 80023a0:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80023a2:	f1b8 0f00 	cmp.w	r8, #0
 80023a6:	d114      	bne.n	80023d2 <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80023a8:	210c      	movs	r1, #12
 80023aa:	fb01 2103 	mla	r1, r1, r3, r2
 80023ae:	8949      	ldrh	r1, [r1, #10]
 80023b0:	3101      	adds	r1, #1
 80023b2:	b289      	uxth	r1, r1
 80023b4:	200c      	movs	r0, #12
 80023b6:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 80023ba:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80023bc:	8151      	strh	r1, [r2, #10]
	return i + 1;
 80023be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80023c2:	f1b8 0f00 	cmp.w	r8, #0
 80023c6:	d0ef      	beq.n	80023a8 <inc_lock+0x70>
 80023c8:	210c      	movs	r1, #12
 80023ca:	fb01 2103 	mla	r1, r1, r3, r2
 80023ce:	8949      	ldrh	r1, [r1, #10]
 80023d0:	b911      	cbnz	r1, 80023d8 <inc_lock+0xa0>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80023d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d6:	e7ed      	b.n	80023b4 <inc_lock+0x7c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80023d8:	2000      	movs	r0, #0
 80023da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023de:	bf00      	nop
 80023e0:	20000028 	.word	0x20000028

080023e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80023e4:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80023e6:	1e45      	subs	r5, r0, #1
 80023e8:	2d01      	cmp	r5, #1
 80023ea:	d811      	bhi.n	8002410 <dec_lock+0x2c>
		n = Files[i].ctr;
 80023ec:	490a      	ldr	r1, [pc, #40]	; (8002418 <dec_lock+0x34>)
 80023ee:	220c      	movs	r2, #12
 80023f0:	fb02 1305 	mla	r3, r2, r5, r1
 80023f4:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 80023f6:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 80023fa:	b298      	uxth	r0, r3
 80023fc:	b108      	cbz	r0, 8002402 <dec_lock+0x1e>
 80023fe:	3c01      	subs	r4, #1
 8002400:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 8002402:	fb02 f305 	mul.w	r3, r2, r5
 8002406:	18ca      	adds	r2, r1, r3
 8002408:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800240a:	b918      	cbnz	r0, 8002414 <dec_lock+0x30>
 800240c:	50c8      	str	r0, [r1, r3]
 800240e:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002410:	2002      	movs	r0, #2
 8002412:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 8002414:	2000      	movs	r0, #0
	}
	return res;
}
 8002416:	bd30      	pop	{r4, r5, pc}
 8002418:	20000028 	.word	0x20000028

0800241c <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800241c:	f241 0324 	movw	r3, #4132	; 0x1024
 8002420:	58c2      	ldr	r2, [r0, r3]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8002422:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002426:	f241 030a 	movw	r3, #4106	; 0x100a
 800242a:	6800      	ldr	r0, [r0, #0]
 800242c:	5ac3      	ldrh	r3, [r0, r3]
 800242e:	fbb1 f1f3 	udiv	r1, r1, r3
 8002432:	f241 0302 	movw	r3, #4098	; 0x1002
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002436:	3204      	adds	r2, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8002438:	5cc3      	ldrb	r3, [r0, r3]
 800243a:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800243e:	6810      	ldr	r0, [r2, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8002440:	b130      	cbz	r0, 8002450 <clmt_clust+0x34>
		if (cl < ncl) break;	/* In this fragment? */
 8002442:	4281      	cmp	r1, r0
 8002444:	d302      	bcc.n	800244c <clmt_clust+0x30>
		cl -= ncl; tbl++;		/* Next fragment */
 8002446:	1a09      	subs	r1, r1, r0
 8002448:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800244a:	e7f8      	b.n	800243e <clmt_clust+0x22>
	}
	return cl + *tbl;	/* Return the cluster number */
 800244c:	6850      	ldr	r0, [r2, #4]
 800244e:	4408      	add	r0, r1
}
 8002450:	4770      	bx	lr

08002452 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002452:	6802      	ldr	r2, [r0, #0]
{
 8002454:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8002456:	b152      	cbz	r2, 800246e <get_ldnumber+0x1c>
 8002458:	4611      	mov	r1, r2
 800245a:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800245c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002460:	2c20      	cmp	r4, #32
 8002462:	d90c      	bls.n	800247e <get_ldnumber+0x2c>
 8002464:	2c3a      	cmp	r4, #58	; 0x3a
 8002466:	d1f8      	bne.n	800245a <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8002468:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800246a:	428b      	cmp	r3, r1
 800246c:	d002      	beq.n	8002474 <get_ldnumber+0x22>
	int vol = -1;
 800246e:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8002472:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002474:	7812      	ldrb	r2, [r2, #0]
 8002476:	2a30      	cmp	r2, #48	; 0x30
 8002478:	d1f9      	bne.n	800246e <get_ldnumber+0x1c>
					*path = ++tt;
 800247a:	3301      	adds	r3, #1
 800247c:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 800247e:	2000      	movs	r0, #0
 8002480:	bd10      	pop	{r4, pc}

08002482 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8002482:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8002484:	b1b8      	cbz	r0, 80024b6 <validate+0x34>
 8002486:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	b19b      	cbz	r3, 80024b6 <validate+0x34>
 800248e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8002492:	7812      	ldrb	r2, [r2, #0]
 8002494:	b17a      	cbz	r2, 80024b6 <validate+0x34>
 8002496:	f241 0206 	movw	r2, #4102	; 0x1006
 800249a:	5a99      	ldrh	r1, [r3, r2]
 800249c:	f241 0204 	movw	r2, #4100	; 0x1004
 80024a0:	5a82      	ldrh	r2, [r0, r2]
 80024a2:	4291      	cmp	r1, r2
 80024a4:	d107      	bne.n	80024b6 <validate+0x34>
 80024a6:	f241 0201 	movw	r2, #4097	; 0x1001
 80024aa:	5c98      	ldrb	r0, [r3, r2]
 80024ac:	f7ff fe5e 	bl	800216c <disk_status>
 80024b0:	f010 0001 	ands.w	r0, r0, #1
 80024b4:	d000      	beq.n	80024b8 <validate+0x36>
		return FR_INVALID_OBJECT;
 80024b6:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 80024b8:	bd08      	pop	{r3, pc}

080024ba <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 80024ba:	7eca      	ldrb	r2, [r1, #27]
 80024bc:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 80024be:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 80024c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80024c4:	bf01      	itttt	eq
 80024c6:	7d48      	ldrbeq	r0, [r1, #21]
 80024c8:	7d0a      	ldrbeq	r2, [r1, #20]
 80024ca:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80024ce:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	4770      	bx	lr

080024d6 <sync_window.part.2>:
FRESULT sync_window (
 80024d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 80024da:	f241 032c 	movw	r3, #4140	; 0x102c
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80024de:	f241 0701 	movw	r7, #4097	; 0x1001
		wsect = fs->winsect;	/* Current sector number */
 80024e2:	58c5      	ldr	r5, [r0, r3]
FRESULT sync_window (
 80024e4:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80024e6:	4601      	mov	r1, r0
 80024e8:	2301      	movs	r3, #1
 80024ea:	462a      	mov	r2, r5
 80024ec:	5dc0      	ldrb	r0, [r0, r7]
 80024ee:	f7ff fe65 	bl	80021bc <disk_write>
 80024f2:	bb08      	cbnz	r0, 8002538 <sync_window.part.2+0x62>
			fs->wflag = 0;
 80024f4:	f241 0304 	movw	r3, #4100	; 0x1004
 80024f8:	54e0      	strb	r0, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80024fa:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	f241 0318 	movw	r3, #4120	; 0x1018
 8002504:	1aaa      	subs	r2, r5, r2
 8002506:	58e1      	ldr	r1, [r4, r3]
 8002508:	428a      	cmp	r2, r1
 800250a:	d302      	bcc.n	8002512 <sync_window.part.2+0x3c>
	FRESULT res = FR_OK;
 800250c:	2000      	movs	r0, #0
 800250e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002512:	f241 0203 	movw	r2, #4099	; 0x1003
					wsect += fs->fsize;
 8002516:	18e6      	adds	r6, r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002518:	f814 8002 	ldrb.w	r8, [r4, r2]
 800251c:	f1b8 0f01 	cmp.w	r8, #1
 8002520:	d9f4      	bls.n	800250c <sync_window.part.2+0x36>
					wsect += fs->fsize;
 8002522:	6833      	ldr	r3, [r6, #0]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002524:	5de0      	ldrb	r0, [r4, r7]
					wsect += fs->fsize;
 8002526:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002528:	462a      	mov	r2, r5
 800252a:	2301      	movs	r3, #1
 800252c:	4621      	mov	r1, r4
 800252e:	f7ff fe45 	bl	80021bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002532:	f108 38ff 	add.w	r8, r8, #4294967295
 8002536:	e7f1      	b.n	800251c <sync_window.part.2+0x46>
			res = FR_DISK_ERR;
 8002538:	2001      	movs	r0, #1
}
 800253a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800253e <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800253e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002542:	5cc3      	ldrb	r3, [r0, r3]
 8002544:	b10b      	cbz	r3, 800254a <sync_window+0xc>
 8002546:	f7ff bfc6 	b.w	80024d6 <sync_window.part.2>
}
 800254a:	4618      	mov	r0, r3
 800254c:	4770      	bx	lr

0800254e <sync_fs>:
{
 800254e:	b570      	push	{r4, r5, r6, lr}
 8002550:	4604      	mov	r4, r0
	res = sync_window(fs);
 8002552:	f7ff fff4 	bl	800253e <sync_window>
 8002556:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8002558:	2800      	cmp	r0, #0
 800255a:	d15c      	bne.n	8002616 <sync_fs+0xc8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800255c:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b03      	cmp	r3, #3
 8002564:	d14d      	bne.n	8002602 <sync_fs+0xb4>
 8002566:	f241 0605 	movw	r6, #4101	; 0x1005
 800256a:	5da3      	ldrb	r3, [r4, r6]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d148      	bne.n	8002602 <sync_fs+0xb4>
			mem_set(fs->win.d8, 0, SS(fs));
 8002570:	f241 020a 	movw	r2, #4106	; 0x100a
 8002574:	4601      	mov	r1, r0
 8002576:	5aa2      	ldrh	r2, [r4, r2]
 8002578:	4620      	mov	r0, r4
 800257a:	f7ff fe9f 	bl	80022bc <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800257e:	2255      	movs	r2, #85	; 0x55
 8002580:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 8002584:	22aa      	movs	r2, #170	; 0xaa
 8002586:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800258a:	2252      	movs	r2, #82	; 0x52
 800258c:	7022      	strb	r2, [r4, #0]
 800258e:	7062      	strb	r2, [r4, #1]
 8002590:	2261      	movs	r2, #97	; 0x61
 8002592:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8002594:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8002598:	2141      	movs	r1, #65	; 0x41
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800259a:	2072      	movs	r0, #114	; 0x72
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800259c:	f241 0210 	movw	r2, #4112	; 0x1010
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80025a0:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80025a2:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 80025a6:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
 80025aa:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80025ae:	58a2      	ldr	r2, [r4, r2]
 80025b0:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
 80025b4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80025b8:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 80025bc:	0c11      	lsrs	r1, r2, #16
 80025be:	0e12      	lsrs	r2, r2, #24
 80025c0:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80025c4:	f241 020c 	movw	r2, #4108	; 0x100c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80025c8:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80025cc:	58a2      	ldr	r2, [r4, r2]
 80025ce:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 80025d2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80025d6:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 80025da:	0c11      	lsrs	r1, r2, #16
 80025dc:	0e12      	lsrs	r2, r2, #24
 80025de:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 80025e2:	f241 021c 	movw	r2, #4124	; 0x101c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80025e6:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			fs->winsect = fs->volbase + 1;
 80025ea:	58a2      	ldr	r2, [r4, r2]
 80025ec:	f241 012c 	movw	r1, #4140	; 0x102c
 80025f0:	3201      	adds	r2, #1
 80025f2:	5062      	str	r2, [r4, r1]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80025f4:	f241 0001 	movw	r0, #4097	; 0x1001
 80025f8:	4621      	mov	r1, r4
 80025fa:	5c20      	ldrb	r0, [r4, r0]
 80025fc:	f7ff fdde 	bl	80021bc <disk_write>
			fs->fsi_flag = 0;
 8002600:	55a5      	strb	r5, [r4, r6]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8002602:	f241 0301 	movw	r3, #4097	; 0x1001
 8002606:	2200      	movs	r2, #0
 8002608:	4611      	mov	r1, r2
 800260a:	5ce0      	ldrb	r0, [r4, r3]
 800260c:	f7ff fde4 	bl	80021d8 <disk_ioctl>
 8002610:	3000      	adds	r0, #0
 8002612:	bf18      	it	ne
 8002614:	2001      	movne	r0, #1
}
 8002616:	bd70      	pop	{r4, r5, r6, pc}

08002618 <move_window>:
{
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800261a:	f241 072c 	movw	r7, #4140	; 0x102c
{
 800261e:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002620:	59c3      	ldr	r3, [r0, r7]
 8002622:	428b      	cmp	r3, r1
{
 8002624:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002626:	d014      	beq.n	8002652 <move_window+0x3a>
		res = sync_window(fs);		/* Write-back changes */
 8002628:	f7ff ff89 	bl	800253e <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800262c:	4604      	mov	r4, r0
 800262e:	b970      	cbnz	r0, 800264e <move_window+0x36>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8002630:	f241 0001 	movw	r0, #4097	; 0x1001
 8002634:	462a      	mov	r2, r5
 8002636:	2301      	movs	r3, #1
 8002638:	4631      	mov	r1, r6
 800263a:	5c30      	ldrb	r0, [r6, r0]
 800263c:	f7ff fdb0 	bl	80021a0 <disk_read>
 8002640:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8002642:	bf18      	it	ne
 8002644:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 8002648:	51f5      	str	r5, [r6, r7]
				res = FR_DISK_ERR;
 800264a:	bf18      	it	ne
 800264c:	2401      	movne	r4, #1
}
 800264e:	4620      	mov	r0, r4
 8002650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FRESULT res = FR_OK;
 8002652:	2400      	movs	r4, #0
 8002654:	e7fb      	b.n	800264e <move_window+0x36>
	...

08002658 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8002658:	f241 0304 	movw	r3, #4100	; 0x1004
 800265c:	2200      	movs	r2, #0
{
 800265e:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8002660:	54c2      	strb	r2, [r0, r3]
 8002662:	f241 032c 	movw	r3, #4140	; 0x102c
 8002666:	f04f 32ff 	mov.w	r2, #4294967295
 800266a:	50c2      	str	r2, [r0, r3]
{
 800266c:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800266e:	f7ff ffd3 	bl	8002618 <move_window>
 8002672:	b9c0      	cbnz	r0, 80026a6 <check_fs+0x4e>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8002674:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8002678:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 800267c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002680:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8002684:	4293      	cmp	r3, r2
 8002686:	d110      	bne.n	80026aa <check_fs+0x52>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8002688:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 800268c:	4a08      	ldr	r2, [pc, #32]	; (80026b0 <check_fs+0x58>)
 800268e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002692:	4293      	cmp	r3, r2
 8002694:	d00a      	beq.n	80026ac <check_fs+0x54>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8002696:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 800269a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 800269e:	1a80      	subs	r0, r0, r2
 80026a0:	bf18      	it	ne
 80026a2:	2001      	movne	r0, #1
 80026a4:	bd10      	pop	{r4, pc}
 80026a6:	2003      	movs	r0, #3
 80026a8:	bd10      	pop	{r4, pc}
		return 2;
 80026aa:	2002      	movs	r0, #2
}
 80026ac:	bd10      	pop	{r4, pc}
 80026ae:	bf00      	nop
 80026b0:	00544146 	.word	0x00544146

080026b4 <find_volume>:
{
 80026b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	*rfs = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	6003      	str	r3, [r0, #0]
{
 80026bc:	4606      	mov	r6, r0
	vol = get_ldnumber(path);
 80026be:	4608      	mov	r0, r1
{
 80026c0:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80026c2:	f7ff fec6 	bl	8002452 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80026c6:	1e07      	subs	r7, r0, #0
 80026c8:	f2c0 8166 	blt.w	8002998 <find_volume+0x2e4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80026cc:	4bb6      	ldr	r3, [pc, #728]	; (80029a8 <find_volume+0x2f4>)
 80026ce:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80026d2:	2c00      	cmp	r4, #0
 80026d4:	f000 8162 	beq.w	800299c <find_volume+0x2e8>
	*rfs = fs;							/* Return pointer to the file system object */
 80026d8:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80026da:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
 80026de:	7833      	ldrb	r3, [r6, #0]
 80026e0:	b183      	cbz	r3, 8002704 <find_volume+0x50>
		stat = disk_status(fs->drv);
 80026e2:	f241 0301 	movw	r3, #4097	; 0x1001
 80026e6:	5ce0      	ldrb	r0, [r4, r3]
 80026e8:	f7ff fd40 	bl	800216c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80026ec:	07c1      	lsls	r1, r0, #31
 80026ee:	d409      	bmi.n	8002704 <find_volume+0x50>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80026f0:	2d00      	cmp	r5, #0
 80026f2:	f000 8155 	beq.w	80029a0 <find_volume+0x2ec>
 80026f6:	f010 0004 	ands.w	r0, r0, #4
 80026fa:	d000      	beq.n	80026fe <find_volume+0x4a>
				return FR_WRITE_PROTECTED;
 80026fc:	200a      	movs	r0, #10
}
 80026fe:	b004      	add	sp, #16
 8002700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8002704:	2300      	movs	r3, #0
 8002706:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002708:	f241 0301 	movw	r3, #4097	; 0x1001
 800270c:	b2f8      	uxtb	r0, r7
 800270e:	54e0      	strb	r0, [r4, r3]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002710:	f7ff fd36 	bl	8002180 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8002714:	07c2      	lsls	r2, r0, #31
 8002716:	f100 8145 	bmi.w	80029a4 <find_volume+0x2f0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800271a:	b10d      	cbz	r5, 8002720 <find_volume+0x6c>
 800271c:	0743      	lsls	r3, r0, #29
 800271e:	d4ed      	bmi.n	80026fc <find_volume+0x48>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8002720:	f241 0301 	movw	r3, #4097	; 0x1001
 8002724:	f241 050a 	movw	r5, #4106	; 0x100a
 8002728:	1962      	adds	r2, r4, r5
 800272a:	2102      	movs	r1, #2
 800272c:	5ce0      	ldrb	r0, [r4, r3]
 800272e:	f7ff fd53 	bl	80021d8 <disk_ioctl>
 8002732:	4607      	mov	r7, r0
 8002734:	b108      	cbz	r0, 800273a <find_volume+0x86>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8002736:	2001      	movs	r0, #1
 8002738:	e7e1      	b.n	80026fe <find_volume+0x4a>
 800273a:	5b63      	ldrh	r3, [r4, r5]
 800273c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002740:	b29b      	uxth	r3, r3
 8002742:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8002746:	d8f6      	bhi.n	8002736 <find_volume+0x82>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8002748:	4601      	mov	r1, r0
 800274a:	4620      	mov	r0, r4
 800274c:	f7ff ff84 	bl	8002658 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8002750:	2801      	cmp	r0, #1
 8002752:	f040 8103 	bne.w	800295c <find_volume+0x2a8>
 8002756:	f504 72e3 	add.w	r2, r4, #454	; 0x1c6
 800275a:	4638      	mov	r0, r7
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800275c:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 8002760:	b103      	cbz	r3, 8002764 <find_volume+0xb0>
 8002762:	6813      	ldr	r3, [r2, #0]
 8002764:	f84d 3020 	str.w	r3, [sp, r0, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8002768:	3001      	adds	r0, #1
 800276a:	2804      	cmp	r0, #4
 800276c:	f102 0210 	add.w	r2, r2, #16
 8002770:	d1f4      	bne.n	800275c <find_volume+0xa8>
 8002772:	2700      	movs	r7, #0
			bsect = br[i];
 8002774:	f85d 5027 	ldr.w	r5, [sp, r7, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002778:	2d00      	cmp	r5, #0
 800277a:	f000 80e7 	beq.w	800294c <find_volume+0x298>
 800277e:	4629      	mov	r1, r5
 8002780:	4620      	mov	r0, r4
 8002782:	f7ff ff69 	bl	8002658 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8002786:	2800      	cmp	r0, #0
 8002788:	f040 80e1 	bne.w	800294e <find_volume+0x29a>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800278c:	7b23      	ldrb	r3, [r4, #12]
 800278e:	7ae0      	ldrb	r0, [r4, #11]
 8002790:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002794:	f241 030a 	movw	r3, #4106	; 0x100a
 8002798:	5ae3      	ldrh	r3, [r4, r3]
 800279a:	4283      	cmp	r3, r0
 800279c:	f040 80e2 	bne.w	8002964 <find_volume+0x2b0>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80027a0:	7de3      	ldrb	r3, [r4, #23]
 80027a2:	7da1      	ldrb	r1, [r4, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80027a4:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	fs->fsize = fasize;
 80027a8:	f241 0318 	movw	r3, #4120	; 0x1018
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80027ac:	bf08      	it	eq
 80027ae:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 80027b0:	50e1      	str	r1, [r4, r3]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80027b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80027b6:	f894 e010 	ldrb.w	lr, [r4, #16]
 80027ba:	f804 e003 	strb.w	lr, [r4, r3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80027be:	f10e 33ff 	add.w	r3, lr, #4294967295
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	f200 80ce 	bhi.w	8002964 <find_volume+0x2b0>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80027c8:	f894 900d 	ldrb.w	r9, [r4, #13]
 80027cc:	f241 0302 	movw	r3, #4098	; 0x1002
 80027d0:	f804 9003 	strb.w	r9, [r4, r3]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80027d4:	f1b9 0f00 	cmp.w	r9, #0
 80027d8:	f000 80c4 	beq.w	8002964 <find_volume+0x2b0>
 80027dc:	f109 33ff 	add.w	r3, r9, #4294967295
 80027e0:	ea13 0f09 	tst.w	r3, r9
 80027e4:	f040 80be 	bne.w	8002964 <find_volume+0x2b0>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80027e8:	7ca3      	ldrb	r3, [r4, #18]
 80027ea:	f894 8011 	ldrb.w	r8, [r4, #17]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80027ee:	0947      	lsrs	r7, r0, #5
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80027f0:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
 80027f4:	f241 0308 	movw	r3, #4104	; 0x1008
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80027f8:	fbb8 f2f7 	udiv	r2, r8, r7
 80027fc:	fb07 8712 	mls	r7, r7, r2, r8
 8002800:	b2bf      	uxth	r7, r7
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8002802:	f824 8003 	strh.w	r8, [r4, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8002806:	2f00      	cmp	r7, #0
 8002808:	f040 80ac 	bne.w	8002964 <find_volume+0x2b0>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800280c:	7d27      	ldrb	r7, [r4, #20]
 800280e:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8002810:	f894 c00e 	ldrb.w	ip, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8002814:	ea53 2307 	orrs.w	r3, r3, r7, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8002818:	7be7      	ldrb	r7, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800281a:	bf08      	it	eq
 800281c:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800281e:	ea5c 2c07 	orrs.w	ip, ip, r7, lsl #8
 8002822:	f000 809f 	beq.w	8002964 <find_volume+0x2b0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8002826:	fb01 fe0e 	mul.w	lr, r1, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800282a:	fa1c f282 	uxtah	r2, ip, r2
 800282e:	4472      	add	r2, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002830:	4293      	cmp	r3, r2
 8002832:	f0c0 8097 	bcc.w	8002964 <find_volume+0x2b0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	fbb3 f3f9 	udiv	r3, r3, r9
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8091 	beq.w	8002964 <find_volume+0x2b0>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002842:	f640 77f5 	movw	r7, #4085	; 0xff5
 8002846:	42bb      	cmp	r3, r7
 8002848:	f240 8090 	bls.w	800296c <find_volume+0x2b8>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800284c:	f64f 77f5 	movw	r7, #65525	; 0xfff5
 8002850:	42bb      	cmp	r3, r7
 8002852:	bf94      	ite	ls
 8002854:	2702      	movls	r7, #2
 8002856:	2703      	movhi	r7, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002858:	f241 0914 	movw	r9, #4116	; 0x1014
 800285c:	3302      	adds	r3, #2
 800285e:	f844 3009 	str.w	r3, [r4, r9]
	fs->volbase = bsect;								/* Volume start sector */
 8002862:	f241 091c 	movw	r9, #4124	; 0x101c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002866:	44ac      	add	ip, r5
	fs->volbase = bsect;								/* Volume start sector */
 8002868:	f844 5009 	str.w	r5, [r4, r9]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800286c:	f504 5981 	add.w	r9, r4, #4128	; 0x1020
	fs->database = bsect + sysect;						/* Data start sector */
 8002870:	442a      	add	r2, r5
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002872:	f8c9 c000 	str.w	ip, [r9]
	fs->database = bsect + sysect;						/* Data start sector */
 8002876:	f241 0928 	movw	r9, #4136	; 0x1028
	if (fmt == FS_FAT32) {
 800287a:	2f03      	cmp	r7, #3
	fs->database = bsect + sysect;						/* Data start sector */
 800287c:	f844 2009 	str.w	r2, [r4, r9]
	if (fmt == FS_FAT32) {
 8002880:	d176      	bne.n	8002970 <find_volume+0x2bc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8002882:	f1b8 0f00 	cmp.w	r8, #0
 8002886:	d16d      	bne.n	8002964 <find_volume+0x2b0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8002888:	f241 0e24 	movw	lr, #4132	; 0x1024
 800288c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800288e:	f844 200e 	str.w	r2, [r4, lr]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8002892:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8002894:	1e42      	subs	r2, r0, #1
 8002896:	4413      	add	r3, r2
 8002898:	fbb3 f0f0 	udiv	r0, r3, r0
 800289c:	4281      	cmp	r1, r0
 800289e:	d361      	bcc.n	8002964 <find_volume+0x2b0>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80028a0:	f241 0910 	movw	r9, #4112	; 0x1010
 80028a4:	f241 080c 	movw	r8, #4108	; 0x100c
 80028a8:	f04f 33ff 	mov.w	r3, #4294967295
	fs->fsi_flag = 0x80;
 80028ac:	f241 0a05 	movw	sl, #4101	; 0x1005
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80028b0:	f844 3009 	str.w	r3, [r4, r9]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80028b4:	2f03      	cmp	r7, #3
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80028b6:	f844 3008 	str.w	r3, [r4, r8]
	fs->fsi_flag = 0x80;
 80028ba:	f04f 0380 	mov.w	r3, #128	; 0x80
 80028be:	f804 300a 	strb.w	r3, [r4, sl]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80028c2:	d12d      	bne.n	8002920 <find_volume+0x26c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80028c4:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80028c8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80028cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d125      	bne.n	8002920 <find_volume+0x26c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80028d4:	1c69      	adds	r1, r5, #1
 80028d6:	4620      	mov	r0, r4
 80028d8:	f7ff fe9e 	bl	8002618 <move_window>
 80028dc:	bb00      	cbnz	r0, 8002920 <find_volume+0x26c>
		fs->fsi_flag = 0;
 80028de:	f804 000a 	strb.w	r0, [r4, sl]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80028e2:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 80028e6:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 80028ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80028ee:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d114      	bne.n	8002920 <find_volume+0x26c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80028f6:	6822      	ldr	r2, [r4, #0]
 80028f8:	4b2c      	ldr	r3, [pc, #176]	; (80029ac <find_volume+0x2f8>)
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d110      	bne.n	8002920 <find_volume+0x26c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80028fe:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8002902:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8002906:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800290a:	3320      	adds	r3, #32
 800290c:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800290e:	bf01      	itttt	eq
 8002910:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 8002914:	f844 3009 	streq.w	r3, [r4, r9]
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8002918:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 800291c:	f844 3008 	streq.w	r3, [r4, r8]
	fs->id = ++Fsid;	/* File system mount ID */
 8002920:	4a23      	ldr	r2, [pc, #140]	; (80029b0 <find_volume+0x2fc>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8002922:	7037      	strb	r7, [r6, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8002924:	8813      	ldrh	r3, [r2, #0]
 8002926:	3301      	adds	r3, #1
 8002928:	b29b      	uxth	r3, r3
 800292a:	8013      	strh	r3, [r2, #0]
 800292c:	f241 0206 	movw	r2, #4102	; 0x1006
 8002930:	2000      	movs	r0, #0
 8002932:	52a3      	strh	r3, [r4, r2]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002934:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <find_volume+0x300>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4294      	cmp	r4, r2
 800293a:	bf04      	itt	eq
 800293c:	2200      	moveq	r2, #0
 800293e:	601a      	streq	r2, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	4294      	cmp	r4, r2
 8002944:	f47f aedb 	bne.w	80026fe <find_volume+0x4a>
 8002948:	60d8      	str	r0, [r3, #12]
 800294a:	e6d8      	b.n	80026fe <find_volume+0x4a>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800294c:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800294e:	3701      	adds	r7, #1
 8002950:	2f04      	cmp	r7, #4
 8002952:	f47f af0f 	bne.w	8002774 <find_volume+0xc0>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002956:	2803      	cmp	r0, #3
 8002958:	d104      	bne.n	8002964 <find_volume+0x2b0>
 800295a:	e6ec      	b.n	8002736 <find_volume+0x82>
 800295c:	2803      	cmp	r0, #3
 800295e:	f43f aeea 	beq.w	8002736 <find_volume+0x82>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8002962:	b108      	cbz	r0, 8002968 <find_volume+0x2b4>
 8002964:	200d      	movs	r0, #13
 8002966:	e6ca      	b.n	80026fe <find_volume+0x4a>
	bsect = 0;
 8002968:	4605      	mov	r5, r0
 800296a:	e70f      	b.n	800278c <find_volume+0xd8>
	fmt = FS_FAT12;
 800296c:	2701      	movs	r7, #1
 800296e:	e773      	b.n	8002858 <find_volume+0x1a4>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002970:	f1b8 0f00 	cmp.w	r8, #0
 8002974:	d0f6      	beq.n	8002964 <find_volume+0x2b0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002976:	eb0e 020c 	add.w	r2, lr, ip
 800297a:	f241 0e24 	movw	lr, #4132	; 0x1024
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800297e:	2f02      	cmp	r7, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002980:	f844 200e 	str.w	r2, [r4, lr]
 8002984:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002988:	bf1b      	ittet	ne
 800298a:	18d2      	addne	r2, r2, r3
 800298c:	f003 0301 	andne.w	r3, r3, #1
 8002990:	4613      	moveq	r3, r2
 8002992:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8002996:	e77d      	b.n	8002894 <find_volume+0x1e0>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002998:	200b      	movs	r0, #11
 800299a:	e6b0      	b.n	80026fe <find_volume+0x4a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800299c:	200c      	movs	r0, #12
 800299e:	e6ae      	b.n	80026fe <find_volume+0x4a>
			return FR_OK;				/* The file system object is valid */
 80029a0:	4628      	mov	r0, r5
 80029a2:	e6ac      	b.n	80026fe <find_volume+0x4a>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80029a4:	2003      	movs	r0, #3
 80029a6:	e6aa      	b.n	80026fe <find_volume+0x4a>
 80029a8:	20000024 	.word	0x20000024
 80029ac:	41615252 	.word	0x41615252
 80029b0:	20000040 	.word	0x20000040
 80029b4:	20000028 	.word	0x20000028

080029b8 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80029b8:	f241 0314 	movw	r3, #4116	; 0x1014
	clst -= 2;
 80029bc:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80029be:	58c3      	ldr	r3, [r0, r3]
 80029c0:	3b02      	subs	r3, #2
 80029c2:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 80029c4:	bf3f      	itttt	cc
 80029c6:	f241 0302 	movwcc	r3, #4098	; 0x1002
 80029ca:	f241 0228 	movwcc	r2, #4136	; 0x1028
 80029ce:	5cc3      	ldrbcc	r3, [r0, r3]
 80029d0:	5880      	ldrcc	r0, [r0, r2]
 80029d2:	bf34      	ite	cc
 80029d4:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80029d8:	2000      	movcs	r0, #0
}
 80029da:	4770      	bx	lr

080029dc <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80029dc:	2901      	cmp	r1, #1
{
 80029de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029e2:	4605      	mov	r5, r0
 80029e4:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80029e6:	f240 8082 	bls.w	8002aee <get_fat+0x112>
 80029ea:	f241 0314 	movw	r3, #4116	; 0x1014
 80029ee:	58c3      	ldr	r3, [r0, r3]
 80029f0:	4299      	cmp	r1, r3
 80029f2:	d27c      	bcs.n	8002aee <get_fat+0x112>
		switch (fs->fs_type) {
 80029f4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d039      	beq.n	8002a72 <get_fat+0x96>
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d052      	beq.n	8002aa8 <get_fat+0xcc>
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d173      	bne.n	8002aee <get_fat+0x112>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a06:	f500 5981 	add.w	r9, r0, #4128	; 0x1020
			bc = (UINT)clst; bc += bc / 2;
 8002a0a:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a0e:	f241 080a 	movw	r8, #4106	; 0x100a
 8002a12:	f8d9 1000 	ldr.w	r1, [r9]
 8002a16:	f830 3008 	ldrh.w	r3, [r0, r8]
 8002a1a:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a1e:	4419      	add	r1, r3
 8002a20:	f7ff fdfa 	bl	8002618 <move_window>
 8002a24:	b118      	cbz	r0, 8002a2e <get_fat+0x52>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002a26:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			wc = fs->win.d8[bc++ % SS(fs)];
 8002a2e:	f835 1008 	ldrh.w	r1, [r5, r8]
 8002a32:	fbb4 f3f1 	udiv	r3, r4, r1
 8002a36:	1c67      	adds	r7, r4, #1
 8002a38:	fb01 4413 	mls	r4, r1, r3, r4
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a3c:	f8d9 3000 	ldr.w	r3, [r9]
 8002a40:	fbb7 f1f1 	udiv	r1, r7, r1
 8002a44:	4628      	mov	r0, r5
 8002a46:	4419      	add	r1, r3
			wc = fs->win.d8[bc++ % SS(fs)];
 8002a48:	5d2c      	ldrb	r4, [r5, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a4a:	f7ff fde5 	bl	8002618 <move_window>
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d1e9      	bne.n	8002a26 <get_fat+0x4a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8002a52:	f835 2008 	ldrh.w	r2, [r5, r8]
 8002a56:	fbb7 f3f2 	udiv	r3, r7, r2
 8002a5a:	fb02 7313 	mls	r3, r2, r3, r7
 8002a5e:	5ce8      	ldrb	r0, [r5, r3]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8002a60:	07f3      	lsls	r3, r6, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8002a62:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8002a66:	bf4c      	ite	mi
 8002a68:	0900      	lsrmi	r0, r0, #4
 8002a6a:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8002a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002a72:	f241 040a 	movw	r4, #4106	; 0x100a
 8002a76:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8002a7a:	5b03      	ldrh	r3, [r0, r4]
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a82:	6811      	ldr	r1, [r2, #0]
 8002a84:	4419      	add	r1, r3
 8002a86:	f7ff fdc7 	bl	8002618 <move_window>
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	d1cb      	bne.n	8002a26 <get_fat+0x4a>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8002a8e:	5b2a      	ldrh	r2, [r5, r4]
 8002a90:	0076      	lsls	r6, r6, #1
 8002a92:	fbb6 f3f2 	udiv	r3, r6, r2
 8002a96:	fb02 6613 	mls	r6, r2, r3, r6
			val = LD_WORD(p);
 8002a9a:	19ab      	adds	r3, r5, r6
 8002a9c:	5da8      	ldrb	r0, [r5, r6]
 8002a9e:	785b      	ldrb	r3, [r3, #1]
 8002aa0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002aa8:	f241 040a 	movw	r4, #4106	; 0x100a
 8002aac:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8002ab0:	5b03      	ldrh	r3, [r0, r4]
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab8:	6811      	ldr	r1, [r2, #0]
 8002aba:	4419      	add	r1, r3
 8002abc:	f7ff fdac 	bl	8002618 <move_window>
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	d1b0      	bne.n	8002a26 <get_fat+0x4a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8002ac4:	5b2a      	ldrh	r2, [r5, r4]
 8002ac6:	00b6      	lsls	r6, r6, #2
 8002ac8:	fbb6 f3f2 	udiv	r3, r6, r2
 8002acc:	fb02 6613 	mls	r6, r2, r3, r6
 8002ad0:	19ab      	adds	r3, r5, r6
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8002ad2:	7898      	ldrb	r0, [r3, #2]
 8002ad4:	78da      	ldrb	r2, [r3, #3]
 8002ad6:	785b      	ldrb	r3, [r3, #1]
 8002ad8:	0400      	lsls	r0, r0, #16
 8002ada:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8002ade:	5daa      	ldrb	r2, [r5, r6]
 8002ae0:	4310      	orrs	r0, r2
 8002ae2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002ae6:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8002aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			val = 1;	/* Internal error */
 8002aee:	2001      	movs	r0, #1
}
 8002af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002af4 <dir_sdi>:
{
 8002af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	dp->index = (WORD)idx;	/* Current index */
 8002af8:	f241 0306 	movw	r3, #4102	; 0x1006
{
 8002afc:	4606      	mov	r6, r0
 8002afe:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 8002b00:	52f1      	strh	r1, [r6, r3]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8002b02:	f241 0308 	movw	r3, #4104	; 0x1008
 8002b06:	58c4      	ldr	r4, [r0, r3]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8002b08:	2c01      	cmp	r4, #1
 8002b0a:	d102      	bne.n	8002b12 <dir_sdi+0x1e>
		return FR_INT_ERR;
 8002b0c:	2002      	movs	r0, #2
 8002b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8002b12:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
 8002b16:	f241 0214 	movw	r2, #4116	; 0x1014
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	589a      	ldr	r2, [r3, r2]
 8002b1e:	4294      	cmp	r4, r2
 8002b20:	d2f4      	bcs.n	8002b0c <dir_sdi+0x18>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8002b22:	bb54      	cbnz	r4, 8002b7a <dir_sdi+0x86>
 8002b24:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8002b28:	7812      	ldrb	r2, [r2, #0]
 8002b2a:	2a03      	cmp	r2, #3
 8002b2c:	d103      	bne.n	8002b36 <dir_sdi+0x42>
		clst = dp->fs->dirbase;
 8002b2e:	f241 0224 	movw	r2, #4132	; 0x1024
 8002b32:	589a      	ldr	r2, [r3, r2]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002b34:	bb12      	cbnz	r2, 8002b7c <dir_sdi+0x88>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8002b36:	f241 0208 	movw	r2, #4104	; 0x1008
 8002b3a:	5a9a      	ldrh	r2, [r3, r2]
 8002b3c:	4295      	cmp	r5, r2
 8002b3e:	d2e5      	bcs.n	8002b0c <dir_sdi+0x18>
		sect = dp->fs->dirbase;
 8002b40:	f241 0224 	movw	r2, #4132	; 0x1024
 8002b44:	5898      	ldr	r0, [r3, r2]
	dp->clust = clst;	/* Current cluster# */
 8002b46:	f241 030c 	movw	r3, #4108	; 0x100c
 8002b4a:	50f4      	str	r4, [r6, r3]
	if (!sect) return FR_INT_ERR;
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	d0dd      	beq.n	8002b0c <dir_sdi+0x18>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	f241 020a 	movw	r2, #4106	; 0x100a
 8002b56:	f241 0410 	movw	r4, #4112	; 0x1010
 8002b5a:	5a99      	ldrh	r1, [r3, r2]
 8002b5c:	0949      	lsrs	r1, r1, #5
 8002b5e:	fbb5 f2f1 	udiv	r2, r5, r1
 8002b62:	4410      	add	r0, r2
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8002b64:	fb01 5512 	mls	r5, r1, r2, r5
 8002b68:	f241 0214 	movw	r2, #4116	; 0x1014
 8002b6c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8002b70:	5130      	str	r0, [r6, r4]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8002b72:	50b3      	str	r3, [r6, r2]
	return FR_OK;
 8002b74:	2000      	movs	r0, #0
 8002b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b7a:	4622      	mov	r2, r4
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8002b7c:	f241 010a 	movw	r1, #4106	; 0x100a
 8002b80:	f241 0002 	movw	r0, #4098	; 0x1002
 8002b84:	f833 8001 	ldrh.w	r8, [r3, r1]
 8002b88:	ea4f 1158 	mov.w	r1, r8, lsr #5
 8002b8c:	f813 8000 	ldrb.w	r8, [r3, r0]
		while (idx >= ic) {	/* Follow cluster chain */
 8002b90:	4614      	mov	r4, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8002b92:	fb08 f801 	mul.w	r8, r8, r1
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8002b96:	f241 0914 	movw	r9, #4116	; 0x1014
		while (idx >= ic) {	/* Follow cluster chain */
 8002b9a:	4545      	cmp	r5, r8
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	6838      	ldr	r0, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8002ba0:	d202      	bcs.n	8002ba8 <dir_sdi+0xb4>
		sect = clust2sect(dp->fs, clst);
 8002ba2:	f7ff ff09 	bl	80029b8 <clust2sect>
 8002ba6:	e7ce      	b.n	8002b46 <dir_sdi+0x52>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002ba8:	f7ff ff18 	bl	80029dc <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002bac:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002bae:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002bb0:	d009      	beq.n	8002bc6 <dir_sdi+0xd2>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8002bb2:	2801      	cmp	r0, #1
 8002bb4:	d9aa      	bls.n	8002b0c <dir_sdi+0x18>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f853 3009 	ldr.w	r3, [r3, r9]
 8002bbc:	4298      	cmp	r0, r3
 8002bbe:	d2a5      	bcs.n	8002b0c <dir_sdi+0x18>
			idx -= ic;
 8002bc0:	eba5 0508 	sub.w	r5, r5, r8
 8002bc4:	e7e9      	b.n	8002b9a <dir_sdi+0xa6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002bc6:	2001      	movs	r0, #1
}
 8002bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002bcc <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002bcc:	2901      	cmp	r1, #1
{
 8002bce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	460d      	mov	r5, r1
 8002bd6:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002bd8:	f240 8098 	bls.w	8002d0c <put_fat+0x140>
 8002bdc:	f241 0314 	movw	r3, #4116	; 0x1014
 8002be0:	58c3      	ldr	r3, [r0, r3]
 8002be2:	4299      	cmp	r1, r3
 8002be4:	f080 8092 	bcs.w	8002d0c <put_fat+0x140>
		switch (fs->fs_type) {
 8002be8:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d050      	beq.n	8002c94 <put_fat+0xc8>
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d067      	beq.n	8002cc6 <put_fat+0xfa>
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	f040 8088 	bne.w	8002d0c <put_fat+0x140>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002bfc:	f500 5881 	add.w	r8, r0, #4128	; 0x1020
			bc = (UINT)clst; bc += bc / 2;
 8002c00:	eb01 0951 	add.w	r9, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002c04:	f241 0a0a 	movw	sl, #4106	; 0x100a
 8002c08:	f8d8 1000 	ldr.w	r1, [r8]
 8002c0c:	f830 300a 	ldrh.w	r3, [r0, sl]
 8002c10:	fbb9 f3f3 	udiv	r3, r9, r3
 8002c14:	4419      	add	r1, r3
 8002c16:	f7ff fcff 	bl	8002618 <move_window>
			if (res != FR_OK) break;
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	d177      	bne.n	8002d0e <put_fat+0x142>
			p = &fs->win.d8[bc++ % SS(fs)];
 8002c1e:	f834 100a 	ldrh.w	r1, [r4, sl]
 8002c22:	fbb9 f2f1 	udiv	r2, r9, r1
 8002c26:	fb01 9212 	mls	r2, r1, r2, r9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002c2a:	f015 0501 	ands.w	r5, r5, #1
 8002c2e:	bf1f      	itttt	ne
 8002c30:	5ca3      	ldrbne	r3, [r4, r2]
 8002c32:	f003 000f 	andne.w	r0, r3, #15
 8002c36:	0133      	lslne	r3, r6, #4
 8002c38:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8002c3c:	bf14      	ite	ne
 8002c3e:	4303      	orrne	r3, r0
 8002c40:	b2f3      	uxtbeq	r3, r6
 8002c42:	54a3      	strb	r3, [r4, r2]
			fs->wflag = 1;
 8002c44:	f241 0304 	movw	r3, #4100	; 0x1004
 8002c48:	2201      	movs	r2, #1
 8002c4a:	54e2      	strb	r2, [r4, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002c4c:	f8d8 3000 	ldr.w	r3, [r8]
			p = &fs->win.d8[bc++ % SS(fs)];
 8002c50:	f109 0701 	add.w	r7, r9, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002c54:	4620      	mov	r0, r4
 8002c56:	fbb7 f1f1 	udiv	r1, r7, r1
 8002c5a:	4419      	add	r1, r3
 8002c5c:	f7ff fcdc 	bl	8002618 <move_window>
			if (res != FR_OK) break;
 8002c60:	2800      	cmp	r0, #0
 8002c62:	d154      	bne.n	8002d0e <put_fat+0x142>
			p = &fs->win.d8[bc % SS(fs)];
 8002c64:	f241 030a 	movw	r3, #4106	; 0x100a
 8002c68:	5ae2      	ldrh	r2, [r4, r3]
 8002c6a:	fbb7 f3f2 	udiv	r3, r7, r2
 8002c6e:	fb02 7713 	mls	r7, r2, r3, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002c72:	b145      	cbz	r5, 8002c86 <put_fat+0xba>
 8002c74:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8002c78:	55e2      	strb	r2, [r4, r7]
			fs->wflag = 1;
 8002c7a:	f241 0304 	movw	r3, #4100	; 0x1004
 8002c7e:	2201      	movs	r2, #1
 8002c80:	54e2      	strb	r2, [r4, r3]
 8002c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002c86:	5de2      	ldrb	r2, [r4, r7]
 8002c88:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8002c8c:	f022 020f 	bic.w	r2, r2, #15
 8002c90:	4332      	orrs	r2, r6
 8002c92:	e7f1      	b.n	8002c78 <put_fat+0xac>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002c94:	f241 070a 	movw	r7, #4106	; 0x100a
 8002c98:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8002c9c:	5bc3      	ldrh	r3, [r0, r7]
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca4:	6811      	ldr	r1, [r2, #0]
 8002ca6:	4419      	add	r1, r3
 8002ca8:	f7ff fcb6 	bl	8002618 <move_window>
			if (res != FR_OK) break;
 8002cac:	bb78      	cbnz	r0, 8002d0e <put_fat+0x142>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8002cae:	5be2      	ldrh	r2, [r4, r7]
 8002cb0:	006d      	lsls	r5, r5, #1
 8002cb2:	fbb5 f3f2 	udiv	r3, r5, r2
 8002cb6:	fb02 5513 	mls	r5, r2, r3, r5
			ST_WORD(p, (WORD)val);
 8002cba:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8002cbe:	5566      	strb	r6, [r4, r5]
 8002cc0:	4425      	add	r5, r4
 8002cc2:	706a      	strb	r2, [r5, #1]
 8002cc4:	e7d9      	b.n	8002c7a <put_fat+0xae>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002cc6:	f241 070a 	movw	r7, #4106	; 0x100a
 8002cca:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8002cce:	5bc3      	ldrh	r3, [r0, r7]
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cd6:	6811      	ldr	r1, [r2, #0]
 8002cd8:	4419      	add	r1, r3
 8002cda:	f7ff fc9d 	bl	8002618 <move_window>
			if (res != FR_OK) break;
 8002cde:	b9b0      	cbnz	r0, 8002d0e <put_fat+0x142>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8002ce0:	5be2      	ldrh	r2, [r4, r7]
 8002ce2:	00ad      	lsls	r5, r5, #2
 8002ce4:	fbb5 f3f2 	udiv	r3, r5, r2
 8002ce8:	fb02 5513 	mls	r5, r2, r3, r5
 8002cec:	1961      	adds	r1, r4, r5
			val |= LD_DWORD(p) & 0xF0000000;
 8002cee:	78cb      	ldrb	r3, [r1, #3]
 8002cf0:	061b      	lsls	r3, r3, #24
 8002cf2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002cf6:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 8002cfa:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8002cfe:	5562      	strb	r2, [r4, r5]
 8002d00:	704b      	strb	r3, [r1, #1]
 8002d02:	0c13      	lsrs	r3, r2, #16
 8002d04:	0e12      	lsrs	r2, r2, #24
 8002d06:	708b      	strb	r3, [r1, #2]
 8002d08:	70ca      	strb	r2, [r1, #3]
 8002d0a:	e7b6      	b.n	8002c7a <put_fat+0xae>
			res = FR_INT_ERR;
 8002d0c:	2002      	movs	r0, #2
}
 8002d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002d12 <create_chain>:
{
 8002d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d16:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 8002d18:	460f      	mov	r7, r1
 8002d1a:	b9b9      	cbnz	r1, 8002d4c <create_chain+0x3a>
		scl = fs->last_clust;			/* Get suggested start point */
 8002d1c:	f241 030c 	movw	r3, #4108	; 0x100c
 8002d20:	58c6      	ldr	r6, [r0, r3]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8002d22:	b336      	cbz	r6, 8002d72 <create_chain+0x60>
 8002d24:	f241 0314 	movw	r3, #4116	; 0x1014
 8002d28:	58c3      	ldr	r3, [r0, r3]
 8002d2a:	429e      	cmp	r6, r3
 8002d2c:	bf28      	it	cs
 8002d2e:	2601      	movcs	r6, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8002d30:	f505 5880 	add.w	r8, r5, #4096	; 0x1000
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8002d34:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8002d36:	f108 0814 	add.w	r8, r8, #20
 8002d3a:	f8d8 3000 	ldr.w	r3, [r8]
		ncl++;							/* Next cluster */
 8002d3e:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8002d40:	429c      	cmp	r4, r3
 8002d42:	d319      	bcc.n	8002d78 <create_chain+0x66>
			if (ncl > scl) return 0;	/* No free cluster */
 8002d44:	2e01      	cmp	r6, #1
 8002d46:	d816      	bhi.n	8002d76 <create_chain+0x64>
 8002d48:	2400      	movs	r4, #0
 8002d4a:	e008      	b.n	8002d5e <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8002d4c:	f7ff fe46 	bl	80029dc <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 8002d50:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8002d52:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 8002d54:	d93e      	bls.n	8002dd4 <create_chain+0xc2>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002d56:	1c42      	adds	r2, r0, #1
 8002d58:	d104      	bne.n	8002d64 <create_chain+0x52>
			ncl = 2;
 8002d5a:	f04f 34ff 	mov.w	r4, #4294967295
}
 8002d5e:	4620      	mov	r0, r4
 8002d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002d64:	f241 0314 	movw	r3, #4116	; 0x1014
 8002d68:	58eb      	ldr	r3, [r5, r3]
 8002d6a:	4298      	cmp	r0, r3
 8002d6c:	d3f7      	bcc.n	8002d5e <create_chain+0x4c>
 8002d6e:	463e      	mov	r6, r7
 8002d70:	e7de      	b.n	8002d30 <create_chain+0x1e>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8002d72:	2601      	movs	r6, #1
 8002d74:	e7dc      	b.n	8002d30 <create_chain+0x1e>
			ncl = 2;
 8002d76:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8002d78:	4621      	mov	r1, r4
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	f7ff fe2e 	bl	80029dc <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8002d80:	b130      	cbz	r0, 8002d90 <create_chain+0x7e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8002d82:	1c43      	adds	r3, r0, #1
 8002d84:	d0e9      	beq.n	8002d5a <create_chain+0x48>
 8002d86:	2801      	cmp	r0, #1
 8002d88:	d024      	beq.n	8002dd4 <create_chain+0xc2>
		if (ncl == scl) return 0;		/* No free cluster */
 8002d8a:	42b4      	cmp	r4, r6
 8002d8c:	d1d5      	bne.n	8002d3a <create_chain+0x28>
 8002d8e:	e7db      	b.n	8002d48 <create_chain+0x36>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8002d90:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8002d94:	4621      	mov	r1, r4
 8002d96:	4628      	mov	r0, r5
 8002d98:	f7ff ff18 	bl	8002bcc <put_fat>
	if (res == FR_OK && clst != 0) {
 8002d9c:	b9c0      	cbnz	r0, 8002dd0 <create_chain+0xbe>
 8002d9e:	b987      	cbnz	r7, 8002dc2 <create_chain+0xb0>
		fs->last_clust = ncl;			/* Update FSINFO */
 8002da0:	f241 030c 	movw	r3, #4108	; 0x100c
		if (fs->free_clust != 0xFFFFFFFF) {
 8002da4:	f241 0210 	movw	r2, #4112	; 0x1010
		fs->last_clust = ncl;			/* Update FSINFO */
 8002da8:	50ec      	str	r4, [r5, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 8002daa:	58ab      	ldr	r3, [r5, r2]
 8002dac:	1c59      	adds	r1, r3, #1
 8002dae:	d0d6      	beq.n	8002d5e <create_chain+0x4c>
			fs->free_clust--;
 8002db0:	3b01      	subs	r3, #1
 8002db2:	50ab      	str	r3, [r5, r2]
			fs->fsi_flag |= 1;
 8002db4:	f241 0205 	movw	r2, #4101	; 0x1005
 8002db8:	5cab      	ldrb	r3, [r5, r2]
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	54ab      	strb	r3, [r5, r2]
 8002dc0:	e7cd      	b.n	8002d5e <create_chain+0x4c>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8002dc2:	4622      	mov	r2, r4
 8002dc4:	4639      	mov	r1, r7
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f7ff ff00 	bl	8002bcc <put_fat>
	if (res == FR_OK) {
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d0e7      	beq.n	8002da0 <create_chain+0x8e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8002dd0:	2801      	cmp	r0, #1
 8002dd2:	d0c2      	beq.n	8002d5a <create_chain+0x48>
 8002dd4:	2401      	movs	r4, #1
 8002dd6:	e7c2      	b.n	8002d5e <create_chain+0x4c>

08002dd8 <dir_next>:
{
 8002dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dp->index + 1;
 8002ddc:	f241 0306 	movw	r3, #4102	; 0x1006
{
 8002de0:	4604      	mov	r4, r0
	i = dp->index + 1;
 8002de2:	5ac6      	ldrh	r6, [r0, r3]
 8002de4:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8002de6:	b2b3      	uxth	r3, r6
{
 8002de8:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8002dea:	b913      	cbnz	r3, 8002df2 <dir_next+0x1a>
		return FR_NO_FILE;
 8002dec:	2004      	movs	r0, #4
 8002dee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8002df2:	f241 0110 	movw	r1, #4112	; 0x1010
 8002df6:	5842      	ldr	r2, [r0, r1]
 8002df8:	2a00      	cmp	r2, #0
 8002dfa:	d0f7      	beq.n	8002dec <dir_next+0x14>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8002dfc:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
 8002e00:	f241 030a 	movw	r3, #4106	; 0x100a
 8002e04:	6838      	ldr	r0, [r7, #0]
 8002e06:	5ac3      	ldrh	r3, [r0, r3]
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	fbb6 f5f3 	udiv	r5, r6, r3
 8002e0e:	fb03 6315 	mls	r3, r3, r5, r6
 8002e12:	b95b      	cbnz	r3, 8002e2c <dir_next+0x54>
		if (!dp->clust) {		/* Static table */
 8002e14:	f241 0a0c 	movw	sl, #4108	; 0x100c
		dp->sect++;					/* Next sector */
 8002e18:	3201      	adds	r2, #1
 8002e1a:	5062      	str	r2, [r4, r1]
		if (!dp->clust) {		/* Static table */
 8002e1c:	f854 100a 	ldr.w	r1, [r4, sl]
 8002e20:	b9c1      	cbnz	r1, 8002e54 <dir_next+0x7c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8002e22:	f241 0308 	movw	r3, #4104	; 0x1008
 8002e26:	5ac3      	ldrh	r3, [r0, r3]
 8002e28:	429e      	cmp	r6, r3
 8002e2a:	d2df      	bcs.n	8002dec <dir_next+0x14>
	dp->index = (WORD)i;	/* Current index */
 8002e2c:	f241 0306 	movw	r3, #4102	; 0x1006
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8002e30:	f241 020a 	movw	r2, #4106	; 0x100a
	dp->index = (WORD)i;	/* Current index */
 8002e34:	52e6      	strh	r6, [r4, r3]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	5a9a      	ldrh	r2, [r3, r2]
 8002e3a:	0952      	lsrs	r2, r2, #5
 8002e3c:	fbb6 f1f2 	udiv	r1, r6, r2
 8002e40:	fb02 6611 	mls	r6, r2, r1, r6
 8002e44:	f241 0214 	movw	r2, #4116	; 0x1014
 8002e48:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8002e4c:	50a3      	str	r3, [r4, r2]
	return FR_OK;
 8002e4e:	2000      	movs	r0, #0
 8002e50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002e54:	f241 0302 	movw	r3, #4098	; 0x1002
 8002e58:	f810 8003 	ldrb.w	r8, [r0, r3]
 8002e5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8002e60:	ea18 0805 	ands.w	r8, r8, r5
 8002e64:	d1e2      	bne.n	8002e2c <dir_next+0x54>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8002e66:	f7ff fdb9 	bl	80029dc <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 8002e6a:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8002e6c:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 8002e6e:	d802      	bhi.n	8002e76 <dir_next+0x9e>
 8002e70:	2002      	movs	r0, #2
 8002e72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8002e76:	1c42      	adds	r2, r0, #1
 8002e78:	d102      	bne.n	8002e80 <dir_next+0xa8>
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8002e80:	6838      	ldr	r0, [r7, #0]
 8002e82:	f241 0314 	movw	r3, #4116	; 0x1014
 8002e86:	58c3      	ldr	r3, [r0, r3]
 8002e88:	429d      	cmp	r5, r3
 8002e8a:	d334      	bcc.n	8002ef6 <dir_next+0x11e>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8002e8c:	f1b9 0f00 	cmp.w	r9, #0
 8002e90:	d0ac      	beq.n	8002dec <dir_next+0x14>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8002e92:	f854 100a 	ldr.w	r1, [r4, sl]
 8002e96:	f7ff ff3c 	bl	8002d12 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002e9a:	4605      	mov	r5, r0
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	d044      	beq.n	8002f2a <dir_next+0x152>
					if (clst == 1) return FR_INT_ERR;
 8002ea0:	2801      	cmp	r0, #1
 8002ea2:	d0e5      	beq.n	8002e70 <dir_next+0x98>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8002ea4:	1c43      	adds	r3, r0, #1
 8002ea6:	d0e8      	beq.n	8002e7a <dir_next+0xa2>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8002ea8:	6838      	ldr	r0, [r7, #0]
 8002eaa:	f7ff fb48 	bl	800253e <sync_window>
 8002eae:	4601      	mov	r1, r0
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	d1e2      	bne.n	8002e7a <dir_next+0xa2>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8002eb4:	6838      	ldr	r0, [r7, #0]
 8002eb6:	f241 020a 	movw	r2, #4106	; 0x100a
						dp->fs->wflag = 1;
 8002eba:	f241 0a04 	movw	sl, #4100	; 0x1004
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8002ebe:	5a82      	ldrh	r2, [r0, r2]
 8002ec0:	f7ff f9fc 	bl	80022bc <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8002ec4:	f8d7 9000 	ldr.w	r9, [r7]
 8002ec8:	4629      	mov	r1, r5
 8002eca:	4648      	mov	r0, r9
 8002ecc:	f7ff fd74 	bl	80029b8 <clust2sect>
 8002ed0:	f241 032c 	movw	r3, #4140	; 0x102c
						dp->fs->wflag = 1;
 8002ed4:	f04f 0b01 	mov.w	fp, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8002ed8:	f849 0003 	str.w	r0, [r9, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002edc:	f241 0902 	movw	r9, #4098	; 0x1002
 8002ee0:	6838      	ldr	r0, [r7, #0]
 8002ee2:	f810 3009 	ldrb.w	r3, [r0, r9]
 8002ee6:	4598      	cmp	r8, r3
 8002ee8:	d310      	bcc.n	8002f0c <dir_next+0x134>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8002eea:	f241 022c 	movw	r2, #4140	; 0x102c
 8002eee:	5883      	ldr	r3, [r0, r2]
 8002ef0:	eba3 0308 	sub.w	r3, r3, r8
 8002ef4:	5083      	str	r3, [r0, r2]
				dp->clust = clst;				/* Initialize data for new cluster */
 8002ef6:	f241 030c 	movw	r3, #4108	; 0x100c
				dp->sect = clust2sect(dp->fs, clst);
 8002efa:	6838      	ldr	r0, [r7, #0]
				dp->clust = clst;				/* Initialize data for new cluster */
 8002efc:	50e5      	str	r5, [r4, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8002efe:	4629      	mov	r1, r5
 8002f00:	f7ff fd5a 	bl	80029b8 <clust2sect>
 8002f04:	f241 0310 	movw	r3, #4112	; 0x1010
 8002f08:	50e0      	str	r0, [r4, r3]
 8002f0a:	e78f      	b.n	8002e2c <dir_next+0x54>
						dp->fs->wflag = 1;
 8002f0c:	f800 b00a 	strb.w	fp, [r0, sl]
 8002f10:	f7ff fae1 	bl	80024d6 <sync_window.part.2>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8002f14:	2800      	cmp	r0, #0
 8002f16:	d1b0      	bne.n	8002e7a <dir_next+0xa2>
						dp->fs->winsect++;
 8002f18:	6839      	ldr	r1, [r7, #0]
 8002f1a:	f241 022c 	movw	r2, #4140	; 0x102c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002f1e:	f108 0801 	add.w	r8, r8, #1
						dp->fs->winsect++;
 8002f22:	588b      	ldr	r3, [r1, r2]
 8002f24:	3301      	adds	r3, #1
 8002f26:	508b      	str	r3, [r1, r2]
 8002f28:	e7da      	b.n	8002ee0 <dir_next+0x108>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002f2a:	2007      	movs	r0, #7
}
 8002f2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002f30 <follow_path>:
{
 8002f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8002f34:	780b      	ldrb	r3, [r1, #0]
 8002f36:	2b2f      	cmp	r3, #47	; 0x2f
{
 8002f38:	4605      	mov	r5, r0
 8002f3a:	460c      	mov	r4, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8002f3c:	d001      	beq.n	8002f42 <follow_path+0x12>
 8002f3e:	2b5c      	cmp	r3, #92	; 0x5c
 8002f40:	d100      	bne.n	8002f44 <follow_path+0x14>
		path++;
 8002f42:	3401      	adds	r4, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8002f44:	f241 0308 	movw	r3, #4104	; 0x1008
 8002f48:	2600      	movs	r6, #0
 8002f4a:	50ee      	str	r6, [r5, r3]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002f4c:	7823      	ldrb	r3, [r4, #0]
 8002f4e:	2b1f      	cmp	r3, #31
 8002f50:	d93d      	bls.n	8002fce <follow_path+0x9e>
	sfn = dp->fn;
 8002f52:	f505 5680 	add.w	r6, r5, #4096	; 0x1000
 8002f56:	3618      	adds	r6, #24
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8002f58:	7823      	ldrb	r3, [r4, #0]
 8002f5a:	2b2f      	cmp	r3, #47	; 0x2f
 8002f5c:	46a0      	mov	r8, r4
 8002f5e:	f104 0401 	add.w	r4, r4, #1
 8002f62:	d0f9      	beq.n	8002f58 <follow_path+0x28>
 8002f64:	2b5c      	cmp	r3, #92	; 0x5c
 8002f66:	d0f7      	beq.n	8002f58 <follow_path+0x28>
	sfn = dp->fn;
 8002f68:	6837      	ldr	r7, [r6, #0]
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8002f6a:	f8df a188 	ldr.w	sl, [pc, #392]	; 80030f4 <follow_path+0x1c4>
	mem_set(sfn, ' ', 11);
 8002f6e:	220b      	movs	r2, #11
 8002f70:	2120      	movs	r1, #32
 8002f72:	4638      	mov	r0, r7
 8002f74:	f7ff f9a2 	bl	80022bc <mem_set>
	si = i = b = 0; ni = 8;
 8002f78:	2100      	movs	r1, #0
 8002f7a:	f108 3eff 	add.w	lr, r8, #4294967295
 8002f7e:	460c      	mov	r4, r1
 8002f80:	2008      	movs	r0, #8
 8002f82:	460a      	mov	r2, r1
		c = (BYTE)p[si++];
 8002f84:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8002f88:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8002f8a:	f104 0401 	add.w	r4, r4, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8002f8e:	d92c      	bls.n	8002fea <follow_path+0xba>
 8002f90:	2b2f      	cmp	r3, #47	; 0x2f
 8002f92:	d02a      	beq.n	8002fea <follow_path+0xba>
 8002f94:	2b5c      	cmp	r3, #92	; 0x5c
 8002f96:	d028      	beq.n	8002fea <follow_path+0xba>
		if (c == '.' || i >= ni) {
 8002f98:	2b2e      	cmp	r3, #46	; 0x2e
 8002f9a:	f000 8092 	beq.w	80030c2 <follow_path+0x192>
 8002f9e:	4288      	cmp	r0, r1
 8002fa0:	d912      	bls.n	8002fc8 <follow_path+0x98>
		if (c >= 0x80) {				/* Extended character? */
 8002fa2:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8002fa6:	bf18      	it	ne
 8002fa8:	3b80      	subne	r3, #128	; 0x80
 8002faa:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80030f8 <follow_path+0x1c8>
 8002fae:	bf1c      	itt	ne
 8002fb0:	f81a 3003 	ldrbne.w	r3, [sl, r3]
			b |= 3;						/* Eliminate NT flag */
 8002fb4:	f042 0203 	orrne.w	r2, r2, #3
	while (*str && *str != chr) str++;
 8002fb8:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 8002fbc:	f1bc 0f00 	cmp.w	ip, #0
 8002fc0:	f000 8086 	beq.w	80030d0 <follow_path+0x1a0>
 8002fc4:	4563      	cmp	r3, ip
 8002fc6:	d1f7      	bne.n	8002fb8 <follow_path+0x88>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8002fc8:	2006      	movs	r0, #6
	return res;
 8002fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		res = dir_sdi(dp, 0);
 8002fce:	4631      	mov	r1, r6
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f7ff fd8f 	bl	8002af4 <dir_sdi>
		dp->dir = 0;
 8002fd6:	f241 0314 	movw	r3, #4116	; 0x1014
 8002fda:	50ee      	str	r6, [r5, r3]
 8002fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				b |= 2;
 8002fe0:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 8002fe4:	547b      	strb	r3, [r7, r1]
 8002fe6:	3101      	adds	r1, #1
 8002fe8:	e7cc      	b.n	8002f84 <follow_path+0x54>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8002fea:	2b21      	cmp	r3, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 8002fec:	4444      	add	r4, r8
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8002fee:	bf34      	ite	cc
 8002ff0:	2304      	movcc	r3, #4
 8002ff2:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8002ff4:	2900      	cmp	r1, #0
 8002ff6:	d0e7      	beq.n	8002fc8 <follow_path+0x98>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8002ff8:	7839      	ldrb	r1, [r7, #0]
 8002ffa:	29e5      	cmp	r1, #229	; 0xe5
 8002ffc:	bf04      	itt	eq
 8002ffe:	2105      	moveq	r1, #5
 8003000:	7039      	strbeq	r1, [r7, #0]
	if (ni == 8) b <<= 2;
 8003002:	2808      	cmp	r0, #8
 8003004:	bf04      	itt	eq
 8003006:	0092      	lsleq	r2, r2, #2
 8003008:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800300a:	f002 0103 	and.w	r1, r2, #3
 800300e:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8003010:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8003014:	bf08      	it	eq
 8003016:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800301a:	2a04      	cmp	r2, #4
 800301c:	bf08      	it	eq
 800301e:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8003022:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003024:	2100      	movs	r1, #0
 8003026:	4628      	mov	r0, r5
 8003028:	f7ff fd64 	bl	8002af4 <dir_sdi>
	if (res != FR_OK) return res;
 800302c:	bb28      	cbnz	r0, 800307a <follow_path+0x14a>
		res = move_window(dp->fs, dp->sect);
 800302e:	f505 5780 	add.w	r7, r5, #4096	; 0x1000
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003032:	f505 5880 	add.w	r8, r5, #4096	; 0x1000
		res = move_window(dp->fs, dp->sect);
 8003036:	3710      	adds	r7, #16
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003038:	f108 0814 	add.w	r8, r8, #20
		res = move_window(dp->fs, dp->sect);
 800303c:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 8003040:	6839      	ldr	r1, [r7, #0]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	f7ff fae8 	bl	8002618 <move_window>
		if (res != FR_OK) break;
 8003048:	b9b8      	cbnz	r0, 800307a <follow_path+0x14a>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800304a:	f8d8 2000 	ldr.w	r2, [r8]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800304e:	7813      	ldrb	r3, [r2, #0]
 8003050:	b1f3      	cbz	r3, 8003090 <follow_path+0x160>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8003052:	7ad3      	ldrb	r3, [r2, #11]
 8003054:	0719      	lsls	r1, r3, #28
 8003056:	d40a      	bmi.n	800306e <follow_path+0x13e>
 8003058:	6833      	ldr	r3, [r6, #0]
 800305a:	f103 0c0b 	add.w	ip, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800305e:	4563      	cmp	r3, ip
 8003060:	d00b      	beq.n	800307a <follow_path+0x14a>
 8003062:	f812 eb01 	ldrb.w	lr, [r2], #1
 8003066:	f813 1b01 	ldrb.w	r1, [r3], #1
 800306a:	458e      	cmp	lr, r1
 800306c:	d0f7      	beq.n	800305e <follow_path+0x12e>
		res = dir_next(dp, 0);		/* Next entry */
 800306e:	2100      	movs	r1, #0
 8003070:	4628      	mov	r0, r5
 8003072:	f7ff feb1 	bl	8002dd8 <dir_next>
	} while (res == FR_OK);
 8003076:	2800      	cmp	r0, #0
 8003078:	d0e0      	beq.n	800303c <follow_path+0x10c>
			ns = dp->fn[NSFLAG];
 800307a:	6833      	ldr	r3, [r6, #0]
 800307c:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800307e:	b148      	cbz	r0, 8003094 <follow_path+0x164>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003080:	2804      	cmp	r0, #4
 8003082:	d134      	bne.n	80030ee <follow_path+0x1be>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003084:	f013 0f04 	tst.w	r3, #4
 8003088:	bf08      	it	eq
 800308a:	2005      	moveq	r0, #5
 800308c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003090:	2004      	movs	r0, #4
 8003092:	e7f2      	b.n	800307a <follow_path+0x14a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003094:	075a      	lsls	r2, r3, #29
 8003096:	d42a      	bmi.n	80030ee <follow_path+0x1be>
			dir = dp->dir;						/* Follow the sub-directory */
 8003098:	f241 0314 	movw	r3, #4116	; 0x1014
 800309c:	58e9      	ldr	r1, [r5, r3]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800309e:	7acb      	ldrb	r3, [r1, #11]
 80030a0:	06db      	lsls	r3, r3, #27
 80030a2:	d50b      	bpl.n	80030bc <follow_path+0x18c>
			dp->sclust = ld_clust(dp->fs, dir);
 80030a4:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ae:	7818      	ldrb	r0, [r3, #0]
 80030b0:	f7ff fa03 	bl	80024ba <ld_clust.isra.0>
 80030b4:	f241 0308 	movw	r3, #4104	; 0x1008
 80030b8:	50e8      	str	r0, [r5, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80030ba:	e74d      	b.n	8002f58 <follow_path+0x28>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80030bc:	2005      	movs	r0, #5
 80030be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80030c2:	2808      	cmp	r0, #8
 80030c4:	d180      	bne.n	8002fc8 <follow_path+0x98>
			b <<= 2; continue;
 80030c6:	0092      	lsls	r2, r2, #2
			i = 8; ni = 11;
 80030c8:	4601      	mov	r1, r0
			b <<= 2; continue;
 80030ca:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 80030cc:	200b      	movs	r0, #11
 80030ce:	e759      	b.n	8002f84 <follow_path+0x54>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80030d0:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80030d4:	f1bc 0f19 	cmp.w	ip, #25
 80030d8:	d982      	bls.n	8002fe0 <follow_path+0xb0>
				if (IsLower(c)) {		/* ASCII small capital? */
 80030da:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80030de:	f1bc 0f19 	cmp.w	ip, #25
					b |= 1; c -= 0x20;
 80030e2:	bf9e      	ittt	ls
 80030e4:	3b20      	subls	r3, #32
 80030e6:	f042 0201 	orrls.w	r2, r2, #1
 80030ea:	b2db      	uxtbls	r3, r3
 80030ec:	e77a      	b.n	8002fe4 <follow_path+0xb4>
}
 80030ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030f2:	bf00      	nop
 80030f4:	080042ec 	.word	0x080042ec
 80030f8:	0800436b 	.word	0x0800436b

080030fc <dir_register>:
{
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	res = dir_sdi(dp, 0);
 80030fe:	2100      	movs	r1, #0
{
 8003100:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 8003102:	f7ff fcf7 	bl	8002af4 <dir_sdi>
	if (res == FR_OK) {
 8003106:	4604      	mov	r4, r0
 8003108:	2800      	cmp	r0, #0
 800310a:	d136      	bne.n	800317a <dir_register+0x7e>
			res = move_window(dp->fs, dp->sect);
 800310c:	f505 5780 	add.w	r7, r5, #4096	; 0x1000
 8003110:	3710      	adds	r7, #16
 8003112:	f505 5680 	add.w	r6, r5, #4096	; 0x1000
 8003116:	6839      	ldr	r1, [r7, #0]
 8003118:	6830      	ldr	r0, [r6, #0]
 800311a:	f7ff fa7d 	bl	8002618 <move_window>
			if (res != FR_OK) break;
 800311e:	4604      	mov	r4, r0
 8003120:	bb58      	cbnz	r0, 800317a <dir_register+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003122:	f241 0314 	movw	r3, #4116	; 0x1014
 8003126:	58eb      	ldr	r3, [r5, r3]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2be5      	cmp	r3, #229	; 0xe5
 800312c:	d11c      	bne.n	8003168 <dir_register+0x6c>
		res = move_window(dp->fs, dp->sect);
 800312e:	f241 0310 	movw	r3, #4112	; 0x1010
 8003132:	6830      	ldr	r0, [r6, #0]
 8003134:	58e9      	ldr	r1, [r5, r3]
 8003136:	f7ff fa6f 	bl	8002618 <move_window>
		if (res == FR_OK) {
 800313a:	4604      	mov	r4, r0
 800313c:	b990      	cbnz	r0, 8003164 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800313e:	f241 0314 	movw	r3, #4116	; 0x1014
 8003142:	4601      	mov	r1, r0
 8003144:	2220      	movs	r2, #32
 8003146:	58e8      	ldr	r0, [r5, r3]
 8003148:	f7ff f8b8 	bl	80022bc <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800314c:	f241 0118 	movw	r1, #4120	; 0x1018
 8003150:	220b      	movs	r2, #11
 8003152:	5869      	ldr	r1, [r5, r1]
 8003154:	58e8      	ldr	r0, [r5, r3]
 8003156:	f7ff f8a7 	bl	80022a8 <mem_cpy>
			dp->fs->wflag = 1;
 800315a:	6832      	ldr	r2, [r6, #0]
 800315c:	f241 0304 	movw	r3, #4100	; 0x1004
 8003160:	2101      	movs	r1, #1
 8003162:	54d1      	strb	r1, [r2, r3]
}
 8003164:	4620      	mov	r0, r4
 8003166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0e0      	beq.n	800312e <dir_register+0x32>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800316c:	2101      	movs	r1, #1
 800316e:	4628      	mov	r0, r5
 8003170:	f7ff fe32 	bl	8002dd8 <dir_next>
		} while (res == FR_OK);
 8003174:	4604      	mov	r4, r0
 8003176:	2800      	cmp	r0, #0
 8003178:	d0cd      	beq.n	8003116 <dir_register+0x1a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800317a:	2c04      	cmp	r4, #4
 800317c:	bf08      	it	eq
 800317e:	2407      	moveq	r4, #7
 8003180:	e7f0      	b.n	8003164 <dir_register+0x68>

08003182 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003182:	2901      	cmp	r1, #1
{
 8003184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003188:	4604      	mov	r4, r0
 800318a:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800318c:	d802      	bhi.n	8003194 <remove_chain+0x12>
		res = FR_INT_ERR;
 800318e:	2002      	movs	r0, #2
 8003190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003194:	f241 0614 	movw	r6, #4116	; 0x1014
 8003198:	5983      	ldr	r3, [r0, r6]
 800319a:	4299      	cmp	r1, r3
 800319c:	d2f7      	bcs.n	800318e <remove_chain+0xc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800319e:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80031a2:	4406      	add	r6, r0
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80031a4:	3710      	adds	r7, #16
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80031a6:	6833      	ldr	r3, [r6, #0]
 80031a8:	429d      	cmp	r5, r3
 80031aa:	d205      	bcs.n	80031b8 <remove_chain+0x36>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80031ac:	4629      	mov	r1, r5
 80031ae:	4620      	mov	r0, r4
 80031b0:	f7ff fc14 	bl	80029dc <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 80031b4:	4680      	mov	r8, r0
 80031b6:	b910      	cbnz	r0, 80031be <remove_chain+0x3c>
		res = FR_INT_ERR;
 80031b8:	2000      	movs	r0, #0
 80031ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80031be:	2801      	cmp	r0, #1
 80031c0:	d0e5      	beq.n	800318e <remove_chain+0xc>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80031c2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80031c6:	d012      	beq.n	80031ee <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80031c8:	2200      	movs	r2, #0
 80031ca:	4629      	mov	r1, r5
 80031cc:	4620      	mov	r0, r4
 80031ce:	f7ff fcfd 	bl	8002bcc <put_fat>
			if (res != FR_OK) break;
 80031d2:	b968      	cbnz	r0, 80031f0 <remove_chain+0x6e>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	d007      	beq.n	80031ea <remove_chain+0x68>
				fs->free_clust++;
 80031da:	3301      	adds	r3, #1
				fs->fsi_flag |= 1;
 80031dc:	f241 0205 	movw	r2, #4101	; 0x1005
				fs->free_clust++;
 80031e0:	603b      	str	r3, [r7, #0]
				fs->fsi_flag |= 1;
 80031e2:	5ca3      	ldrb	r3, [r4, r2]
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	54a3      	strb	r3, [r4, r2]
{
 80031ea:	4645      	mov	r5, r8
 80031ec:	e7db      	b.n	80031a6 <remove_chain+0x24>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80031ee:	2001      	movs	r0, #1
}
 80031f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080031f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80031f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80031f6:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80031f8:	a804      	add	r0, sp, #16
{
 80031fa:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 80031fc:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8003200:	4615      	mov	r5, r2


	vol = get_ldnumber(&rp);
 8003202:	f7ff f926 	bl	8002452 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003206:	1e06      	subs	r6, r0, #0
 8003208:	db24      	blt.n	8003254 <f_mount+0x60>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800320a:	4a14      	ldr	r2, [pc, #80]	; (800325c <f_mount+0x68>)
 800320c:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]

	if (cfs) {
 8003210:	b173      	cbz	r3, 8003230 <f_mount+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003212:	4913      	ldr	r1, [pc, #76]	; (8003260 <f_mount+0x6c>)
 8003214:	6808      	ldr	r0, [r1, #0]
 8003216:	4283      	cmp	r3, r0
 8003218:	bf04      	itt	eq
 800321a:	2000      	moveq	r0, #0
 800321c:	6008      	streq	r0, [r1, #0]
 800321e:	68c8      	ldr	r0, [r1, #12]
 8003220:	4283      	cmp	r3, r0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003226:	f04f 0400 	mov.w	r4, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 800322a:	bf08      	it	eq
 800322c:	60cc      	streq	r4, [r1, #12]
		cfs->fs_type = 0;				/* Clear old fs object */
 800322e:	701c      	strb	r4, [r3, #0]
	}

	if (fs) {
 8003230:	9801      	ldr	r0, [sp, #4]
 8003232:	b118      	cbz	r0, 800323c <f_mount+0x48>
		fs->fs_type = 0;				/* Clear new fs object */
 8003234:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003238:	2100      	movs	r1, #0
 800323a:	7019      	strb	r1, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800323c:	f842 0026 	str.w	r0, [r2, r6, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003240:	b130      	cbz	r0, 8003250 <f_mount+0x5c>
 8003242:	2d01      	cmp	r5, #1
 8003244:	d108      	bne.n	8003258 <f_mount+0x64>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8003246:	2200      	movs	r2, #0
 8003248:	4669      	mov	r1, sp
 800324a:	a801      	add	r0, sp, #4
 800324c:	f7ff fa32 	bl	80026b4 <find_volume>
	LEAVE_FF(fs, res);
}
 8003250:	b004      	add	sp, #16
 8003252:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8003254:	200b      	movs	r0, #11
 8003256:	e7fb      	b.n	8003250 <f_mount+0x5c>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003258:	2000      	movs	r0, #0
 800325a:	e7f9      	b.n	8003250 <f_mount+0x5c>
 800325c:	20000024 	.word	0x20000024
 8003260:	20000028 	.word	0x20000028

08003264 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003268:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800326c:	b087      	sub	sp, #28
 800326e:	4690      	mov	r8, r2
 8003270:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8003272:	4606      	mov	r6, r0
 8003274:	2800      	cmp	r0, #0
 8003276:	f000 80ca 	beq.w	800340e <f_open+0x1aa>
	fp->fs = 0;			/* Clear file object */
 800327a:	f500 5980 	add.w	r9, r0, #4096	; 0x1000

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800327e:	f50d 5a80 	add.w	sl, sp, #4096	; 0x1000
	fp->fs = 0;			/* Clear file object */
 8003282:	2300      	movs	r3, #0
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8003284:	f10a 0a18 	add.w	sl, sl, #24
	fp->fs = 0;			/* Clear file object */
 8003288:	f8c9 3000 	str.w	r3, [r9]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800328c:	f002 021e 	and.w	r2, r2, #30
 8003290:	a901      	add	r1, sp, #4
 8003292:	4650      	mov	r0, sl
 8003294:	f7ff fa0e 	bl	80026b4 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8003298:	4605      	mov	r5, r0
 800329a:	2800      	cmp	r0, #0
 800329c:	f040 80b1 	bne.w	8003402 <f_open+0x19e>
		INIT_BUF(dj);
 80032a0:	f50d 5281 	add.w	r2, sp, #4128	; 0x1020
 80032a4:	3210      	adds	r2, #16
 80032a6:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 80032a8:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 80032aa:	6013      	str	r3, [r2, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 80032ac:	a806      	add	r0, sp, #24
 80032ae:	f7ff fe3f 	bl	8002f30 <follow_path>
		dir = dj.dir;
 80032b2:	f50d 5381 	add.w	r3, sp, #4128	; 0x1020
 80032b6:	330c      	adds	r3, #12
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80032b8:	f008 071f 	and.w	r7, r8, #31
		dir = dj.dir;
 80032bc:	681c      	ldr	r4, [r3, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80032be:	b948      	cbnz	r0, 80032d4 <f_open+0x70>
			if (!dir)	/* Default directory itself */
 80032c0:	2c00      	cmp	r4, #0
 80032c2:	d06a      	beq.n	800339a <f_open+0x136>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80032c4:	f017 0f1e 	tst.w	r7, #30
 80032c8:	bf14      	ite	ne
 80032ca:	2101      	movne	r1, #1
 80032cc:	2100      	moveq	r1, #0
 80032ce:	a806      	add	r0, sp, #24
 80032d0:	f7fe fffc 	bl	80022cc <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80032d4:	f018 0f1c 	tst.w	r8, #28
 80032d8:	d06a      	beq.n	80033b0 <f_open+0x14c>
			if (res != FR_OK) {					/* No file, create new */
 80032da:	2800      	cmp	r0, #0
 80032dc:	d05f      	beq.n	800339e <f_open+0x13a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80032de:	2804      	cmp	r0, #4
 80032e0:	d159      	bne.n	8003396 <f_open+0x132>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80032e2:	4b64      	ldr	r3, [pc, #400]	; (8003474 <f_open+0x210>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	b11a      	cbz	r2, 80032f0 <f_open+0x8c>
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 80c0 	bne.w	8003470 <f_open+0x20c>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80032f0:	a806      	add	r0, sp, #24
 80032f2:	f7ff ff03 	bl	80030fc <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d14d      	bne.n	8003396 <f_open+0x132>
				dir = dj.dir;					/* New entry */
 80032fa:	f50d 5381 	add.w	r3, sp, #4128	; 0x1020
 80032fe:	330c      	adds	r3, #12
 8003300:	681c      	ldr	r4, [r3, #0]
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003302:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003306:	073b      	lsls	r3, r7, #28
 8003308:	d55c      	bpl.n	80033c4 <f_open+0x160>
				dw = GET_FATTIME();				/* Created time */
 800330a:	f000 fc91 	bl	8003c30 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 800330e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003312:	73e3      	strb	r3, [r4, #15]
 8003314:	0c03      	lsrs	r3, r0, #16
 8003316:	7423      	strb	r3, [r4, #16]
				dir[DIR_Attr] = 0;				/* Reset attribute */
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8003318:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800331c:	f04f 0800 	mov.w	r8, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 8003320:	73a0      	strb	r0, [r4, #14]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8003322:	3318      	adds	r3, #24
				ST_DWORD(dir + DIR_CrtTime, dw);
 8003324:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8003326:	f884 800b 	strb.w	r8, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800332a:	f884 801c 	strb.w	r8, [r4, #28]
 800332e:	f884 801d 	strb.w	r8, [r4, #29]
 8003332:	f884 801e 	strb.w	r8, [r4, #30]
 8003336:	f884 801f 	strb.w	r8, [r4, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800333a:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003342:	4621      	mov	r1, r4
 8003344:	7818      	ldrb	r0, [r3, #0]
 8003346:	f7ff f8b8 	bl	80024ba <ld_clust.isra.0>
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 800334a:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 800334e:	3318      	adds	r3, #24
	ST_WORD(dir + DIR_FstClusLO, cl);
 8003350:	f884 801a 	strb.w	r8, [r4, #26]
 8003354:	f884 801b 	strb.w	r8, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8003358:	f884 8014 	strb.w	r8, [r4, #20]
 800335c:	f884 8015 	strb.w	r8, [r4, #21]
				dj.fs->wflag = 1;
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f241 0204 	movw	r2, #4100	; 0x1004
 8003366:	2101      	movs	r1, #1
 8003368:	5499      	strb	r1, [r3, r2]
				if (cl) {						/* Remove the cluster chain if exist */
 800336a:	4680      	mov	r8, r0
 800336c:	b350      	cbz	r0, 80033c4 <f_open+0x160>
					dw = dj.fs->winsect;
 800336e:	f241 022c 	movw	r2, #4140	; 0x102c
					res = remove_chain(dj.fs, cl);
 8003372:	4601      	mov	r1, r0
 8003374:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 8003376:	f853 b002 	ldr.w	fp, [r3, r2]
					res = remove_chain(dj.fs, cl);
 800337a:	f7ff ff02 	bl	8003182 <remove_chain>
					if (res == FR_OK) {
 800337e:	b950      	cbnz	r0, 8003396 <f_open+0x132>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8003380:	f8da 0000 	ldr.w	r0, [sl]
 8003384:	f241 020c 	movw	r2, #4108	; 0x100c
 8003388:	f108 33ff 	add.w	r3, r8, #4294967295
 800338c:	5083      	str	r3, [r0, r2]
						res = move_window(dj.fs, dw);
 800338e:	4659      	mov	r1, fp
 8003390:	f7ff f942 	bl	8002618 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 8003394:	b1b0      	cbz	r0, 80033c4 <f_open+0x160>
					res = FR_DENIED;
 8003396:	4605      	mov	r5, r0
 8003398:	e033      	b.n	8003402 <f_open+0x19e>
				res = FR_INVALID_NAME;
 800339a:	2006      	movs	r0, #6
 800339c:	e79a      	b.n	80032d4 <f_open+0x70>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800339e:	7ae3      	ldrb	r3, [r4, #11]
 80033a0:	f013 0f11 	tst.w	r3, #17
 80033a4:	d137      	bne.n	8003416 <f_open+0x1b2>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80033a6:	f018 0f04 	tst.w	r8, #4
 80033aa:	d0ac      	beq.n	8003306 <f_open+0xa2>
						res = FR_EXIST;
 80033ac:	2508      	movs	r5, #8
 80033ae:	e028      	b.n	8003402 <f_open+0x19e>
			if (res == FR_OK) {					/* Follow succeeded */
 80033b0:	2800      	cmp	r0, #0
 80033b2:	d1f0      	bne.n	8003396 <f_open+0x132>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80033b4:	7ae3      	ldrb	r3, [r4, #11]
 80033b6:	06d8      	lsls	r0, r3, #27
 80033b8:	d42b      	bmi.n	8003412 <f_open+0x1ae>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80033ba:	f018 0f02 	tst.w	r8, #2
 80033be:	d001      	beq.n	80033c4 <f_open+0x160>
 80033c0:	07da      	lsls	r2, r3, #31
 80033c2:	d428      	bmi.n	8003416 <f_open+0x1b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80033c4:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 80033c8:	3218      	adds	r2, #24
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80033ca:	073b      	lsls	r3, r7, #28
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	f241 032c 	movw	r3, #4140	; 0x102c
				mode |= FA__WRITTEN;
 80033d2:	bf48      	it	mi
 80033d4:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80033d8:	58d2      	ldr	r2, [r2, r3]
 80033da:	f241 031c 	movw	r3, #4124	; 0x101c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80033de:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80033e2:	50f2      	str	r2, [r6, r3]
			fp->dir_ptr = dir;
 80033e4:	f506 5381 	add.w	r3, r6, #4128	; 0x1020
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80033e8:	bf18      	it	ne
 80033ea:	2101      	movne	r1, #1
			fp->dir_ptr = dir;
 80033ec:	601c      	str	r4, [r3, #0]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80033ee:	bf08      	it	eq
 80033f0:	2100      	moveq	r1, #0
 80033f2:	a806      	add	r0, sp, #24
 80033f4:	f7fe ffa0 	bl	8002338 <inc_lock>
 80033f8:	f241 0328 	movw	r3, #4136	; 0x1028
 80033fc:	50f0      	str	r0, [r6, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 80033fe:	b960      	cbnz	r0, 800341a <f_open+0x1b6>
 8003400:	2502      	movs	r5, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8003402:	4628      	mov	r0, r5
 8003404:	f50d 5d81 	add.w	sp, sp, #4128	; 0x1020
 8003408:	b007      	add	sp, #28
 800340a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fp) return FR_INVALID_OBJECT;
 800340e:	2509      	movs	r5, #9
 8003410:	e7f7      	b.n	8003402 <f_open+0x19e>
					res = FR_NO_FILE;
 8003412:	2504      	movs	r5, #4
 8003414:	e7f5      	b.n	8003402 <f_open+0x19e>
					res = FR_DENIED;
 8003416:	2507      	movs	r5, #7
 8003418:	e7f3      	b.n	8003402 <f_open+0x19e>
			fp->flag = mode;					/* File access mode */
 800341a:	f241 0a06 	movw	sl, #4102	; 0x1006
			fp->err = 0;						/* Clear error flag */
 800341e:	f241 0307 	movw	r3, #4103	; 0x1007
			fp->flag = mode;					/* File access mode */
 8003422:	f806 700a 	strb.w	r7, [r6, sl]
			fp->err = 0;						/* Clear error flag */
 8003426:	2700      	movs	r7, #0
 8003428:	54f7      	strb	r7, [r6, r3]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800342a:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 800342e:	3318      	adds	r3, #24
 8003430:	f8d3 8000 	ldr.w	r8, [r3]
 8003434:	f508 5380 	add.w	r3, r8, #4096	; 0x1000
 8003438:	4621      	mov	r1, r4
 800343a:	7818      	ldrb	r0, [r3, #0]
 800343c:	f7ff f83d 	bl	80024ba <ld_clust.isra.0>
 8003440:	f241 0310 	movw	r3, #4112	; 0x1010
 8003444:	50f0      	str	r0, [r6, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8003446:	f241 030c 	movw	r3, #4108	; 0x100c
 800344a:	69e2      	ldr	r2, [r4, #28]
 800344c:	50f2      	str	r2, [r6, r3]
			fp->fptr = 0;						/* File pointer */
 800344e:	f241 0308 	movw	r3, #4104	; 0x1008
			fp->id = fp->fs->id;
 8003452:	f838 200a 	ldrh.w	r2, [r8, sl]
			fp->fptr = 0;						/* File pointer */
 8003456:	50f7      	str	r7, [r6, r3]
			fp->dsect = 0;
 8003458:	f241 0318 	movw	r3, #4120	; 0x1018
 800345c:	50f7      	str	r7, [r6, r3]
			fp->cltbl = 0;						/* Normal seek mode */
 800345e:	f241 0324 	movw	r3, #4132	; 0x1024
 8003462:	50f7      	str	r7, [r6, r3]
			fp->id = fp->fs->id;
 8003464:	f241 0304 	movw	r3, #4100	; 0x1004
			fp->fs = dj.fs;	 					/* Validate file object */
 8003468:	f8c9 8000 	str.w	r8, [r9]
			fp->id = fp->fs->id;
 800346c:	52f2      	strh	r2, [r6, r3]
 800346e:	e7c8      	b.n	8003402 <f_open+0x19e>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003470:	2012      	movs	r0, #18
 8003472:	e790      	b.n	8003396 <f_open+0x132>
 8003474:	20000028 	.word	0x20000028

08003478 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8003478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800347c:	b085      	sub	sp, #20
 800347e:	4691      	mov	r9, r2
 8003480:	9303      	str	r3, [sp, #12]
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8003482:	9a03      	ldr	r2, [sp, #12]
 8003484:	2300      	movs	r3, #0
 8003486:	6013      	str	r3, [r2, #0]
{
 8003488:	4604      	mov	r4, r0
 800348a:	468b      	mov	fp, r1

	res = validate(fp);						/* Check validity */
 800348c:	f7fe fff9 	bl	8002482 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8003490:	4605      	mov	r5, r0
 8003492:	2800      	cmp	r0, #0
 8003494:	d155      	bne.n	8003542 <f_write+0xca>
	if (fp->err)							/* Check error */
 8003496:	f241 0307 	movw	r3, #4103	; 0x1007
 800349a:	5ce3      	ldrb	r3, [r4, r3]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f040 810c 	bne.w	80036ba <f_write+0x242>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80034a2:	f241 0306 	movw	r3, #4102	; 0x1006
 80034a6:	5ce3      	ldrb	r3, [r4, r3]
 80034a8:	0799      	lsls	r1, r3, #30
 80034aa:	f140 8108 	bpl.w	80036be <f_write+0x246>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80034ae:	f241 0708 	movw	r7, #4104	; 0x1008
 80034b2:	59e3      	ldr	r3, [r4, r7]
 80034b4:	eb19 0f03 	cmn.w	r9, r3
 80034b8:	d203      	bcs.n	80034c2 <f_write+0x4a>

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80034ba:	4427      	add	r7, r4
	for ( ;  btw;							/* Repeat until all data written */
 80034bc:	f1b9 0f00 	cmp.w	r9, #0
 80034c0:	d10f      	bne.n	80034e2 <f_write+0x6a>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80034c2:	f241 0308 	movw	r3, #4104	; 0x1008
 80034c6:	58e2      	ldr	r2, [r4, r3]
 80034c8:	f241 030c 	movw	r3, #4108	; 0x100c
 80034cc:	58e1      	ldr	r1, [r4, r3]
 80034ce:	428a      	cmp	r2, r1
 80034d0:	f200 80f1 	bhi.w	80036b6 <f_write+0x23e>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80034d4:	f241 0206 	movw	r2, #4102	; 0x1006
 80034d8:	5ca3      	ldrb	r3, [r4, r2]
 80034da:	f043 0320 	orr.w	r3, r3, #32
 80034de:	54a3      	strb	r3, [r4, r2]
 80034e0:	e02f      	b.n	8003542 <f_write+0xca>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80034e2:	f504 5a80 	add.w	sl, r4, #4096	; 0x1000
 80034e6:	f241 030a 	movw	r3, #4106	; 0x100a
 80034ea:	f8da 0000 	ldr.w	r0, [sl]
 80034ee:	6839      	ldr	r1, [r7, #0]
 80034f0:	5ac3      	ldrh	r3, [r0, r3]
 80034f2:	fbb1 f2f3 	udiv	r2, r1, r3
 80034f6:	fb03 1312 	mls	r3, r3, r2, r1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f040 80bf 	bne.w	800367e <f_write+0x206>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8003500:	f241 0302 	movw	r3, #4098	; 0x1002
 8003504:	5cc6      	ldrb	r6, [r0, r3]
 8003506:	3e01      	subs	r6, #1
 8003508:	4016      	ands	r6, r2
			if (!csect) {					/* On the cluster boundary? */
 800350a:	f016 03ff 	ands.w	r3, r6, #255	; 0xff
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	d12b      	bne.n	800356a <f_write+0xf2>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8003512:	b931      	cbnz	r1, 8003522 <f_write+0xaa>
					clst = fp->sclust;		/* Follow from the origin */
 8003514:	f241 0310 	movw	r3, #4112	; 0x1010
 8003518:	58e1      	ldr	r1, [r4, r3]
					if (clst == 0)			/* When no cluster is allocated, */
 800351a:	b961      	cbnz	r1, 8003536 <f_write+0xbe>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800351c:	f7ff fbf9 	bl	8002d12 <create_chain>
 8003520:	e006      	b.n	8003530 <f_write+0xb8>
					if (fp->cltbl)
 8003522:	f241 0324 	movw	r3, #4132	; 0x1024
 8003526:	58e3      	ldr	r3, [r4, r3]
 8003528:	b17b      	cbz	r3, 800354a <f_write+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800352a:	4620      	mov	r0, r4
 800352c:	f7fe ff76 	bl	800241c <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8003530:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8003532:	2800      	cmp	r0, #0
 8003534:	d0c5      	beq.n	80034c2 <f_write+0x4a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8003536:	2901      	cmp	r1, #1
 8003538:	d10b      	bne.n	8003552 <f_write+0xda>
 800353a:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800353c:	f241 0307 	movw	r3, #4103	; 0x1007
 8003540:	54e5      	strb	r5, [r4, r3]

	LEAVE_FF(fp->fs, FR_OK);
}
 8003542:	4628      	mov	r0, r5
 8003544:	b005      	add	sp, #20
 8003546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800354a:	f241 0314 	movw	r3, #4116	; 0x1014
 800354e:	58e1      	ldr	r1, [r4, r3]
 8003550:	e7e4      	b.n	800351c <f_write+0xa4>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003552:	1c4a      	adds	r2, r1, #1
 8003554:	d101      	bne.n	800355a <f_write+0xe2>
 8003556:	2501      	movs	r5, #1
 8003558:	e7f0      	b.n	800353c <f_write+0xc4>
				fp->clust = clst;			/* Update current cluster */
 800355a:	f241 0314 	movw	r3, #4116	; 0x1014
 800355e:	50e1      	str	r1, [r4, r3]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8003560:	f241 0310 	movw	r3, #4112	; 0x1010
 8003564:	58e2      	ldr	r2, [r4, r3]
 8003566:	b902      	cbnz	r2, 800356a <f_write+0xf2>
 8003568:	50e1      	str	r1, [r4, r3]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800356a:	f241 0606 	movw	r6, #4102	; 0x1006
 800356e:	5da3      	ldrb	r3, [r4, r6]
 8003570:	065b      	lsls	r3, r3, #25
 8003572:	d512      	bpl.n	800359a <f_write+0x122>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8003574:	f8da 0000 	ldr.w	r0, [sl]
 8003578:	f241 0218 	movw	r2, #4120	; 0x1018
 800357c:	f241 0e01 	movw	lr, #4097	; 0x1001
 8003580:	2301      	movs	r3, #1
 8003582:	58a2      	ldr	r2, [r4, r2]
 8003584:	f810 000e 	ldrb.w	r0, [r0, lr]
 8003588:	4621      	mov	r1, r4
 800358a:	f7fe fe17 	bl	80021bc <disk_write>
 800358e:	2800      	cmp	r0, #0
 8003590:	d1e1      	bne.n	8003556 <f_write+0xde>
				fp->flag &= ~FA__DIRTY;
 8003592:	5da3      	ldrb	r3, [r4, r6]
 8003594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003598:	55a3      	strb	r3, [r4, r6]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800359a:	f8da 3000 	ldr.w	r3, [sl]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	f241 0314 	movw	r3, #4116	; 0x1014
 80035a4:	9800      	ldr	r0, [sp, #0]
 80035a6:	58e1      	ldr	r1, [r4, r3]
 80035a8:	f7ff fa06 	bl	80029b8 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80035ac:	2800      	cmp	r0, #0
 80035ae:	d0c4      	beq.n	800353a <f_write+0xc2>
			sect += csect;
 80035b0:	9b02      	ldr	r3, [sp, #8]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80035b2:	9a00      	ldr	r2, [sp, #0]
			sect += csect;
 80035b4:	18c3      	adds	r3, r0, r3
 80035b6:	9301      	str	r3, [sp, #4]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80035b8:	f241 030a 	movw	r3, #4106	; 0x100a
 80035bc:	f832 8003 	ldrh.w	r8, [r2, r3]
 80035c0:	fbb9 f8f8 	udiv	r8, r9, r8
			if (cc) {						/* Write maximum contiguous sectors directly */
 80035c4:	f1b8 0f00 	cmp.w	r8, #0
 80035c8:	d03e      	beq.n	8003648 <f_write+0x1d0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80035ca:	f241 0302 	movw	r3, #4098	; 0x1002
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80035ce:	f241 0e01 	movw	lr, #4097	; 0x1001
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80035d2:	5cd3      	ldrb	r3, [r2, r3]
 80035d4:	9a02      	ldr	r2, [sp, #8]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80035d6:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80035d8:	4442      	add	r2, r8
 80035da:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 80035dc:	bf88      	it	hi
 80035de:	9a02      	ldrhi	r2, [sp, #8]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80035e0:	f810 000e 	ldrb.w	r0, [r0, lr]
					cc = fp->fs->csize - csect;
 80035e4:	bf88      	it	hi
 80035e6:	eba3 0802 	subhi.w	r8, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80035ea:	4643      	mov	r3, r8
 80035ec:	9a01      	ldr	r2, [sp, #4]
 80035ee:	4659      	mov	r1, fp
 80035f0:	f7fe fde4 	bl	80021bc <disk_write>
 80035f4:	2800      	cmp	r0, #0
 80035f6:	d1ae      	bne.n	8003556 <f_write+0xde>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80035f8:	f241 0318 	movw	r3, #4120	; 0x1018
 80035fc:	58e1      	ldr	r1, [r4, r3]
 80035fe:	9b01      	ldr	r3, [sp, #4]
 8003600:	1ac9      	subs	r1, r1, r3
 8003602:	4588      	cmp	r8, r1
 8003604:	d90d      	bls.n	8003622 <f_write+0x1aa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8003606:	f241 030a 	movw	r3, #4106	; 0x100a
 800360a:	f8da 2000 	ldr.w	r2, [sl]
 800360e:	5ad2      	ldrh	r2, [r2, r3]
 8003610:	4620      	mov	r0, r4
 8003612:	fb02 b101 	mla	r1, r2, r1, fp
 8003616:	f7fe fe47 	bl	80022a8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800361a:	5da3      	ldrb	r3, [r4, r6]
 800361c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003620:	55a3      	strb	r3, [r4, r6]
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8003622:	f8da 2000 	ldr.w	r2, [sl]
 8003626:	f241 030a 	movw	r3, #4106	; 0x100a
 800362a:	5ad3      	ldrh	r3, [r2, r3]
 800362c:	fb08 f803 	mul.w	r8, r8, r3
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	9a03      	ldr	r2, [sp, #12]
 8003634:	4443      	add	r3, r8
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	9b03      	ldr	r3, [sp, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4443      	add	r3, r8
 800363e:	44c3      	add	fp, r8
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	eba9 0908 	sub.w	r9, r9, r8
 8003646:	e739      	b.n	80034bc <f_write+0x44>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8003648:	f241 0618 	movw	r6, #4120	; 0x1018
 800364c:	9a01      	ldr	r2, [sp, #4]
 800364e:	59a3      	ldr	r3, [r4, r6]
 8003650:	429a      	cmp	r2, r3
 8003652:	d012      	beq.n	800367a <f_write+0x202>
				if (fp->fptr < fp->fsize &&
 8003654:	f241 030c 	movw	r3, #4108	; 0x100c
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	58e3      	ldr	r3, [r4, r3]
 800365c:	429a      	cmp	r2, r3
 800365e:	d20c      	bcs.n	800367a <f_write+0x202>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8003660:	f241 0e01 	movw	lr, #4097	; 0x1001
 8003664:	9800      	ldr	r0, [sp, #0]
 8003666:	9a01      	ldr	r2, [sp, #4]
 8003668:	f810 000e 	ldrb.w	r0, [r0, lr]
 800366c:	2301      	movs	r3, #1
 800366e:	4621      	mov	r1, r4
 8003670:	f7fe fd96 	bl	80021a0 <disk_read>
				if (fp->fptr < fp->fsize &&
 8003674:	2800      	cmp	r0, #0
 8003676:	f47f af6e 	bne.w	8003556 <f_write+0xde>
			fp->dsect = sect;
 800367a:	9b01      	ldr	r3, [sp, #4]
 800367c:	51a3      	str	r3, [r4, r6]
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800367e:	f8da 2000 	ldr.w	r2, [sl]
 8003682:	f241 030a 	movw	r3, #4106	; 0x100a
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8003686:	4659      	mov	r1, fp
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8003688:	f832 8003 	ldrh.w	r8, [r2, r3]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	fbb3 f0f8 	udiv	r0, r3, r8
 8003692:	fb08 3010 	mls	r0, r8, r0, r3
 8003696:	eba8 0800 	sub.w	r8, r8, r0
 800369a:	45c8      	cmp	r8, r9
 800369c:	bf28      	it	cs
 800369e:	46c8      	movcs	r8, r9
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80036a0:	4642      	mov	r2, r8
 80036a2:	4420      	add	r0, r4
 80036a4:	f7fe fe00 	bl	80022a8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80036a8:	f241 0206 	movw	r2, #4102	; 0x1006
 80036ac:	5ca3      	ldrb	r3, [r4, r2]
 80036ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b2:	54a3      	strb	r3, [r4, r2]
 80036b4:	e7bc      	b.n	8003630 <f_write+0x1b8>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80036b6:	50e2      	str	r2, [r4, r3]
 80036b8:	e70c      	b.n	80034d4 <f_write+0x5c>
 80036ba:	461d      	mov	r5, r3
 80036bc:	e741      	b.n	8003542 <f_write+0xca>
		LEAVE_FF(fp->fs, FR_DENIED);
 80036be:	2507      	movs	r5, #7
 80036c0:	e73f      	b.n	8003542 <f_write+0xca>

080036c2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80036c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c4:	4605      	mov	r5, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80036c6:	f7fe fedc 	bl	8002482 <validate>
	if (res == FR_OK) {
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d15e      	bne.n	800378c <f_sync+0xca>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80036ce:	f241 0406 	movw	r4, #4102	; 0x1006
 80036d2:	5d2b      	ldrb	r3, [r5, r4]
 80036d4:	069a      	lsls	r2, r3, #26
 80036d6:	d559      	bpl.n	800378c <f_sync+0xca>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80036d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80036dc:	f505 5680 	add.w	r6, r5, #4096	; 0x1000
 80036e0:	d010      	beq.n	8003704 <f_sync+0x42>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80036e2:	6837      	ldr	r7, [r6, #0]
 80036e4:	f241 0218 	movw	r2, #4120	; 0x1018
 80036e8:	f241 0001 	movw	r0, #4097	; 0x1001
 80036ec:	2301      	movs	r3, #1
 80036ee:	58aa      	ldr	r2, [r5, r2]
 80036f0:	5c38      	ldrb	r0, [r7, r0]
 80036f2:	4629      	mov	r1, r5
 80036f4:	f7fe fd62 	bl	80021bc <disk_write>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d146      	bne.n	800378a <f_sync+0xc8>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 80036fc:	5d2b      	ldrb	r3, [r5, r4]
 80036fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003702:	552b      	strb	r3, [r5, r4]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8003704:	f241 031c 	movw	r3, #4124	; 0x101c
 8003708:	6830      	ldr	r0, [r6, #0]
 800370a:	58e9      	ldr	r1, [r5, r3]
 800370c:	f7fe ff84 	bl	8002618 <move_window>
 8003710:	4607      	mov	r7, r0
			if (res == FR_OK) {
 8003712:	2800      	cmp	r0, #0
 8003714:	d13a      	bne.n	800378c <f_sync+0xca>
				dir = fp->dir_ptr;
 8003716:	f505 5381 	add.w	r3, r5, #4128	; 0x1020
 800371a:	681c      	ldr	r4, [r3, #0]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800371c:	7ae3      	ldrb	r3, [r4, #11]
 800371e:	f043 0320 	orr.w	r3, r3, #32
 8003722:	72e3      	strb	r3, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8003724:	f241 030c 	movw	r3, #4108	; 0x100c
 8003728:	58ea      	ldr	r2, [r5, r3]
 800372a:	7722      	strb	r2, [r4, #28]
 800372c:	5aea      	ldrh	r2, [r5, r3]
 800372e:	0a12      	lsrs	r2, r2, #8
 8003730:	7762      	strb	r2, [r4, #29]
 8003732:	58ea      	ldr	r2, [r5, r3]
 8003734:	0c12      	lsrs	r2, r2, #16
 8003736:	77a2      	strb	r2, [r4, #30]
 8003738:	58eb      	ldr	r3, [r5, r3]
 800373a:	0e1b      	lsrs	r3, r3, #24
 800373c:	77e3      	strb	r3, [r4, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800373e:	f241 0310 	movw	r3, #4112	; 0x1010
 8003742:	58eb      	ldr	r3, [r5, r3]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8003744:	76a3      	strb	r3, [r4, #26]
 8003746:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800374a:	0c1b      	lsrs	r3, r3, #16
 800374c:	7523      	strb	r3, [r4, #20]
 800374e:	0a1b      	lsrs	r3, r3, #8
	ST_WORD(dir + DIR_FstClusLO, cl);
 8003750:	76e2      	strb	r2, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8003752:	7563      	strb	r3, [r4, #21]
				tm = GET_FATTIME();							/* Update updated time */
 8003754:	f000 fa6c 	bl	8003c30 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8003758:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800375c:	75a0      	strb	r0, [r4, #22]
 800375e:	75e3      	strb	r3, [r4, #23]
				ST_WORD(dir + DIR_LstAccDate, 0);
				fp->flag &= ~FA__WRITTEN;
 8003760:	f241 0206 	movw	r2, #4102	; 0x1006
				ST_DWORD(dir + DIR_WrtTime, tm);
 8003764:	0c03      	lsrs	r3, r0, #16
 8003766:	0e00      	lsrs	r0, r0, #24
 8003768:	7623      	strb	r3, [r4, #24]
 800376a:	7660      	strb	r0, [r4, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800376c:	74a7      	strb	r7, [r4, #18]
 800376e:	74e7      	strb	r7, [r4, #19]
				fp->flag &= ~FA__WRITTEN;
 8003770:	5cab      	ldrb	r3, [r5, r2]
 8003772:	f023 0320 	bic.w	r3, r3, #32
 8003776:	54ab      	strb	r3, [r5, r2]
				fp->fs->wflag = 1;
 8003778:	f241 0304 	movw	r3, #4100	; 0x1004
 800377c:	6830      	ldr	r0, [r6, #0]
 800377e:	2201      	movs	r2, #1
 8003780:	54c2      	strb	r2, [r0, r3]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 8003782:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				res = sync_fs(fp->fs);
 8003786:	f7fe bee2 	b.w	800254e <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800378a:	2001      	movs	r0, #1
}
 800378c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800378e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800378e:	b510      	push	{r4, lr}
 8003790:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003792:	f7ff ff96 	bl	80036c2 <f_sync>
	if (res == FR_OK)
 8003796:	b960      	cbnz	r0, 80037b2 <f_close+0x24>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8003798:	4620      	mov	r0, r4
 800379a:	f7fe fe72 	bl	8002482 <validate>
		if (res == FR_OK) {
 800379e:	b940      	cbnz	r0, 80037b2 <f_close+0x24>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80037a0:	f241 0328 	movw	r3, #4136	; 0x1028
 80037a4:	58e0      	ldr	r0, [r4, r3]
 80037a6:	f7fe fe1d 	bl	80023e4 <dec_lock>
			if (res == FR_OK)
 80037aa:	b910      	cbnz	r0, 80037b2 <f_close+0x24>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80037ac:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 80037b0:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80037b2:	bd10      	pop	{r4, pc}

080037b4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80037b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b8:	4604      	mov	r4, r0
 80037ba:	460d      	mov	r5, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80037bc:	f7fe fe61 	bl	8002482 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80037c0:	4606      	mov	r6, r0
 80037c2:	bb78      	cbnz	r0, 8003824 <f_lseek+0x70>
	if (fp->err)						/* Check error */
 80037c4:	f241 0307 	movw	r3, #4103	; 0x1007
 80037c8:	5ce3      	ldrb	r3, [r4, r3]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f040 817b 	bne.w	8003ac6 <f_lseek+0x312>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80037d0:	f241 0324 	movw	r3, #4132	; 0x1024
 80037d4:	58e3      	ldr	r3, [r4, r3]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80a3 	beq.w	8003922 <f_lseek+0x16e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80037dc:	1c68      	adds	r0, r5, #1
 80037de:	d147      	bne.n	8003870 <f_lseek+0xbc>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80037e0:	1d1f      	adds	r7, r3, #4
 80037e2:	f8d3 b000 	ldr.w	fp, [r3]
			cl = fp->sclust;			/* Top of the chain */
 80037e6:	f241 0310 	movw	r3, #4112	; 0x1010
 80037ea:	2502      	movs	r5, #2
 80037ec:	f854 8003 	ldr.w	r8, [r4, r3]
			if (cl) {
 80037f0:	f1b8 0f00 	cmp.w	r8, #0
 80037f4:	d032      	beq.n	800385c <f_lseek+0xa8>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
					do {
						pcl = cl; ncl++;
						cl = get_fat(fp->fs, cl);
 80037f6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					} while (cl == pcl + 1);
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
						*tbl++ = ncl; *tbl++ = tcl;
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80037fa:	f241 0214 	movw	r2, #4116	; 0x1014
 80037fe:	46c1      	mov	r9, r8
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8003800:	f04f 0a00 	mov.w	sl, #0
						cl = get_fat(fp->fs, cl);
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	9201      	str	r2, [sp, #4]
 8003808:	4649      	mov	r1, r9
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	f7ff f8e6 	bl	80029dc <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8003810:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 8003812:	f10a 0a01 	add.w	sl, sl, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8003816:	9b00      	ldr	r3, [sp, #0]
 8003818:	9a01      	ldr	r2, [sp, #4]
 800381a:	d809      	bhi.n	8003830 <f_lseek+0x7c>
 800381c:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800381e:	f241 0307 	movw	r3, #4103	; 0x1007
 8003822:	54e6      	strb	r6, [r4, r3]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 8003824:	4630      	mov	r0, r6
 8003826:	b003      	add	sp, #12
 8003828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800382c:	4680      	mov	r8, r0
 800382e:	e7e6      	b.n	80037fe <f_lseek+0x4a>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003830:	1c41      	adds	r1, r0, #1
 8003832:	d101      	bne.n	8003838 <f_lseek+0x84>
 8003834:	2601      	movs	r6, #1
 8003836:	e7f2      	b.n	800381e <f_lseek+0x6a>
					} while (cl == pcl + 1);
 8003838:	f109 0101 	add.w	r1, r9, #1
 800383c:	4288      	cmp	r0, r1
 800383e:	4681      	mov	r9, r0
 8003840:	d0e0      	beq.n	8003804 <f_lseek+0x50>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8003842:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8003844:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 8003846:	bf21      	itttt	cs
 8003848:	4639      	movcs	r1, r7
 800384a:	f841 ab08 	strcs.w	sl, [r1], #8
 800384e:	f8c7 8004 	strcs.w	r8, [r7, #4]
 8003852:	460f      	movcs	r7, r1
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8003854:	6819      	ldr	r1, [r3, #0]
 8003856:	5889      	ldr	r1, [r1, r2]
 8003858:	4288      	cmp	r0, r1
 800385a:	d3e7      	bcc.n	800382c <f_lseek+0x78>
			*fp->cltbl = ulen;	/* Number of items used */
 800385c:	f241 0324 	movw	r3, #4132	; 0x1024
			if (ulen <= tlen)
 8003860:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 8003862:	58e3      	ldr	r3, [r4, r3]
 8003864:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen)
 8003866:	f200 8130 	bhi.w	8003aca <f_lseek+0x316>
				*tbl = 0;		/* Terminate table */
 800386a:	2300      	movs	r3, #0
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	e7d9      	b.n	8003824 <f_lseek+0x70>
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8003870:	f241 030c 	movw	r3, #4108	; 0x100c
 8003874:	58e3      	ldr	r3, [r4, r3]
 8003876:	429d      	cmp	r5, r3
 8003878:	bf28      	it	cs
 800387a:	461d      	movcs	r5, r3
			fp->fptr = ofs;				/* Set file pointer */
 800387c:	f241 0308 	movw	r3, #4104	; 0x1008
 8003880:	50e5      	str	r5, [r4, r3]
			if (ofs) {
 8003882:	2d00      	cmp	r5, #0
 8003884:	d0ce      	beq.n	8003824 <f_lseek+0x70>
				fp->clust = clmt_clust(fp, ofs - 1);
 8003886:	f105 39ff 	add.w	r9, r5, #4294967295
 800388a:	4649      	mov	r1, r9
 800388c:	4620      	mov	r0, r4
				dsc = clust2sect(fp->fs, fp->clust);
 800388e:	f504 5880 	add.w	r8, r4, #4096	; 0x1000
				fp->clust = clmt_clust(fp, ofs - 1);
 8003892:	f7fe fdc3 	bl	800241c <clmt_clust>
 8003896:	f241 0314 	movw	r3, #4116	; 0x1014
				dsc = clust2sect(fp->fs, fp->clust);
 800389a:	f8d8 7000 	ldr.w	r7, [r8]
				fp->clust = clmt_clust(fp, ofs - 1);
 800389e:	50e0      	str	r0, [r4, r3]
 80038a0:	4601      	mov	r1, r0
				dsc = clust2sect(fp->fs, fp->clust);
 80038a2:	4638      	mov	r0, r7
 80038a4:	f7ff f888 	bl	80029b8 <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d0b7      	beq.n	800381c <f_lseek+0x68>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80038ac:	f241 030a 	movw	r3, #4106	; 0x100a
 80038b0:	5afb      	ldrh	r3, [r7, r3]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80038b2:	fbb5 f2f3 	udiv	r2, r5, r3
 80038b6:	fb03 5512 	mls	r5, r3, r2, r5
 80038ba:	2d00      	cmp	r5, #0
 80038bc:	d0b2      	beq.n	8003824 <f_lseek+0x70>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80038be:	fbb9 f9f3 	udiv	r9, r9, r3
 80038c2:	f241 0202 	movw	r2, #4098	; 0x1002
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80038c6:	f241 0318 	movw	r3, #4120	; 0x1018
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80038ca:	5cbd      	ldrb	r5, [r7, r2]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80038cc:	58e2      	ldr	r2, [r4, r3]
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80038ce:	3d01      	subs	r5, #1
 80038d0:	ea05 0509 	and.w	r5, r5, r9
 80038d4:	4405      	add	r5, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80038d6:	4295      	cmp	r5, r2
 80038d8:	d0a4      	beq.n	8003824 <f_lseek+0x70>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80038da:	f241 0306 	movw	r3, #4102	; 0x1006
 80038de:	5ce3      	ldrb	r3, [r4, r3]
 80038e0:	0659      	lsls	r1, r3, #25
 80038e2:	d50e      	bpl.n	8003902 <f_lseek+0x14e>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80038e4:	f241 0001 	movw	r0, #4097	; 0x1001
 80038e8:	2301      	movs	r3, #1
 80038ea:	4621      	mov	r1, r4
 80038ec:	5c38      	ldrb	r0, [r7, r0]
 80038ee:	f7fe fc65 	bl	80021bc <disk_write>
 80038f2:	2800      	cmp	r0, #0
 80038f4:	d19e      	bne.n	8003834 <f_lseek+0x80>
						fp->flag &= ~FA__DIRTY;
 80038f6:	f241 0206 	movw	r2, #4102	; 0x1006
 80038fa:	5ca3      	ldrb	r3, [r4, r2]
 80038fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003900:	54a3      	strb	r3, [r4, r2]
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8003902:	f8d8 7000 	ldr.w	r7, [r8]
 8003906:	f241 0001 	movw	r0, #4097	; 0x1001
 800390a:	2301      	movs	r3, #1
 800390c:	462a      	mov	r2, r5
 800390e:	4621      	mov	r1, r4
 8003910:	5c38      	ldrb	r0, [r7, r0]
 8003912:	f7fe fc45 	bl	80021a0 <disk_read>
 8003916:	2800      	cmp	r0, #0
 8003918:	d18c      	bne.n	8003834 <f_lseek+0x80>
					fp->dsect = dsc;
 800391a:	f241 0318 	movw	r3, #4120	; 0x1018
 800391e:	50e5      	str	r5, [r4, r3]
 8003920:	e780      	b.n	8003824 <f_lseek+0x70>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8003922:	f241 030c 	movw	r3, #4108	; 0x100c
 8003926:	58e3      	ldr	r3, [r4, r3]
 8003928:	429d      	cmp	r5, r3
 800392a:	d906      	bls.n	800393a <f_lseek+0x186>
			 && !(fp->flag & FA_WRITE)
 800392c:	f241 0206 	movw	r2, #4102	; 0x1006
 8003930:	5ca2      	ldrb	r2, [r4, r2]
 8003932:	f012 0f02 	tst.w	r2, #2
 8003936:	bf08      	it	eq
 8003938:	461d      	moveq	r5, r3
		ifptr = fp->fptr;
 800393a:	f241 0108 	movw	r1, #4104	; 0x1008
		fp->fptr = nsect = 0;
 800393e:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8003940:	5863      	ldr	r3, [r4, r1]
		fp->fptr = nsect = 0;
 8003942:	5062      	str	r2, [r4, r1]
		if (ofs) {
 8003944:	2d00      	cmp	r5, #0
 8003946:	d149      	bne.n	80039dc <f_lseek+0x228>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8003948:	f241 0308 	movw	r3, #4104	; 0x1008
 800394c:	58e2      	ldr	r2, [r4, r3]
 800394e:	f241 030c 	movw	r3, #4108	; 0x100c
 8003952:	58e1      	ldr	r1, [r4, r3]
 8003954:	428a      	cmp	r2, r1
 8003956:	f67f af65 	bls.w	8003824 <f_lseek+0x70>
			fp->fsize = fp->fptr;
 800395a:	50e2      	str	r2, [r4, r3]
			fp->flag |= FA__WRITTEN;
 800395c:	f241 0206 	movw	r2, #4102	; 0x1006
 8003960:	5ca3      	ldrb	r3, [r4, r2]
 8003962:	f043 0320 	orr.w	r3, r3, #32
 8003966:	54a3      	strb	r3, [r4, r2]
 8003968:	e75c      	b.n	8003824 <f_lseek+0x70>
		fp->fptr = nsect = 0;
 800396a:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800396c:	f241 030a 	movw	r3, #4106	; 0x100a
 8003970:	f8d8 0000 	ldr.w	r0, [r8]
 8003974:	5ac2      	ldrh	r2, [r0, r3]
 8003976:	f241 0308 	movw	r3, #4104	; 0x1008
 800397a:	58e1      	ldr	r1, [r4, r3]
 800397c:	fbb1 f3f2 	udiv	r3, r1, r2
 8003980:	fb02 1313 	mls	r3, r2, r3, r1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0df      	beq.n	8003948 <f_lseek+0x194>
 8003988:	f241 0318 	movw	r3, #4120	; 0x1018
 800398c:	58e2      	ldr	r2, [r4, r3]
 800398e:	4295      	cmp	r5, r2
 8003990:	d0da      	beq.n	8003948 <f_lseek+0x194>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8003992:	f241 0706 	movw	r7, #4102	; 0x1006
 8003996:	5de3      	ldrb	r3, [r4, r7]
 8003998:	065b      	lsls	r3, r3, #25
 800399a:	d50e      	bpl.n	80039ba <f_lseek+0x206>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800399c:	f241 0e01 	movw	lr, #4097	; 0x1001
 80039a0:	2301      	movs	r3, #1
 80039a2:	4621      	mov	r1, r4
 80039a4:	f810 000e 	ldrb.w	r0, [r0, lr]
 80039a8:	f7fe fc08 	bl	80021bc <disk_write>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	f47f af41 	bne.w	8003834 <f_lseek+0x80>
				fp->flag &= ~FA__DIRTY;
 80039b2:	5de3      	ldrb	r3, [r4, r7]
 80039b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039b8:	55e3      	strb	r3, [r4, r7]
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 80039ba:	f8d8 7000 	ldr.w	r7, [r8]
 80039be:	f241 0001 	movw	r0, #4097	; 0x1001
 80039c2:	2301      	movs	r3, #1
 80039c4:	462a      	mov	r2, r5
 80039c6:	4621      	mov	r1, r4
 80039c8:	5c38      	ldrb	r0, [r7, r0]
 80039ca:	f7fe fbe9 	bl	80021a0 <disk_read>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	f47f af30 	bne.w	8003834 <f_lseek+0x80>
			fp->dsect = nsect;
 80039d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80039d8:	50e5      	str	r5, [r4, r3]
 80039da:	e7b5      	b.n	8003948 <f_lseek+0x194>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80039dc:	f504 5880 	add.w	r8, r4, #4096	; 0x1000
 80039e0:	f241 0202 	movw	r2, #4098	; 0x1002
 80039e4:	f8d8 0000 	ldr.w	r0, [r8]
 80039e8:	f241 070a 	movw	r7, #4106	; 0x100a
 80039ec:	5c82      	ldrb	r2, [r0, r2]
 80039ee:	5bc7      	ldrh	r7, [r0, r7]
 80039f0:	4357      	muls	r7, r2
			if (ifptr > 0 &&
 80039f2:	b37b      	cbz	r3, 8003a54 <f_lseek+0x2a0>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80039f4:	3b01      	subs	r3, #1
 80039f6:	1e6a      	subs	r2, r5, #1
 80039f8:	fbb3 fef7 	udiv	lr, r3, r7
 80039fc:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 8003a00:	4572      	cmp	r2, lr
 8003a02:	d327      	bcc.n	8003a54 <f_lseek+0x2a0>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8003a04:	427a      	negs	r2, r7
 8003a06:	4013      	ands	r3, r2
 8003a08:	5063      	str	r3, [r4, r1]
				ofs -= fp->fptr;
 8003a0a:	1aed      	subs	r5, r5, r3
				clst = fp->clust;
 8003a0c:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a10:	58e1      	ldr	r1, [r4, r3]
			if (clst != 0) {
 8003a12:	2900      	cmp	r1, #0
 8003a14:	d0a9      	beq.n	800396a <f_lseek+0x1b6>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8003a16:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
 8003a1a:	f109 0906 	add.w	r9, r9, #6
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8003a1e:	f241 0a14 	movw	sl, #4116	; 0x1014
				while (ofs > bcs) {						/* Cluster following loop */
 8003a22:	42bd      	cmp	r5, r7
 8003a24:	d82a      	bhi.n	8003a7c <f_lseek+0x2c8>
				fp->fptr += ofs;
 8003a26:	f241 0208 	movw	r2, #4104	; 0x1008
				if (ofs % SS(fp->fs)) {
 8003a2a:	f8d8 0000 	ldr.w	r0, [r8]
				fp->fptr += ofs;
 8003a2e:	58a3      	ldr	r3, [r4, r2]
 8003a30:	442b      	add	r3, r5
 8003a32:	50a3      	str	r3, [r4, r2]
				if (ofs % SS(fp->fs)) {
 8003a34:	f241 030a 	movw	r3, #4106	; 0x100a
 8003a38:	5ac3      	ldrh	r3, [r0, r3]
 8003a3a:	fbb5 f7f3 	udiv	r7, r5, r3
 8003a3e:	fb03 5317 	mls	r3, r3, r7, r5
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d091      	beq.n	800396a <f_lseek+0x1b6>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8003a46:	f7fe ffb7 	bl	80029b8 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	f43f aee6 	beq.w	800381c <f_lseek+0x68>
					nsect += ofs / SS(fp->fs);
 8003a50:	183d      	adds	r5, r7, r0
 8003a52:	e78b      	b.n	800396c <f_lseek+0x1b8>
				clst = fp->sclust;						/* start from the first cluster */
 8003a54:	f241 0910 	movw	r9, #4112	; 0x1010
 8003a58:	f854 1009 	ldr.w	r1, [r4, r9]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8003a5c:	b951      	cbnz	r1, 8003a74 <f_lseek+0x2c0>
					clst = create_chain(fp->fs, 0);
 8003a5e:	f7ff f958 	bl	8002d12 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8003a62:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 8003a64:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8003a66:	f43f aed9 	beq.w	800381c <f_lseek+0x68>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003a6a:	1c42      	adds	r2, r0, #1
 8003a6c:	f43f aee2 	beq.w	8003834 <f_lseek+0x80>
					fp->sclust = clst;
 8003a70:	f844 0009 	str.w	r0, [r4, r9]
				fp->clust = clst;
 8003a74:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a78:	50e1      	str	r1, [r4, r3]
 8003a7a:	e7ca      	b.n	8003a12 <f_lseek+0x25e>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8003a7c:	f899 3000 	ldrb.w	r3, [r9]
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8003a80:	f8d8 0000 	ldr.w	r0, [r8]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8003a84:	079b      	lsls	r3, r3, #30
 8003a86:	d505      	bpl.n	8003a94 <f_lseek+0x2e0>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8003a88:	f7ff f943 	bl	8002d12 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 8003a8c:	4601      	mov	r1, r0
 8003a8e:	b920      	cbnz	r0, 8003a9a <f_lseek+0x2e6>
 8003a90:	463d      	mov	r5, r7
 8003a92:	e7c8      	b.n	8003a26 <f_lseek+0x272>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8003a94:	f7fe ffa2 	bl	80029dc <get_fat>
 8003a98:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003a9a:	1c4a      	adds	r2, r1, #1
 8003a9c:	f43f aeca 	beq.w	8003834 <f_lseek+0x80>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8003aa0:	2901      	cmp	r1, #1
 8003aa2:	f67f aebb 	bls.w	800381c <f_lseek+0x68>
 8003aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8003aaa:	f853 300a 	ldr.w	r3, [r3, sl]
 8003aae:	4299      	cmp	r1, r3
 8003ab0:	f4bf aeb4 	bcs.w	800381c <f_lseek+0x68>
					fp->fptr += bcs;
 8003ab4:	f241 0208 	movw	r2, #4104	; 0x1008
					fp->clust = clst;
 8003ab8:	f844 100a 	str.w	r1, [r4, sl]
					fp->fptr += bcs;
 8003abc:	58a3      	ldr	r3, [r4, r2]
 8003abe:	443b      	add	r3, r7
 8003ac0:	50a3      	str	r3, [r4, r2]
					ofs -= bcs;
 8003ac2:	1bed      	subs	r5, r5, r7
 8003ac4:	e7ad      	b.n	8003a22 <f_lseek+0x26e>
 8003ac6:	461e      	mov	r6, r3
 8003ac8:	e6ac      	b.n	8003824 <f_lseek+0x70>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8003aca:	2611      	movs	r6, #17
 8003acc:	e6aa      	b.n	8003824 <f_lseek+0x70>
	...

08003ad0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003ad0:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8003ad2:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <FATFS_LinkDriverEx+0x40>)
 8003ad4:	7a5c      	ldrb	r4, [r3, #9]
 8003ad6:	2c01      	cmp	r4, #1
 8003ad8:	d818      	bhi.n	8003b0c <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003ada:	7a5d      	ldrb	r5, [r3, #9]
 8003adc:	b2ed      	uxtb	r5, r5
 8003ade:	2400      	movs	r4, #0
 8003ae0:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8003ae2:	7a5d      	ldrb	r5, [r3, #9]
 8003ae4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8003ae8:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8003aea:	7a58      	ldrb	r0, [r3, #9]
 8003aec:	4418      	add	r0, r3
 8003aee:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8003af0:	7a5a      	ldrb	r2, [r3, #9]
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	1c50      	adds	r0, r2, #1
 8003af6:	b2c0      	uxtb	r0, r0
 8003af8:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8003afa:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8003afc:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8003afe:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8003b00:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8003b02:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8003b04:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8003b06:	70cc      	strb	r4, [r1, #3]
 8003b08:	4620      	mov	r0, r4
 8003b0a:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8003b0c:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 8003b0e:	bd30      	pop	{r4, r5, pc}
 8003b10:	20000044 	.word	0x20000044

08003b14 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8003b14:	2200      	movs	r2, #0
 8003b16:	f7ff bfdb 	b.w	8003ad0 <FATFS_LinkDriverEx>
	...

08003b1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8003b1c:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8003b1e:	2001      	movs	r0, #1
 8003b20:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8003b24:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8003b28:	4283      	cmp	r3, r0
 8003b2a:	d102      	bne.n	8003b32 <BSP_SD_Init+0x16>
  sd_state = HAL_SD_Init(&hsd);
 8003b2c:	4802      	ldr	r0, [pc, #8]	; (8003b38 <BSP_SD_Init+0x1c>)
 8003b2e:	f7fd fe89 	bl	8001844 <HAL_SD_Init>
}
 8003b32:	b003      	add	sp, #12
 8003b34:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b38:	2000f0ec 	.word	0x2000f0ec

08003b3c <BSP_SD_ReadBlocks_DMA>:
{
 8003b3c:	b570      	push	{r4, r5, r6, lr}
	if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *) pData, ReadAddr, NumOfBlocks)
 8003b3e:	4613      	mov	r3, r2
 8003b40:	460a      	mov	r2, r1
 8003b42:	4601      	mov	r1, r0
 8003b44:	4812      	ldr	r0, [pc, #72]	; (8003b90 <BSP_SD_ReadBlocks_DMA+0x54>)
 8003b46:	f7fd fb85 	bl	8001254 <HAL_SD_ReadBlocks_DMA>
 8003b4a:	b108      	cbz	r0, 8003b50 <BSP_SD_ReadBlocks_DMA+0x14>
	!= HAL_OK) { return MSD_ERROR; }
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}
 8003b50:	4d10      	ldr	r5, [pc, #64]	; (8003b94 <BSP_SD_ReadBlocks_DMA+0x58>)
		state_return = HAL_SD_GetState(&hsd);
 8003b52:	4c0f      	ldr	r4, [pc, #60]	; (8003b90 <BSP_SD_ReadBlocks_DMA+0x54>)
 8003b54:	462e      	mov	r6, r5
 8003b56:	4620      	mov	r0, r4
 8003b58:	f7fd fc82 	bl	8001460 <HAL_SD_GetState>
	} while ((HAL_SD_STATE_BUSY == state_return) && (SD_DATATIMEOUT > timeout));
 8003b5c:	2803      	cmp	r0, #3
 8003b5e:	d102      	bne.n	8003b66 <BSP_SD_ReadBlocks_DMA+0x2a>
 8003b60:	3d01      	subs	r5, #1
 8003b62:	d1f8      	bne.n	8003b56 <BSP_SD_ReadBlocks_DMA+0x1a>
 8003b64:	e7f2      	b.n	8003b4c <BSP_SD_ReadBlocks_DMA+0x10>
	if (HAL_SD_STATE_READY != state_return) { return MSD_ERROR; }
 8003b66:	2801      	cmp	r0, #1
 8003b68:	d1f0      	bne.n	8003b4c <BSP_SD_ReadBlocks_DMA+0x10>
		sd_card_state_return = HAL_SD_GetCardState(&hsd);
 8003b6a:	4d09      	ldr	r5, [pc, #36]	; (8003b90 <BSP_SD_ReadBlocks_DMA+0x54>)
 8003b6c:	2400      	movs	r4, #0
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f7fd fe94 	bl	800189c <HAL_SD_GetCardState>
	} while ((HAL_SD_CARD_TRANSFER != sd_card_state_return) && (SD_DATATIMEOUT > timeout));
 8003b74:	2804      	cmp	r0, #4
		timeout++;
 8003b76:	f104 0401 	add.w	r4, r4, #1
	} while ((HAL_SD_CARD_TRANSFER != sd_card_state_return) && (SD_DATATIMEOUT > timeout));
 8003b7a:	d003      	beq.n	8003b84 <BSP_SD_ReadBlocks_DMA+0x48>
 8003b7c:	42b4      	cmp	r4, r6
 8003b7e:	d1f6      	bne.n	8003b6e <BSP_SD_ReadBlocks_DMA+0x32>
	if ((SD_DATATIMEOUT <= timeout)) { return HAL_TIMEOUT; }
 8003b80:	2003      	movs	r0, #3
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
	return MSD_OK;
 8003b84:	42b4      	cmp	r4, r6
 8003b86:	bf0c      	ite	eq
 8003b88:	2003      	moveq	r0, #3
 8003b8a:	2000      	movne	r0, #0
}
 8003b8c:	bd70      	pop	{r4, r5, r6, pc}
 8003b8e:	bf00      	nop
 8003b90:	2000f0ec 	.word	0x2000f0ec
 8003b94:	05f5e100 	.word	0x05f5e100

08003b98 <BSP_SD_WriteBlocks_DMA>:
{
 8003b98:	b570      	push	{r4, r5, r6, lr}
	if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *) pData, WriteAddr, NumOfBlocks)
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	460a      	mov	r2, r1
 8003b9e:	4601      	mov	r1, r0
 8003ba0:	4812      	ldr	r0, [pc, #72]	; (8003bec <BSP_SD_WriteBlocks_DMA+0x54>)
 8003ba2:	f7fd fbdd 	bl	8001360 <HAL_SD_WriteBlocks_DMA>
 8003ba6:	b108      	cbz	r0, 8003bac <BSP_SD_WriteBlocks_DMA+0x14>
	!= HAL_OK) { return MSD_ERROR; }
 8003ba8:	2001      	movs	r0, #1
 8003baa:	bd70      	pop	{r4, r5, r6, pc}
 8003bac:	4d10      	ldr	r5, [pc, #64]	; (8003bf0 <BSP_SD_WriteBlocks_DMA+0x58>)
	state_return = HAL_SD_GetState(&hsd);
 8003bae:	4c0f      	ldr	r4, [pc, #60]	; (8003bec <BSP_SD_WriteBlocks_DMA+0x54>)
 8003bb0:	462e      	mov	r6, r5
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f7fd fc54 	bl	8001460 <HAL_SD_GetState>
	} while ((HAL_SD_STATE_BUSY == state_return) && (SD_DATATIMEOUT > timeout));
 8003bb8:	2803      	cmp	r0, #3
 8003bba:	d102      	bne.n	8003bc2 <BSP_SD_WriteBlocks_DMA+0x2a>
 8003bbc:	3d01      	subs	r5, #1
 8003bbe:	d1f8      	bne.n	8003bb2 <BSP_SD_WriteBlocks_DMA+0x1a>
 8003bc0:	e7f2      	b.n	8003ba8 <BSP_SD_WriteBlocks_DMA+0x10>
	if (HAL_SD_STATE_READY != state_return) { return MSD_ERROR; }
 8003bc2:	2801      	cmp	r0, #1
 8003bc4:	d1f0      	bne.n	8003ba8 <BSP_SD_WriteBlocks_DMA+0x10>
	sd_card_state_return = HAL_SD_GetCardState(&hsd);
 8003bc6:	4d09      	ldr	r5, [pc, #36]	; (8003bec <BSP_SD_WriteBlocks_DMA+0x54>)
 8003bc8:	2400      	movs	r4, #0
 8003bca:	4628      	mov	r0, r5
 8003bcc:	f7fd fe66 	bl	800189c <HAL_SD_GetCardState>
	} while ((HAL_SD_CARD_TRANSFER != sd_card_state_return) && (SD_DATATIMEOUT > timeout));
 8003bd0:	2804      	cmp	r0, #4
	timeout++;
 8003bd2:	f104 0401 	add.w	r4, r4, #1
	} while ((HAL_SD_CARD_TRANSFER != sd_card_state_return) && (SD_DATATIMEOUT > timeout));
 8003bd6:	d003      	beq.n	8003be0 <BSP_SD_WriteBlocks_DMA+0x48>
 8003bd8:	42b4      	cmp	r4, r6
 8003bda:	d1f6      	bne.n	8003bca <BSP_SD_WriteBlocks_DMA+0x32>
	if ((SD_DATATIMEOUT <= timeout)) { return HAL_TIMEOUT; }
 8003bdc:	2003      	movs	r0, #3
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
	return MSD_OK;
 8003be0:	42b4      	cmp	r4, r6
 8003be2:	bf0c      	ite	eq
 8003be4:	2003      	moveq	r0, #3
 8003be6:	2000      	movne	r0, #0
}
 8003be8:	bd70      	pop	{r4, r5, r6, pc}
 8003bea:	bf00      	nop
 8003bec:	2000f0ec 	.word	0x2000f0ec
 8003bf0:	05f5e100 	.word	0x05f5e100

08003bf4 <BSP_SD_GetCardState>:
{
 8003bf4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003bf6:	4803      	ldr	r0, [pc, #12]	; (8003c04 <BSP_SD_GetCardState+0x10>)
 8003bf8:	f7fd fe50 	bl	800189c <HAL_SD_GetCardState>
}
 8003bfc:	3804      	subs	r0, #4
 8003bfe:	bf18      	it	ne
 8003c00:	2001      	movne	r0, #1
 8003c02:	bd08      	pop	{r3, pc}
 8003c04:	2000f0ec 	.word	0x2000f0ec

08003c08 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003c08:	4601      	mov	r1, r0
 8003c0a:	4801      	ldr	r0, [pc, #4]	; (8003c10 <BSP_SD_GetCardInfo+0x8>)
 8003c0c:	f7fd be34 	b.w	8001878 <HAL_SD_GetCardInfo>
 8003c10:	2000f0ec 	.word	0x2000f0ec

08003c14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8003c14:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SD_Path);
 8003c16:	4903      	ldr	r1, [pc, #12]	; (8003c24 <MX_FATFS_Init+0x10>)
 8003c18:	4803      	ldr	r0, [pc, #12]	; (8003c28 <MX_FATFS_Init+0x14>)
 8003c1a:	f7ff ff7b 	bl	8003b14 <FATFS_LinkDriver>
 8003c1e:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <MX_FATFS_Init+0x18>)
 8003c20:	7018      	strb	r0, [r3, #0]
 8003c22:	bd08      	pop	{r3, pc}
 8003c24:	2000005d 	.word	0x2000005d
 8003c28:	080042d8 	.word	0x080042d8
 8003c2c:	2000005c 	.word	0x2000005c

08003c30 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8003c30:	2000      	movs	r0, #0
 8003c32:	4770      	bx	lr

08003c34 <HAL_ADC_ConvCpltCallback>:
char buf[4];
int flag=0;
/* Private function prototypes -----------------------------------------------*/
// ADC interrupt functions
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c34:	b538      	push	{r3, r4, r5, lr}
  if(i<13255){
 8003c36:	4c0e      	ldr	r4, [pc, #56]	; (8003c70 <HAL_ADC_ConvCpltCallback+0x3c>)
 8003c38:	6825      	ldr	r5, [r4, #0]
 8003c3a:	f243 33c6 	movw	r3, #13254	; 0x33c6
 8003c3e:	429d      	cmp	r5, r3
 8003c40:	d80d      	bhi.n	8003c5e <HAL_ADC_ConvCpltCallback+0x2a>
	  adcResult[i] = HAL_ADC_GetValue(&hadc1); // get adc value
 8003c42:	480c      	ldr	r0, [pc, #48]	; (8003c74 <HAL_ADC_ConvCpltCallback+0x40>)
 8003c44:	f7fc fc40 	bl	80004c8 <HAL_ADC_GetValue>
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_ADC_ConvCpltCallback+0x44>)
 8003c4a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
	  i++;
 8003c4e:	6823      	ldr	r3, [r4, #0]
	  HAL_ADC_Start_IT(&hadc1);	// start interrupt again
 8003c50:	4808      	ldr	r0, [pc, #32]	; (8003c74 <HAL_ADC_ConvCpltCallback+0x40>)
	  i++;
 8003c52:	3301      	adds	r3, #1
 8003c54:	6023      	str	r3, [r4, #0]
  }
  else {
	  flag=1; // if i reaches 13255 stop interrupt
	  HAL_ADC_Stop_IT(&hadc1);
  }
}
 8003c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  HAL_ADC_Start_IT(&hadc1);	// start interrupt again
 8003c5a:	f7fc bbab 	b.w	80003b4 <HAL_ADC_Start_IT>
	  flag=1; // if i reaches 13255 stop interrupt
 8003c5e:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <HAL_ADC_ConvCpltCallback+0x48>)
	  HAL_ADC_Stop_IT(&hadc1);
 8003c60:	4804      	ldr	r0, [pc, #16]	; (8003c74 <HAL_ADC_ConvCpltCallback+0x40>)
	  flag=1; // if i reaches 13255 stop interrupt
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
}
 8003c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  HAL_ADC_Stop_IT(&hadc1);
 8003c6a:	f7fc bc09 	b.w	8000480 <HAL_ADC_Stop_IT>
 8003c6e:	bf00      	nop
 8003c70:	20000054 	.word	0x20000054
 8003c74:	2000e014 	.word	0x2000e014
 8003c78:	200010f8 	.word	0x200010f8
 8003c7c:	20000050 	.word	0x20000050

08003c80 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003c80:	b530      	push	{r4, r5, lr}
 8003c82:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c84:	4b28      	ldr	r3, [pc, #160]	; (8003d28 <SystemClock_Config+0xa8>)
 8003c86:	2100      	movs	r1, #0
 8003c88:	9101      	str	r1, [sp, #4]
 8003c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c9c:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <SystemClock_Config+0xac>)
 8003c9e:	9102      	str	r1, [sp, #8]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cae:	9302      	str	r3, [sp, #8]
 8003cb0:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cba:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cc0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003cc2:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cc4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003cc6:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003cc8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cca:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003ccc:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cce:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003cd0:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cd2:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003cd4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cd6:	f7fd f82b 	bl	8000d30 <HAL_RCC_OscConfig>
 8003cda:	b100      	cbz	r0, 8003cde <SystemClock_Config+0x5e>
 8003cdc:	e7fe      	b.n	8003cdc <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cde:	230f      	movs	r3, #15
 8003ce0:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ce2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ce6:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ce8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003cea:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8003cec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003cf0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cf2:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8003cf4:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003cf6:	f7fd f9e9 	bl	80010cc <HAL_RCC_ClockConfig>
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	b100      	cbz	r0, 8003d00 <SystemClock_Config+0x80>
 8003cfe:	e7fe      	b.n	8003cfe <SystemClock_Config+0x7e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003d00:	f7fd fa9a 	bl	8001238 <HAL_RCC_GetHCLKFreq>
 8003d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d08:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d0c:	f7fc fd60 	bl	80007d0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003d10:	4628      	mov	r0, r5
 8003d12:	f7fc fd73 	bl	80007fc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003d16:	4622      	mov	r2, r4
 8003d18:	4621      	mov	r1, r4
 8003d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1e:	f7fc fd17 	bl	8000750 <HAL_NVIC_SetPriority>
}
 8003d22:	b015      	add	sp, #84	; 0x54
 8003d24:	bd30      	pop	{r4, r5, pc}
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40007000 	.word	0x40007000

08003d30 <main>:
{
 8003d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d34:	b08b      	sub	sp, #44	; 0x2c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d36:	2400      	movs	r4, #0
 8003d38:	4d80      	ldr	r5, [pc, #512]	; (8003f3c <main+0x20c>)
  HAL_Init();
 8003d3a:	f7fc fa59 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 8003d3e:	f7ff ff9f 	bl	8003c80 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d42:	9401      	str	r4, [sp, #4]
 8003d44:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003d46:	487e      	ldr	r0, [pc, #504]	; (8003f40 <main+0x210>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4c:	632b      	str	r3, [r5, #48]	; 0x30
 8003d4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d58:	9402      	str	r4, [sp, #8]
 8003d5a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	632b      	str	r3, [r5, #48]	; 0x30
 8003d62:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	9302      	str	r3, [sp, #8]
 8003d6a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d6c:	9403      	str	r4, [sp, #12]
 8003d6e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003d70:	f043 0308 	orr.w	r3, r3, #8
 8003d74:	632b      	str	r3, [r5, #48]	; 0x30
 8003d76:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	9303      	str	r3, [sp, #12]
 8003d7e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d80:	9404      	str	r4, [sp, #16]
 8003d82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003d84:	f043 0304 	orr.w	r3, r3, #4
 8003d88:	632b      	str	r3, [r5, #48]	; 0x30
 8003d8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003d8c:	f003 0304 	and.w	r3, r3, #4
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003d90:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d92:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003d94:	f44f 4170 	mov.w	r1, #61440	; 0xf000

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d98:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d9a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003d9c:	f7fc ffc2 	bl	8000d24 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003da0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003da4:	a905      	add	r1, sp, #20
 8003da6:	4866      	ldr	r0, [pc, #408]	; (8003f40 <main+0x210>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003da8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003daa:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dac:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dae:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003db0:	f7fc fed8 	bl	8000b64 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003db4:	9400      	str	r4, [sp, #0]
 8003db6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003db8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dbc:	632b      	str	r3, [r5, #48]	; 0x30
 8003dbe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hadc1.Instance = ADC1;
 8003dc0:	4d60      	ldr	r5, [pc, #384]	; (8003f44 <main+0x214>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003dc6:	4622      	mov	r2, r4
 8003dc8:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003dca:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003dcc:	203b      	movs	r0, #59	; 0x3b
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003dce:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003dd0:	f7fc fcbe 	bl	8000750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003dd4:	203b      	movs	r0, #59	; 0x3b
 8003dd6:	f7fc fcef 	bl	80007b8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8003dda:	4622      	mov	r2, r4
 8003ddc:	4621      	mov	r1, r4
 8003dde:	2045      	movs	r0, #69	; 0x45
 8003de0:	f7fc fcb6 	bl	8000750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003de4:	2045      	movs	r0, #69	; 0x45
 8003de6:	f7fc fce7 	bl	80007b8 <HAL_NVIC_EnableIRQ>
  hsd.Instance = SDIO;
 8003dea:	4b57      	ldr	r3, [pc, #348]	; (8003f48 <main+0x218>)
 8003dec:	4a57      	ldr	r2, [pc, #348]	; (8003f4c <main+0x21c>)
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003dee:	609c      	str	r4, [r3, #8]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003df0:	e883 0014 	stmia.w	r3, {r2, r4}
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003df4:	60dc      	str	r4, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003df6:	611c      	str	r4, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003df8:	615c      	str	r4, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003dfa:	619c      	str	r4, [r3, #24]
  MX_FATFS_Init();
 8003dfc:	f7ff ff0a 	bl	8003c14 <MX_FATFS_Init>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003e00:	4a53      	ldr	r2, [pc, #332]	; (8003f50 <main+0x220>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003e02:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003e04:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003e08:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e0c:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e0e:	4b51      	ldr	r3, [pc, #324]	; (8003f54 <main+0x224>)
  hadc1.Init.ScanConvMode = DISABLE;
 8003e10:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003e12:	61ac      	str	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003e14:	622c      	str	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e16:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e18:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e1a:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003e1c:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003e1e:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e20:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e22:	f7fc fa1d 	bl	8000260 <HAL_ADC_Init>
 8003e26:	b100      	cbz	r0, 8003e2a <main+0xfa>
 8003e28:	e7fe      	b.n	8003e28 <main+0xf8>
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003e2a:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e2c:	a905      	add	r1, sp, #20
 8003e2e:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8003e30:	9605      	str	r6, [sp, #20]
  sConfig.Rank = 1;
 8003e32:	9606      	str	r6, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003e34:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e36:	f7fc fbe1 	bl	80005fc <HAL_ADC_ConfigChannel>
 8003e3a:	b100      	cbz	r0, 8003e3e <main+0x10e>
 8003e3c:	e7fe      	b.n	8003e3c <main+0x10c>
  HAL_ADC_Start_IT(&hadc1);
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f7fc fab8 	bl	80003b4 <HAL_ADC_Start_IT>
		  result = f_open(&myFile,myFileName, FA_CREATE_NEW | FA_WRITE);
 8003e44:	4e44      	ldr	r6, [pc, #272]	; (8003f58 <main+0x228>)
	  if(flag==1){
 8003e46:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8003f7c <main+0x24c>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 8003e4a:	483d      	ldr	r0, [pc, #244]	; (8003f40 <main+0x210>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e52:	f7fc ff67 	bl	8000d24 <HAL_GPIO_WritePin>
	  if(flag==1){
 8003e56:	f8d9 4000 	ldr.w	r4, [r9]
 8003e5a:	2c01      	cmp	r4, #1
 8003e5c:	d1f5      	bne.n	8003e4a <main+0x11a>
		  status = disk_initialize(0);
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f7fe f98e 	bl	8002180 <disk_initialize>
 8003e64:	4b3d      	ldr	r3, [pc, #244]	; (8003f5c <main+0x22c>)
		  result = f_mount(&myFatFS, SD_Path, 1);
 8003e66:	493e      	ldr	r1, [pc, #248]	; (8003f60 <main+0x230>)
		  status = disk_initialize(0);
 8003e68:	7018      	strb	r0, [r3, #0]
		  result = f_mount(&myFatFS, SD_Path, 1);
 8003e6a:	4622      	mov	r2, r4
 8003e6c:	483d      	ldr	r0, [pc, #244]	; (8003f64 <main+0x234>)
 8003e6e:	4d3e      	ldr	r5, [pc, #248]	; (8003f68 <main+0x238>)
			  try[0]=(adcResult[counter])/1000;
 8003e70:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8003f80 <main+0x250>
 8003e74:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8003f84 <main+0x254>
		  result = f_mount(&myFatFS, SD_Path, 1);
 8003e78:	f7ff f9bc 	bl	80031f4 <f_mount>
		  char myFileName[]="ADC1.txt";
 8003e7c:	4a3b      	ldr	r2, [pc, #236]	; (8003f6c <main+0x23c>)
		  result = f_mount(&myFatFS, SD_Path, 1);
 8003e7e:	7028      	strb	r0, [r5, #0]
		  char myFileName[]="ADC1.txt";
 8003e80:	6851      	ldr	r1, [r2, #4]
 8003e82:	6810      	ldr	r0, [r2, #0]
 8003e84:	7a12      	ldrb	r2, [r2, #8]
 8003e86:	ab05      	add	r3, sp, #20
 8003e88:	c303      	stmia	r3!, {r0, r1}
		  result = f_open(&myFile,myFileName, FA_CREATE_NEW | FA_WRITE);
 8003e8a:	a905      	add	r1, sp, #20
		  char myFileName[]="ADC1.txt";
 8003e8c:	701a      	strb	r2, [r3, #0]
		  result = f_open(&myFile,myFileName, FA_CREATE_NEW | FA_WRITE);
 8003e8e:	4630      	mov	r0, r6
 8003e90:	2206      	movs	r2, #6
 8003e92:	f7ff f9e7 	bl	8003264 <f_open>
		  for(int counter=0; counter<13255; counter++){
 8003e96:	2700      	movs	r7, #0
		  result = f_open(&myFile,myFileName, FA_CREATE_NEW | FA_WRITE);
 8003e98:	7028      	strb	r0, [r5, #0]
 8003e9a:	46aa      	mov	sl, r5
			  try[0]=(adcResult[counter])/1000;
 8003e9c:	f85b 4027 	ldr.w	r4, [fp, r7, lsl #2]
			  try[1]=(adcResult[counter]/100)%10;
 8003ea0:	230a      	movs	r3, #10
 8003ea2:	2264      	movs	r2, #100	; 0x64
 8003ea4:	fbb4 f2f2 	udiv	r2, r4, r2
 8003ea8:	fbb2 f0f3 	udiv	r0, r2, r3
 8003eac:	fb03 2010 	mls	r0, r3, r0, r2
			  try[2]=(adcResult[counter]/10)%10;
 8003eb0:	fbb4 f2f3 	udiv	r2, r4, r3
 8003eb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8003eb8:	fb03 2111 	mls	r1, r3, r1, r2
			  try[3]=adcResult[counter]%10;
 8003ebc:	fb03 4312 	mls	r3, r3, r2, r4
 8003ec0:	b2db      	uxtb	r3, r3
			  try[0]=(adcResult[counter])/1000;
 8003ec2:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 8003ec6:	fbb4 fefe 	udiv	lr, r4, lr
			  buf[0]=try[0]+48;
 8003eca:	4c29      	ldr	r4, [pc, #164]	; (8003f70 <main+0x240>)
			  try[3]=adcResult[counter]%10;
 8003ecc:	f888 3003 	strb.w	r3, [r8, #3]
			  buf[3]=try[3]+48;
 8003ed0:	3330      	adds	r3, #48	; 0x30
			  try[1]=(adcResult[counter]/100)%10;
 8003ed2:	b2c0      	uxtb	r0, r0
			  try[2]=(adcResult[counter]/10)%10;
 8003ed4:	b2c9      	uxtb	r1, r1
			  buf[3]=try[3]+48;
 8003ed6:	70e3      	strb	r3, [r4, #3]
			  result = f_lseek(&myFile, myFile.fsize);
 8003ed8:	4b26      	ldr	r3, [pc, #152]	; (8003f74 <main+0x244>)
			  try[1]=(adcResult[counter]/100)%10;
 8003eda:	f888 0001 	strb.w	r0, [r8, #1]
			  try[0]=(adcResult[counter])/1000;
 8003ede:	fa5f fe8e 	uxtb.w	lr, lr
			  try[2]=(adcResult[counter]/10)%10;
 8003ee2:	f888 1002 	strb.w	r1, [r8, #2]
			  buf[1]=try[1]+48;
 8003ee6:	3030      	adds	r0, #48	; 0x30
			  buf[2]=try[2]+48;
 8003ee8:	3130      	adds	r1, #48	; 0x30
			  try[0]=(adcResult[counter])/1000;
 8003eea:	f888 e000 	strb.w	lr, [r8]
			  buf[1]=try[1]+48;
 8003eee:	7060      	strb	r0, [r4, #1]
			  buf[0]=try[0]+48;
 8003ef0:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
			  buf[2]=try[2]+48;
 8003ef4:	70a1      	strb	r1, [r4, #2]
			  result = f_lseek(&myFile, myFile.fsize);
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	6819      	ldr	r1, [r3, #0]
			  buf[0]=try[0]+48;
 8003efa:	f884 e000 	strb.w	lr, [r4]
			  result = f_lseek(&myFile, myFile.fsize);
 8003efe:	f7ff fc59 	bl	80037b4 <f_lseek>
			  result = f_write(&myFile, buf, sizeof(buf), &myBytes);
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <main+0x248>)
			  result = f_lseek(&myFile, myFile.fsize);
 8003f04:	f88a 0000 	strb.w	r0, [sl]
			  result = f_write(&myFile, buf, sizeof(buf), &myBytes);
 8003f08:	2204      	movs	r2, #4
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	4630      	mov	r0, r6
 8003f0e:	f7ff fab3 	bl	8003478 <f_write>
		  for(int counter=0; counter<13255; counter++){
 8003f12:	3701      	adds	r7, #1
 8003f14:	f243 33c7 	movw	r3, #13255	; 0x33c7
 8003f18:	429f      	cmp	r7, r3
			  result = f_write(&myFile, buf, sizeof(buf), &myBytes);
 8003f1a:	f88a 0000 	strb.w	r0, [sl]
		  for(int counter=0; counter<13255; counter++){
 8003f1e:	d1bd      	bne.n	8003e9c <main+0x16c>
		  result= f_close(&myFile);
 8003f20:	4630      	mov	r0, r6
 8003f22:	f7ff fc34 	bl	800378e <f_close>
		  flag=0;
 8003f26:	2300      	movs	r3, #0
		  result= f_close(&myFile);
 8003f28:	7028      	strb	r0, [r5, #0]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f30:	4803      	ldr	r0, [pc, #12]	; (8003f40 <main+0x210>)
		  flag=0;
 8003f32:	f8c9 3000 	str.w	r3, [r9]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8003f36:	f7fc fef5 	bl	8000d24 <HAL_GPIO_WritePin>
 8003f3a:	e784      	b.n	8003e46 <main+0x116>
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40020c00 	.word	0x40020c00
 8003f44:	2000e014 	.word	0x2000e014
 8003f48:	2000f0ec 	.word	0x2000f0ec
 8003f4c:	40012c00 	.word	0x40012c00
 8003f50:	40012000 	.word	0x40012000
 8003f54:	0f000001 	.word	0x0f000001
 8003f58:	200000c4 	.word	0x200000c4
 8003f5c:	2000f175 	.word	0x2000f175
 8003f60:	2000005d 	.word	0x2000005d
 8003f64:	2000e05c 	.word	0x2000e05c
 8003f68:	2000f170 	.word	0x2000f170
 8003f6c:	0800437b 	.word	0x0800437b
 8003f70:	2000f171 	.word	0x2000f171
 8003f74:	200010d0 	.word	0x200010d0
 8003f78:	200010f0 	.word	0x200010f0
 8003f7c:	20000050 	.word	0x20000050
 8003f80:	200010f8 	.word	0x200010f8
 8003f84:	200010f4 	.word	0x200010f4

08003f88 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8003f88:	e7fe      	b.n	8003f88 <_Error_Handler>

08003f8a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f8a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f8c:	2003      	movs	r0, #3
 8003f8e:	f7fc fbcd 	bl	800072c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003f92:	2200      	movs	r2, #0
 8003f94:	4611      	mov	r1, r2
 8003f96:	f06f 000b 	mvn.w	r0, #11
 8003f9a:	f7fc fbd9 	bl	8000750 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	f06f 000a 	mvn.w	r0, #10
 8003fa6:	f7fc fbd3 	bl	8000750 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003faa:	2200      	movs	r2, #0
 8003fac:	4611      	mov	r1, r2
 8003fae:	f06f 0009 	mvn.w	r0, #9
 8003fb2:	f7fc fbcd 	bl	8000750 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	4611      	mov	r1, r2
 8003fba:	f06f 0004 	mvn.w	r0, #4
 8003fbe:	f7fc fbc7 	bl	8000750 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	f06f 0003 	mvn.w	r0, #3
 8003fca:	f7fc fbc1 	bl	8000750 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	f06f 0001 	mvn.w	r0, #1
 8003fd6:	f7fc fbbb 	bl	8000750 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4611      	mov	r1, r2
 8003fde:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003fe6:	f7fc bbb3 	b.w	8000750 <HAL_NVIC_SetPriority>
	...

08003fec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003fec:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003fee:	6802      	ldr	r2, [r0, #0]
 8003ff0:	4b11      	ldr	r3, [pc, #68]	; (8004038 <HAL_ADC_MspInit+0x4c>)
 8003ff2:	429a      	cmp	r2, r3
{
 8003ff4:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 8003ff6:	d11d      	bne.n	8004034 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ff8:	2400      	movs	r4, #0
 8003ffa:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003ffe:	9400      	str	r4, [sp, #0]
 8004000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004002:	480e      	ldr	r0, [pc, #56]	; (800403c <HAL_ADC_MspInit+0x50>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004008:	645a      	str	r2, [r3, #68]	; 0x44
 800400a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	9403      	str	r4, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004016:	2302      	movs	r3, #2
 8004018:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800401a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800401c:	2303      	movs	r3, #3
 800401e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004020:	f7fc fda0 	bl	8000b64 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004024:	2012      	movs	r0, #18
 8004026:	4622      	mov	r2, r4
 8004028:	4621      	mov	r1, r4
 800402a:	f7fc fb91 	bl	8000750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800402e:	2012      	movs	r0, #18
 8004030:	f7fc fbc2 	bl	80007b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004034:	b006      	add	sp, #24
 8004036:	bd10      	pop	{r4, pc}
 8004038:	40012000 	.word	0x40012000
 800403c:	40020000 	.word	0x40020000

08004040 <HAL_SD_MspInit>:
  }

}

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDIO)
 8004044:	6802      	ldr	r2, [r0, #0]
 8004046:	4b46      	ldr	r3, [pc, #280]	; (8004160 <HAL_SD_MspInit+0x120>)
 8004048:	429a      	cmp	r2, r3
{
 800404a:	b087      	sub	sp, #28
 800404c:	4605      	mov	r5, r0
  if(hsd->Instance==SDIO)
 800404e:	f040 8084 	bne.w	800415a <HAL_SD_MspInit+0x11a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004052:	2600      	movs	r6, #0
 8004054:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8004058:	9600      	str	r6, [sp, #0]
 800405a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800405c:	4841      	ldr	r0, [pc, #260]	; (8004164 <HAL_SD_MspInit+0x124>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 800405e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004062:	645a      	str	r2, [r3, #68]	; 0x44
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004066:	9603      	str	r6, [sp, #12]
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800406c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800406e:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004070:	240c      	movs	r4, #12

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004072:	f04f 0804 	mov.w	r8, #4
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004076:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004078:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800407a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407e:	f04f 0902 	mov.w	r9, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004082:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8004084:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004086:	f8cd 9008 	str.w	r9, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800408a:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800408c:	f7fc fd6a 	bl	8000b64 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004090:	4835      	ldr	r0, [pc, #212]	; (8004168 <HAL_SD_MspInit+0x128>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004092:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004094:	eb0d 0108 	add.w	r1, sp, r8

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8004098:	4c34      	ldr	r4, [pc, #208]	; (800416c <HAL_SD_MspInit+0x12c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800409a:	f8cd 8004 	str.w	r8, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409e:	f8cd 9008 	str.w	r9, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a2:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a4:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040a6:	f7fc fd5d 	bl	8000b64 <HAL_GPIO_Init>
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040aa:	4b31      	ldr	r3, [pc, #196]	; (8004170 <HAL_SD_MspInit+0x130>)
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040ac:	60e6      	str	r6, [r4, #12]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040ae:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 80040b2:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80040b6:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040be:	6123      	str	r3, [r4, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80040c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040c4:	6163      	str	r3, [r4, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80040c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040ca:	61a3      	str	r3, [r4, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80040cc:	2320      	movs	r3, #32
 80040ce:	61e3      	str	r3, [r4, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80040d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80040d4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80040d6:	4620      	mov	r0, r4
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80040d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80040dc:	6226      	str	r6, [r4, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80040de:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80040e2:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80040e4:	6323      	str	r3, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80040e6:	f7fc fbb1 	bl	800084c <HAL_DMA_Init>
 80040ea:	b118      	cbz	r0, 80040f4 <HAL_SD_MspInit+0xb4>
    {
      _Error_Handler(__FILE__, __LINE__);
 80040ec:	21c3      	movs	r1, #195	; 0xc3
 80040ee:	4821      	ldr	r0, [pc, #132]	; (8004174 <HAL_SD_MspInit+0x134>)
 80040f0:	f7ff ff4a 	bl	8003f88 <_Error_Handler>

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80040f4:	4820      	ldr	r0, [pc, #128]	; (8004178 <HAL_SD_MspInit+0x138>)
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80040f6:	642c      	str	r4, [r5, #64]	; 0x40
 80040f8:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_sdio_rx.Instance = DMA2_Stream6;
 80040fa:	4c20      	ldr	r4, [pc, #128]	; (800417c <HAL_SD_MspInit+0x13c>)
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80040fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004100:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004104:	2300      	movs	r3, #0
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004106:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800410a:	60a3      	str	r3, [r4, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800410c:	60e3      	str	r3, [r4, #12]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800410e:	6223      	str	r3, [r4, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004110:	2304      	movs	r3, #4
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004112:	6122      	str	r2, [r4, #16]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004114:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004116:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800411a:	2303      	movs	r3, #3
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800411c:	6162      	str	r2, [r4, #20]
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800411e:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004120:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004124:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004128:	61a2      	str	r2, [r4, #24]
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800412a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800412c:	2220      	movs	r2, #32
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800412e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004132:	4620      	mov	r0, r4
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004134:	61e2      	str	r2, [r4, #28]
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004136:	6323      	str	r3, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004138:	f7fc fb88 	bl	800084c <HAL_DMA_Init>
 800413c:	b118      	cbz	r0, 8004146 <HAL_SD_MspInit+0x106>
    {
      _Error_Handler(__FILE__, __LINE__);
 800413e:	21d8      	movs	r1, #216	; 0xd8
 8004140:	480c      	ldr	r0, [pc, #48]	; (8004174 <HAL_SD_MspInit+0x134>)
 8004142:	f7ff ff21 	bl	8003f88 <_Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004146:	2200      	movs	r2, #0
 8004148:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800414a:	63ec      	str	r4, [r5, #60]	; 0x3c
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800414c:	4611      	mov	r1, r2
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800414e:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004150:	f7fc fafe 	bl	8000750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004154:	2031      	movs	r0, #49	; 0x31
 8004156:	f7fc fb2f 	bl	80007b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800415a:	b007      	add	sp, #28
 800415c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004160:	40012c00 	.word	0x40012c00
 8004164:	40020800 	.word	0x40020800
 8004168:	40020c00 	.word	0x40020c00
 800416c:	2000f08c 	.word	0x2000f08c
 8004170:	40026458 	.word	0x40026458
 8004174:	08004384 	.word	0x08004384
 8004178:	400264a0 	.word	0x400264a0
 800417c:	20000064 	.word	0x20000064

08004180 <NMI_Handler>:
 8004180:	4770      	bx	lr

08004182 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004182:	e7fe      	b.n	8004182 <HardFault_Handler>

08004184 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004184:	e7fe      	b.n	8004184 <MemManage_Handler>

08004186 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004186:	e7fe      	b.n	8004186 <BusFault_Handler>

08004188 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004188:	e7fe      	b.n	8004188 <UsageFault_Handler>

0800418a <SVC_Handler>:
 800418a:	4770      	bx	lr

0800418c <DebugMon_Handler>:
 800418c:	4770      	bx	lr

0800418e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800418e:	4770      	bx	lr

08004190 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004190:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004192:	f7fc f847 	bl	8000224 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800419a:	f7fc bb3c 	b.w	8000816 <HAL_SYSTICK_IRQHandler>
	...

080041a0 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80041a0:	4801      	ldr	r0, [pc, #4]	; (80041a8 <ADC_IRQHandler+0x8>)
 80041a2:	f7fc b996 	b.w	80004d2 <HAL_ADC_IRQHandler>
 80041a6:	bf00      	nop
 80041a8:	2000e014 	.word	0x2000e014

080041ac <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80041ac:	4801      	ldr	r0, [pc, #4]	; (80041b4 <SDIO_IRQHandler+0x8>)
 80041ae:	f7fd bbf7 	b.w	80019a0 <HAL_SD_IRQHandler>
 80041b2:	bf00      	nop
 80041b4:	2000f0ec 	.word	0x2000f0ec

080041b8 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80041b8:	4801      	ldr	r0, [pc, #4]	; (80041c0 <DMA2_Stream3_IRQHandler+0x8>)
 80041ba:	f7fc bc15 	b.w	80009e8 <HAL_DMA_IRQHandler>
 80041be:	bf00      	nop
 80041c0:	2000f08c 	.word	0x2000f08c

080041c4 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80041c4:	4801      	ldr	r0, [pc, #4]	; (80041cc <DMA2_Stream6_IRQHandler+0x8>)
 80041c6:	f7fc bc0f 	b.w	80009e8 <HAL_DMA_IRQHandler>
 80041ca:	bf00      	nop
 80041cc:	20000064 	.word	0x20000064

080041d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041d0:	490f      	ldr	r1, [pc, #60]	; (8004210 <SystemInit+0x40>)
 80041d2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80041d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <SystemInit+0x44>)
 80041e0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80041e2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80041ea:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80041f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041f6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80041f8:	4a07      	ldr	r2, [pc, #28]	; (8004218 <SystemInit+0x48>)
 80041fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004202:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004204:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004206:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800420a:	608b      	str	r3, [r1, #8]
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	e000ed00 	.word	0xe000ed00
 8004214:	40023800 	.word	0x40023800
 8004218:	24003010 	.word	0x24003010

0800421c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800421c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004254 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004220:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004222:	e003      	b.n	800422c <LoopCopyDataInit>

08004224 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004226:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004228:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800422a:	3104      	adds	r1, #4

0800422c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800422c:	480b      	ldr	r0, [pc, #44]	; (800425c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004230:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004232:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004234:	d3f6      	bcc.n	8004224 <CopyDataInit>
  ldr  r2, =_sbss
 8004236:	4a0b      	ldr	r2, [pc, #44]	; (8004264 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004238:	e002      	b.n	8004240 <LoopFillZerobss>

0800423a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800423a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800423c:	f842 3b04 	str.w	r3, [r2], #4

08004240 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004242:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004244:	d3f9      	bcc.n	800423a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004246:	f7ff ffc3 	bl	80041d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800424a:	f000 f811 	bl	8004270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800424e:	f7ff fd6f 	bl	8003d30 <main>
  bx  lr    
 8004252:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004254:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004258:	080043b8 	.word	0x080043b8
  ldr  r0, =_sdata
 800425c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004260:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8004264:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8004268:	2000f178 	.word	0x2000f178

0800426c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800426c:	e7fe      	b.n	800426c <CAN1_RX0_IRQHandler>
	...

08004270 <__libc_init_array>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	4e0d      	ldr	r6, [pc, #52]	; (80042a8 <__libc_init_array+0x38>)
 8004274:	4c0d      	ldr	r4, [pc, #52]	; (80042ac <__libc_init_array+0x3c>)
 8004276:	1ba4      	subs	r4, r4, r6
 8004278:	10a4      	asrs	r4, r4, #2
 800427a:	2500      	movs	r5, #0
 800427c:	42a5      	cmp	r5, r4
 800427e:	d109      	bne.n	8004294 <__libc_init_array+0x24>
 8004280:	4e0b      	ldr	r6, [pc, #44]	; (80042b0 <__libc_init_array+0x40>)
 8004282:	4c0c      	ldr	r4, [pc, #48]	; (80042b4 <__libc_init_array+0x44>)
 8004284:	f000 f818 	bl	80042b8 <_init>
 8004288:	1ba4      	subs	r4, r4, r6
 800428a:	10a4      	asrs	r4, r4, #2
 800428c:	2500      	movs	r5, #0
 800428e:	42a5      	cmp	r5, r4
 8004290:	d105      	bne.n	800429e <__libc_init_array+0x2e>
 8004292:	bd70      	pop	{r4, r5, r6, pc}
 8004294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004298:	4798      	blx	r3
 800429a:	3501      	adds	r5, #1
 800429c:	e7ee      	b.n	800427c <__libc_init_array+0xc>
 800429e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042a2:	4798      	blx	r3
 80042a4:	3501      	adds	r5, #1
 80042a6:	e7f2      	b.n	800428e <__libc_init_array+0x1e>
 80042a8:	080043b0 	.word	0x080043b0
 80042ac:	080043b0 	.word	0x080043b0
 80042b0:	080043b0 	.word	0x080043b0
 80042b4:	080043b4 	.word	0x080043b4

080042b8 <_init>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	bf00      	nop
 80042bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042be:	bc08      	pop	{r3}
 80042c0:	469e      	mov	lr, r3
 80042c2:	4770      	bx	lr

080042c4 <_fini>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	bf00      	nop
 80042c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ca:	bc08      	pop	{r3}
 80042cc:	469e      	mov	lr, r3
 80042ce:	4770      	bx	lr
